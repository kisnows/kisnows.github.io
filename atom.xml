<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>抹桥杂货店</title>
  <subtitle>Seize the day.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kisnows.com/"/>
  <updated>2017-03-17T14:07:35.840Z</updated>
  <id>http://kisnows.com/</id>
  
  <author>
    <name>抹桥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个 React Form 组件的重构思路</title>
    <link href="http://kisnows.com/2017/03/17/react-form-rework-thinking/"/>
    <id>http://kisnows.com/2017/03/17/react-form-rework-thinking/</id>
    <published>2017-03-17T13:31:31.000Z</published>
    <updated>2017-03-17T14:07:35.840Z</updated>
    
    <content type="html">&lt;p&gt;最近对团队内部 React 组件库（&lt;a href=&quot;https://github.com/NE-LOAN-FED/NE-Component&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;ne-rc&lt;/strong&gt;&lt;/a&gt;）中的 Form 组件进行了重构，记录一下思考的过程。&lt;/p&gt;
&lt;p&gt;一些前置定义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;表单&lt;/td&gt;
&lt;td&gt;Form 组件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;子表单&lt;/td&gt;
&lt;td&gt;嵌套在 Form 下面的类似 Input, Select 这样的子组件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;首先我们看一下，我们的对 Form 组件的需求是什么。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取当前变动表单的状态&lt;ul&gt;
&lt;li&gt;校验所有必填表单是否填写完成&lt;/li&gt;
&lt;li&gt;对外触发具体表单变化的方法 &lt;code&gt;formFieldChange&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;暴露对外提供整个表单状态的方法&lt;ul&gt;
&lt;li&gt;提供整个表单最新状态的方法 $Form.data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提交方法&lt;ul&gt;
&lt;li&gt;校验表单是否通过校验&lt;/li&gt;
&lt;li&gt;对外触发 &lt;code&gt;formSubmit&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接着我们从重构前和重构后，看如何来解决这个问题。&lt;/p&gt;
&lt;h1 id=&quot;Before&quot;&gt;&lt;a href=&quot;#Before&quot; class=&quot;headerlink&quot; title=&quot;Before&quot;&gt;&lt;/a&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;获取当前变动表单的状态&quot;&gt;&lt;a href=&quot;#获取当前变动表单的状态&quot; class=&quot;headerlink&quot; title=&quot;获取当前变动表单的状态&quot;&gt;&lt;/a&gt;获取当前变动表单的状态&lt;/h2&gt;&lt;h3 id=&quot;如何获取变动的子表单&quot;&gt;&lt;a href=&quot;#如何获取变动的子表单&quot; class=&quot;headerlink&quot; title=&quot;如何获取变动的子表单&quot;&gt;&lt;/a&gt;如何获取变动的子表单&lt;/h3&gt;&lt;p&gt;React 父子通信需要通过 prop 传递方法，对于 Form 下面的类似与 Input 之类的子表单的变化想要通知到父级，如果不借助第三方的事件传递方法，那么就只能通过由父级通过 props 向 Input 传递 &lt;code&gt;formFieldChange&lt;/code&gt;（假设就叫这个名字）方法，然后当子组件变化时去调用 &lt;code&gt;formFieldChange&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;p&gt;那么问题来了，什么时候去传递这个方法呢？&lt;/p&gt;
&lt;p&gt;不能在具体页面里面使用的时候再去每条表单里面注册这个方法，那每个用到表单组件的时候就都需要给子表单进行这样的事件绑定，这样太累了。&lt;/p&gt;
&lt;p&gt;所以一开始，我选择通过直接递归的遍历 Form 下面的 children，只要发现这个 children 是我想要的表单类型，那么就重新克隆一个带有 &lt;code&gt;formFieldChange&lt;/code&gt; 的组件来替换掉原来的组件。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  * 获取 form 下面每一个表单对象，注入属性，并收集起来&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  * @param children&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  * @returns &amp;#123;*&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getForms&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;children&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.Children.map(children, (el, i) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!el) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (el.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Input:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Forms.push(el)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.cloneElement(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          el,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            key: i,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            formFieldChange,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            emptyInput&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Select:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Forms.push(el)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.cloneElement(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          el,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            key: i,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            formFieldChange&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CheckBox:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Forms.push(el)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.cloneElement(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          el,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            key: i,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            formFieldChange&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.props &amp;amp;&amp;amp; el.props.children &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; children = getForms(el.props.children)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.cloneElement(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            el,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              key: i,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              children&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; el&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，所有的特定子组件就都可以拿到被注册的方法。以 Input 为例，在 Input 的 &lt;code&gt;onChange&lt;/code&gt; 方法里面去调用从父级 props 传入的 &lt;code&gt;formFieldChange&lt;/code&gt; 就可以通知到 Form 组件了。&lt;/p&gt;
&lt;h3 id=&quot;收集变动表单的数据。&quot;&gt;&lt;a href=&quot;#收集变动表单的数据。&quot; class=&quot;headerlink&quot; title=&quot;收集变动表单的数据。&quot;&gt;&lt;/a&gt;收集变动表单的数据。&lt;/h3&gt;&lt;p&gt;前一步完成后，这一步就比较简单了，Input 在调用 &lt;code&gt;formFieldChange&lt;/code&gt; 的时候把想要传递的数据作为参数传进去，在 Form 里面去对这个参数做处理，就可以拿到当前变动的表单状态数据了。&lt;/p&gt;
&lt;h3 id=&quot;校验表单是否填写完成&quot;&gt;&lt;a href=&quot;#校验表单是否填写完成&quot; class=&quot;headerlink&quot; title=&quot;校验表单是否填写完成&quot;&gt;&lt;/a&gt;校验表单是否填写完成&lt;/h3&gt;&lt;p&gt;前面我们收集了每一条变动表单的数据。但是要判断当前 Form 下面的表单是否填写完成，那么首先需要知道我们有多少个需要填写的表单，然后在 &lt;code&gt;formFieldChange&lt;/code&gt; 的时候进行判断就可以了。如何来提前知道我们有多少需要填写的 Field 呢，之前我选择的是通过在使用 Form 的时候先初始化一个包含所有表单初始化状态的数据。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Form&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.Forms = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.formState = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      isComplete: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      isValidate: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      errorMsg: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      data: &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.formState)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; propTypes = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onChange: PropTypes.func,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onSubmit: PropTypes.func,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    formState: PropTypes.object&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 初始化一个类似这样的对象传递给 Form&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;formState: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    realName: &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cityId: &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    email: &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    relativeName: &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    relativePhone: &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    companyName: &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就很粗暴的解决了这个问题，但是这中间存在很多问题。&lt;/p&gt;
&lt;p&gt;因为限定了特定的组件类型（Input，Select，CheckBox），导致不利于扩展，如果在开发过程遇到其他类型的比如自定义的子表单，那么 Form 就没法对这个自定义子表单进行数据收集，解决起来比较麻烦。&lt;/p&gt;
&lt;p&gt;所以就在考虑另一个种实现方式， Form 只去收集一个特定条件下的组件，只要这个组件满足了这个条件，并实现了对应的接口，那么 Form 就都可以去收集处理。这样也就大大挺高了适用性。&lt;/p&gt;
&lt;h2 id=&quot;暴露对外提供整个表单状态的方法&quot;&gt;&lt;a href=&quot;#暴露对外提供整个表单状态的方法&quot; class=&quot;headerlink&quot; title=&quot;暴露对外提供整个表单状态的方法&quot;&gt;&lt;/a&gt;暴露对外提供整个表单状态的方法&lt;/h2&gt;&lt;p&gt;通过在外监听每次 Form 触发的 &lt;code&gt;onChange&lt;/code&gt; 事件来获取整个 Form 的状态。&lt;/p&gt;
&lt;h2 id=&quot;提交方法&quot;&gt;&lt;a href=&quot;#提交方法&quot; class=&quot;headerlink&quot; title=&quot;提交方法&quot;&gt;&lt;/a&gt;提交方法&lt;/h2&gt;&lt;h3 id=&quot;检验表单是否通过校验&quot;&gt;&lt;a href=&quot;#检验表单是否通过校验&quot; class=&quot;headerlink&quot; title=&quot;检验表单是否通过校验&quot;&gt;&lt;/a&gt;检验表单是否通过校验&lt;/h3&gt;&lt;p&gt;已经有了整个 Form 的数据对象，做校验并不是什么困难。通过校验的时候调用 &lt;code&gt;formSubmit&lt;/code&gt; 方法，没有通过校验的时候对外把错误信息添加到 Form 的 state 上去。&lt;/p&gt;
&lt;h3 id=&quot;对外触发-formSubmit-方法&quot;&gt;&lt;a href=&quot;#对外触发-formSubmit-方法&quot; class=&quot;headerlink&quot; title=&quot;对外触发 formSubmit 方法&quot;&gt;&lt;/a&gt;对外触发 formSubmit 方法&lt;/h3&gt;&lt;p&gt;当表单通过校验的时候，对外触发 &lt;code&gt;formSubmit&lt;/code&gt; 方法，把要提交的数据作为 &lt;code&gt;formSubmit&lt;/code&gt; 的参数传递给外面。&lt;/p&gt;
&lt;h1 id=&quot;After&quot;&gt;&lt;a href=&quot;#After&quot; class=&quot;headerlink&quot; title=&quot;After&quot;&gt;&lt;/a&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;前面是之前写的 Form 组件的一些思路，在实际使用中也基本能满足业务需求。&lt;/p&gt;
&lt;p&gt;但是整个 Form 的可拓展性比较差，无法很好的接入其他自定义的组件。所以萌生了重写的想法。&lt;/p&gt;
&lt;p&gt;对于重写的这个 Form，我的想法是：首先一定要方便使用，不需要一大堆的起始工作；其次就是可拓展性要强，除了自己已经提供的内在 Input，Select 等能够接入 Form 外，对于其他的业务中的特殊需求需要接入 Form 的时候，只要这个组件实现了特定的接口就可以了很方便的接入，而不需要大量的去修改组件内部的代码。&lt;/p&gt;
&lt;p&gt;重构主要集中在上面需求 1 里面的内容，也就是：&lt;strong&gt;获取当前变动表单的状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取当前表单的状态分解下来有一下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取所有需要收集的子表单 &lt;code&gt;formFields&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化 Form &lt;code&gt;state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;表单下面子表单数量或类型发生变化时更新 1 里面创建的 &lt;code&gt;formFields&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子表单内部状态发生变化时通知到父表单&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;获取当前变动表单的状态-1&quot;&gt;&lt;a href=&quot;#获取当前变动表单的状态-1&quot; class=&quot;headerlink&quot; title=&quot;获取当前变动表单的状态&quot;&gt;&lt;/a&gt;获取当前变动表单的状态&lt;/h2&gt;&lt;h3 id=&quot;获取所有需要的子表单&quot;&gt;&lt;a href=&quot;#获取所有需要的子表单&quot; class=&quot;headerlink&quot; title=&quot;获取所有需要的子表单&quot;&gt;&lt;/a&gt;获取所有需要的子表单&lt;/h3&gt;&lt;p&gt;同样通过递归遍历 children 来获取需要收集的子表单，通过子表单的 type.name 命名规则是否符合我们的定义来决定是否要进行收集。&lt;br&gt;直接来看代码：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;collectFormField = (children) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; handleFieldChange = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleFieldChange&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 简单粗暴，在 Form 更新的时候直接清空上一次保存的 formFields，全量更新，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 避免 formFields 内容或者数量发生变化时 this.formFields 数据不正确的问题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; FormFields = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.formFields = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getChildList&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;children&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.Children.map(children, (el, i) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 只要 Name 以 _Field 开头，就认为是需要 From 管理的组件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!el || el === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; reg = &lt;span class=&quot;regexp&quot;&gt;/^_Field/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; childName = el.type &amp;amp;&amp;amp; el.type.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (reg.test(childName)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        FormFields.push(el)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.cloneElement(el, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          key: i,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          handleFieldChange&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.props &amp;amp;&amp;amp; el.props.children) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; children = getChildList(el.props.children)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.cloneElement(el, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            key: i,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            children&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; el&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只要组件的 class name 以 _Field 开头，就把它收集起来，并传入 &lt;code&gt;handleFieldChange&lt;/code&gt; 方法，这样当一个自定义组件接入的时候，只需要在外面包一层，并把 class 的命名为以 _Field 开头的格式就可以被 Form 收集管理了。&lt;/p&gt;
&lt;p&gt;接入组件里面需要做的就是，在合适的时机调用 &lt;code&gt;handleFieldChange&lt;/code&gt; 方法，并把要传递的数据作为参数传递出来就可以了。&lt;/p&gt;
&lt;p&gt;为什么一定要执迷不悟的使用遍历这种低效的方式去收集呢，其实都是为了组件上使用的方便。这样就不需要每次在引用的时候在对子表单做什么操作了。&lt;/p&gt;
&lt;h3 id=&quot;初始化-Form-state&quot;&gt;&lt;a href=&quot;#初始化-Form-state&quot; class=&quot;headerlink&quot; title=&quot;初始化 Form state&quot;&gt;&lt;/a&gt;初始化 Form state&lt;/h3&gt;&lt;p&gt;上一步拿到了所有的子表单，然后通过调用 &lt;code&gt;initialFormDataStructure&lt;/code&gt; 拿来初始化 Form 的 &lt;code&gt;state.data&lt;/code&gt; 的结构，同时通知到外面 Form 发生了变化。&lt;/p&gt;
&lt;h3 id=&quot;子表单数量或类型发生变化时&quot;&gt;&lt;a href=&quot;#子表单数量或类型发生变化时&quot; class=&quot;headerlink&quot; title=&quot;子表单数量或类型发生变化时&quot;&gt;&lt;/a&gt;子表单数量或类型发生变化时&lt;/h3&gt;&lt;p&gt;当 Form 下面子组件被添加或删除时，需要及时更新 Form Data 的结构。通过调用 &lt;code&gt;updateFormDataStructure&lt;/code&gt;&lt;br&gt;把新增的或者修改的子表单更新到最新，并通知到外面 Form 发生了变化。&lt;/p&gt;
&lt;h3 id=&quot;子表单内部状态发生变化时&quot;&gt;&lt;a href=&quot;#子表单内部状态发生变化时&quot; class=&quot;headerlink&quot; title=&quot;子表单内部状态发生变化时&quot;&gt;&lt;/a&gt;子表单内部状态发生变化时&lt;/h3&gt;&lt;p&gt;在第一步收集子表单的时候就已经把 &lt;code&gt;handleFieldChange&lt;/code&gt; 注入到了子表单组件里面，所以子表单来决定调用的时机。当 &lt;code&gt;handleFieldChange&lt;/code&gt; 被调用的时候，首先对 Form &lt;code&gt;state&lt;/code&gt; 进行更新，然后外通知子表单发生了变化，同时通知外面 Form 发生了变化。&lt;/p&gt;
&lt;p&gt;这样看起来整个流程就走通了，但实际上存在很多问题。&lt;/p&gt;
&lt;p&gt;首先由于 &lt;code&gt;setState&lt;/code&gt; 是一个异步的过程，只有在 &lt;code&gt;render&lt;/code&gt; 后才能获取到最新的 &lt;code&gt;state&lt;/code&gt;. 这就导致，在一个生命周期循环内如果我多次调用了 &lt;code&gt;setState&lt;/code&gt; ，那么两次调用之间对 &lt;code&gt;state&lt;/code&gt; 的读取很可能是不准确的。（有关生命周期的详细内容可以看这篇文章：&lt;a href=&quot;https://www.w3ctech.com/topic/1596）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.w3ctech.com/topic/1596）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以我创建了一个临时变量 &lt;code&gt;currentState&lt;/code&gt; 来存放当前状态下最新的 &lt;code&gt;state&lt;/code&gt;，每次 &lt;code&gt;setState&lt;/code&gt; 的时候都对其进行更新。&lt;/p&gt;
&lt;p&gt;另一个问题是当 Form 发生变化的时候，&lt;code&gt;updateFormDataStructure&lt;/code&gt; 调用的过于频繁。其实只有在子表单的数量或者类型发生变化时才需要更新 Form state 的结构。而直接去对比子表单的类型是否发生变化也是意见开销很大操作，所以选择另一种折中方式。通过给 Form 当前的状态打标，将 Form 可能处于的状态都标识出来：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; STATUS = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Init: &lt;span class=&quot;string&quot;&gt;&#39;Init&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Normal: &lt;span class=&quot;string&quot;&gt;&#39;Normal&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  FieldChange: &lt;span class=&quot;string&quot;&gt;&#39;FieldChange&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  UpdateFormDataStructure: &lt;span class=&quot;string&quot;&gt;&#39;UpdateFormDataStructure&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Submit: &lt;span class=&quot;string&quot;&gt;&#39;Submit&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，只有在 Form 的 &lt;code&gt;STATUS&lt;/code&gt; 处于 &lt;code&gt;Normal&lt;/code&gt; 的时候才对其进行 &lt;code&gt;updateFormDataStructure&lt;/code&gt; 操作。这样就可以省去很多次渲染以及无效的对外触发的 &lt;code&gt;FormChange&lt;/code&gt; 事件。&lt;/p&gt;
&lt;p&gt;提交和对外暴露 Form 状态的方法和之前基本一致，这样整个对 Form 的重构就算完成了，具体项目中使用体验还不错 O(∩_∩)O&lt;/p&gt;
&lt;p&gt;Form 组件地址： &lt;a href=&quot;https://github.com/NE-LOAN-FED/NE-Component/tree/master/src/Form&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/NE-LOAN-FED/NE-Component/tree/master/src/Form&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，如果看文章的你有什么更好的想法，请告诉我😛。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近对团队内部 React 组件库（&lt;a href=&quot;https://github.com/NE-LOAN-FED/NE-Component&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;ne-rc&lt;/strong&gt;&lt;/a&gt;）中的 Form
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>【翻译向】Webpack 1 到 2 升级指南</title>
    <link href="http://kisnows.com/2017/01/19/webpack2-migrating-v1-v2/"/>
    <id>http://kisnows.com/2017/01/19/webpack2-migrating-v1-v2/</id>
    <published>2017-01-19T09:00:33.000Z</published>
    <updated>2017-03-16T13:07:32.520Z</updated>
    
    <content type="html">&lt;h2 id=&quot;resolve-root-resolve-fallback-resolve-modulesDirectories&quot;&gt;&lt;a href=&quot;#resolve-root-resolve-fallback-resolve-modulesDirectories&quot; class=&quot;headerlink&quot; title=&quot;resolve.root,resolve.fallback,resolve.modulesDirectories&quot;&gt;&lt;/a&gt;&lt;code&gt;resolve.root&lt;/code&gt;,&lt;code&gt;resolve.fallback&lt;/code&gt;,&lt;code&gt;resolve.modulesDirectories&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这些配置项项都被一个单独的配置所替代 &lt;code&gt;resolve.modules&lt;/code&gt;. 查看 &lt;a href=&quot;https://webpack.js.org/configuration/resolve&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resolving&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;resolve: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   root: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   modules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     &lt;span class=&quot;string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;resolve-extensions&quot;&gt;&lt;a href=&quot;#resolve-extensions&quot; class=&quot;headerlink&quot; title=&quot;resolve.extensions&quot;&gt;&lt;/a&gt;&lt;code&gt;resolve.extensions&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个选项已经不在需要传一个空字符串了。它的行为已经被移动到了 &lt;code&gt;resolve.enforceExtension&lt;/code&gt;. 查看 &lt;a href=&quot;https://webpack.js.org/configuration/resolve&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resolving&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;h2 id=&quot;resolve&quot;&gt;&lt;a href=&quot;#resolve&quot; class=&quot;headerlink&quot; title=&quot;resolve.*&quot;&gt;&lt;/a&gt;&lt;code&gt;resolve.*&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这里修改了很多内容。因为被用到的不是很多，所以就不一一列举出来了。查看 &lt;a href=&quot;https://webpack.js.org/configuration/resolve&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resolving&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;h2 id=&quot;module-loaders-现在是-module-rules&quot;&gt;&lt;a href=&quot;#module-loaders-现在是-module-rules&quot; class=&quot;headerlink&quot; title=&quot;module.loaders 现在是 module.rules&quot;&gt;&lt;/a&gt;&lt;code&gt;module.loaders&lt;/code&gt; 现在是 &lt;code&gt;module.rules&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;老的 loader 配置被一个更加强大的 rules 系统所取代了，允许配置 loader 和更多内容。为了保证一致性，旧的 &lt;code&gt;module.loaders&lt;/code&gt; 语法依然可以合法且可以使用的。新的命名规范更加易于理解，这是一个使用 &lt;code&gt;module.rules&lt;/code&gt; 去升级配置的很好的理由。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-       loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       use: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-           query: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+           options: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              modules: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.jsx$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loader: &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// Do not use &quot;use&quot; here&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;把-loader-链接起来（Chaining-loaders）&quot;&gt;&lt;a href=&quot;#把-loader-链接起来（Chaining-loaders）&quot; class=&quot;headerlink&quot; title=&quot;把 loader 链接起来（Chaining loaders）&quot;&gt;&lt;/a&gt;把 loader 链接起来（Chaining loaders）&lt;/h2&gt;&lt;p&gt;就像在 webpack1 中那样，loader 可以被链接起来，把上一个 loader 的结果传递给下一个 loader. 使用 &lt;a href=&quot;https://webpack.js.org/configuration/module#rule-use&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rule.use&lt;/a&gt;， &lt;code&gt;use&lt;/code&gt; 可以设置为一个 loaders 的列表。在 webpack1 中，loader 通过 &lt;code&gt;!&lt;/code&gt; 来链接再一起。现在只会在 &lt;code&gt;module.loaders&lt;/code&gt; 里面才会支持这样的风格。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   loaders: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   rules: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      test: &lt;span class=&quot;regexp&quot;&gt;/\.less$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-     loader: &lt;span class=&quot;string&quot;&gt;&quot;style-loader!css-loader!less-loader&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     use: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       &lt;span class=&quot;string&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自动添加-loader-后辍的特性被移除了&quot;&gt;&lt;a href=&quot;#自动添加-loader-后辍的特性被移除了&quot; class=&quot;headerlink&quot; title=&quot;自动添加 -loader 后辍的特性被移除了&quot;&gt;&lt;/a&gt;自动添加 &lt;code&gt;-loader&lt;/code&gt; 后辍的特性被移除了&lt;/h2&gt;&lt;p&gt;在引入 loader 的时候不能在省略后面的 &lt;code&gt;-loader&lt;/code&gt; 了。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        use: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-         &lt;span class=&quot;string&quot;&gt;&quot;style&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+         &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-         &lt;span class=&quot;string&quot;&gt;&quot;css&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+         &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-         &lt;span class=&quot;string&quot;&gt;&quot;less&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+         &lt;span class=&quot;string&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不过依旧可以使用 &lt;code&gt;resolveLoader.moduleExtensions&lt;/code&gt; 配置来达到以前的目的，但是我们不推荐这样做。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ resolveLoader: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   moduleExtensions: [&amp;quot;-loader&amp;quot;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;不再需要-json-loader&quot;&gt;&lt;a href=&quot;#不再需要-json-loader&quot; class=&quot;headerlink&quot; title=&quot;不再需要 json-loader&quot;&gt;&lt;/a&gt;不再需要 &lt;code&gt;json-loader&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;当没有给 sjon 文件配置对应的 loader 的时候，webpack 会自动使用 &lt;code&gt;json-loader&lt;/code&gt; 来载入 JSON 文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-     &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-       test: /\.json/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-       loader: &amp;quot;json-loader&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;webpack 选择这样做的目的是想要抹平在 webpack，nodejs 和 browserify 不同环境下的区别。&lt;/p&gt;
&lt;h2 id=&quot;配置中的-loaders-会相对与上下文来解析（Loaders-in-configuration-resolve-relative-to-context）&quot;&gt;&lt;a href=&quot;#配置中的-loaders-会相对与上下文来解析（Loaders-in-configuration-resolve-relative-to-context）&quot; class=&quot;headerlink&quot; title=&quot;配置中的 loaders 会相对与上下文来解析（Loaders in configuration resolve relative to context）&quot;&gt;&lt;/a&gt;配置中的 loaders 会相对与上下文来解析（Loaders in configuration resolve relative to context）&lt;/h2&gt;&lt;p&gt;在 webpack1 中配置的 loader 会相对与匹配到的文件解析。但是 webapck2 中配置的 loader 会根据 &lt;code&gt;context&lt;/code&gt; 的设置来解析。&lt;/p&gt;
&lt;p&gt;这解决了当由于使用 &lt;code&gt;npm link&lt;/code&gt; 或者引用 &lt;code&gt;context&lt;/code&gt; 之外导致模块重复引入的问题。&lt;/p&gt;
&lt;p&gt;你可能会通过 hach 的方式解决这个问题：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-       loader: require.resolve(&amp;quot;my-loader&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       loader: &amp;quot;my-loader&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  resolveLoader: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   root: path.resolve(__dirname, &amp;quot;node_modules&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;module.preLoades&lt;/code&gt; 和 &lt;code&gt;module.postLoaders&lt;/code&gt; 被移除了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   preLoaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: /\.js$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       enforce: &amp;quot;pre&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loader: &amp;quot;eslint-loader&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;UglifyJsPlugin-sourceMap&quot;&gt;&lt;a href=&quot;#UglifyJsPlugin-sourceMap&quot; class=&quot;headerlink&quot; title=&quot;UglifyJsPlugin sourceMap&quot;&gt;&lt;/a&gt;&lt;code&gt;UglifyJsPlugin&lt;/code&gt; sourceMap&lt;/h2&gt;&lt;p&gt;&lt;code&gt;UglifyJsPlugin&lt;/code&gt; 中 &lt;code&gt;souceMap&lt;/code&gt; 的默认选项从 &lt;code&gt;true&lt;/code&gt; 改为了 &lt;code&gt;false&lt;/code&gt;. 这意味着如果你需要在压缩后的代码中使用 souceMap 的功能，需要手动去配置 &lt;code&gt;sourceMap:false&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  devtool: &amp;quot;source-map&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new UglifyJsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     sourceMap: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;UglifyJsPlugin-警告&quot;&gt;&lt;a href=&quot;#UglifyJsPlugin-警告&quot; class=&quot;headerlink&quot; title=&quot;UglifyJsPlugin 警告&quot;&gt;&lt;/a&gt;&lt;code&gt;UglifyJsPlugin&lt;/code&gt; 警告&lt;/h2&gt;&lt;p&gt;&lt;code&gt;UglifyJsPlugin&lt;/code&gt; 中 &lt;code&gt;compress.warnings&lt;/code&gt;  和上一条一样，默认选项从 &lt;code&gt;true&lt;/code&gt; 改为了 &lt;code&gt;false&lt;/code&gt;.如果需要看到 uglifyjs 的警告，需要设置 &lt;code&gt;compress.warnings&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  devtool: &amp;quot;source-map&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new UglifyJsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     compress: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       warnings: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;UglifyJsPlugin-压缩-loader（minimize-loaders）&quot;&gt;&lt;a href=&quot;#UglifyJsPlugin-压缩-loader（minimize-loaders）&quot; class=&quot;headerlink&quot; title=&quot;UglifyJsPlugin 压缩 loader（minimize loaders）&quot;&gt;&lt;/a&gt;&lt;code&gt;UglifyJsPlugin&lt;/code&gt; 压缩 loader（minimize loaders）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;UglifyJsPlugin&lt;/code&gt; 不会在压缩模式下切换 loaders 了。&lt;code&gt;minimize: true&lt;/code&gt; 需要一直被设置在配置来传给 loader 了，查看文档以了解更多的内容。&lt;/p&gt;
&lt;p&gt;在 webpack3 或者后续的版本中，loaders 的压缩模式这个特性会被移除掉。&lt;/p&gt;
&lt;h2 id=&quot;BannderPlugin-breaking-change&quot;&gt;&lt;a href=&quot;#BannderPlugin-breaking-change&quot; class=&quot;headerlink&quot; title=&quot;BannderPlugin - breaking change&quot;&gt;&lt;/a&gt;&lt;code&gt;BannderPlugin&lt;/code&gt; - breaking change&lt;/h2&gt;&lt;p&gt;&lt;code&gt;BannderPlugin&lt;/code&gt; 不在支持传递两个参数，而是传递一个对象。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-    new webpack.BannerPlugin(&amp;apos;Banner&amp;apos;, &amp;#123;raw: true, entryOnly: true&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+    new webpack.BannerPlugin(&amp;#123;banner: &amp;apos;Banner&amp;apos;, raw: true, entryOnly: true&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;OccurrenceOrderPlugin-被作为默认设置&quot;&gt;&lt;a href=&quot;#OccurrenceOrderPlugin-被作为默认设置&quot; class=&quot;headerlink&quot; title=&quot;OccurrenceOrderPlugin 被作为默认设置&quot;&gt;&lt;/a&gt;&lt;code&gt;OccurrenceOrderPlugin&lt;/code&gt; 被作为默认设置&lt;/h2&gt;&lt;p&gt;不在需要手动去配置了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   new webpack.optimize.OccurrenceOrderPlugin()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;ExtractTextWebpackPlugin-breaking-change&quot;&gt;&lt;a href=&quot;#ExtractTextWebpackPlugin-breaking-change&quot; class=&quot;headerlink&quot; title=&quot;ExtractTextWebpackPlugin - breaking change&quot;&gt;&lt;/a&gt;&lt;code&gt;ExtractTextWebpackPlugin&lt;/code&gt; - breaking change&lt;/h2&gt;&lt;p&gt;ExtractTextWebpackPlugin 1.0.0 无法在 webpack2 中正常工作，需要安装 ExtractTextPlugin V2 。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save-dev extract-text-webpack-plugin@beta&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置的区别主要是在语法上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    test: /.css$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-    loader: ExtractTextPlugin.extract(&amp;quot;style-loader&amp;quot;, &amp;quot;css-loader&amp;quot;, &amp;#123; publicPath: &amp;quot;/dist&amp;quot; &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+    loader: ExtractTextPlugin.extract(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+      fallbackLoader: &amp;quot;style-loader&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+      loader: &amp;quot;css-loader&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+      publicPath: &amp;quot;/dist&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;new ExtractTextPlugin({options})&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-  new ExtractTextPlugin(&amp;quot;bundle.css&amp;quot;, &amp;#123; allChunks: true, disable: false &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+  new ExtractTextPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+    filename: &amp;quot;bundle.css&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+    disable: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+    allChunks: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;全动态-require-会默认失败（Full-dynamic-requires-now-fail-by-default）&quot;&gt;&lt;a href=&quot;#全动态-require-会默认失败（Full-dynamic-requires-now-fail-by-default）&quot; class=&quot;headerlink&quot; title=&quot;全动态 require 会默认失败（Full dynamic requires now fail by default）&quot;&gt;&lt;/a&gt;全动态 require 会默认失败（Full dynamic requires now fail by default）&lt;/h2&gt;&lt;p&gt;一个由表达式决定的依赖会创建一个空的上下文来替代之前创建的一个包含完成文件夹的上下文。&lt;/p&gt;
&lt;p&gt;最好重构这里的代码，因为它不会在 ES2015 模块里面工作。如果这对你来说不太可能，可以使用 &lt;code&gt;ContextReplacementPlugin&lt;/code&gt; 来指定编译器找到正确的地址。&lt;/p&gt;
&lt;h2 id=&quot;在-CLI-和配置文件中使用自定义参数&quot;&gt;&lt;a href=&quot;#在-CLI-和配置文件中使用自定义参数&quot; class=&quot;headerlink&quot; title=&quot;在 CLI 和配置文件中使用自定义参数&quot;&gt;&lt;/a&gt;在 CLI 和配置文件中使用自定义参数&lt;/h2&gt;&lt;p&gt;如果你滥用 CLI 参数去传递自定义参数到配置中，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webapck --custom-stuff&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; customStuff = process.argv.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;--custom-stuff&quot;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = config;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会发现这样不再被允许了，现在 CLI 比之前更加严格了。&lt;/p&gt;
&lt;p&gt;作为替代，现在有一个接口用来给配置传递参数。未来的工具会基于这个。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack --env.customStuff&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; customStuff = env.customStuff;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; config;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看 &lt;a href=&quot;https://webpack.js.org/api/cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CLI&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;require-ensure-和-AMD-require-是异步的了&quot;&gt;&lt;a href=&quot;#require-ensure-和-AMD-require-是异步的了&quot; class=&quot;headerlink&quot; title=&quot;require.ensure 和 AMD require 是异步的了&quot;&gt;&lt;/a&gt;&lt;code&gt;require.ensure&lt;/code&gt; 和 AMD &lt;code&gt;require&lt;/code&gt; 是异步的了&lt;/h2&gt;&lt;p&gt;这些函数变成了异步的，代替之前如果代码块已经被加载后它们的回调函数会同步执行的行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;require.ensure&lt;/code&gt; 现在依赖与原生的 &lt;code&gt;Promise&lt;/code&gt;, 如果在一个不支持 &lt;code&gt;Promise&lt;/code&gt; 的环境下使用 &lt;code&gt;require.ensure&lt;/code&gt; ，那么你需要一个 polyfill.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Loader-的配置要通过-options&quot;&gt;&lt;a href=&quot;#Loader-的配置要通过-options&quot; class=&quot;headerlink&quot; title=&quot;Loader 的配置要通过 options&quot;&gt;&lt;/a&gt;Loader 的配置要通过 &lt;code&gt;options&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;不能在通过在 &lt;code&gt;webpack.config.js&lt;/code&gt; 中一个自定义的属性来配置 loader 了。必须通过 &lt;code&gt;options&lt;/code&gt;. 下面这个 &lt;code&gt;ts&lt;/code&gt; 属性的配置在 webpack2 中已经不合法了。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    test: &lt;span class=&quot;regexp&quot;&gt;/\.tsx?$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loader: &lt;span class=&quot;string&quot;&gt;&#39;ts-loader&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// does not work with webpack 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ts: &amp;#123; transpileOnly: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;什么是-options？&quot;&gt;&lt;a href=&quot;#什么是-options？&quot; class=&quot;headerlink&quot; title=&quot;什么是 options？&quot;&gt;&lt;/a&gt;什么是 &lt;code&gt;options&lt;/code&gt;？&lt;/h2&gt;&lt;p&gt;好问题。严格的说，它可能是两个东西；都是用来配置一个 loader 的方式。典型的 &lt;code&gt;options&lt;/code&gt; 被称为 &lt;code&gt;query&lt;/code&gt;, 是一个可以被添加 loader 名字后面的字符串。更像一个 查询字符（query  string），但实际上是 &lt;a href=&quot;https://github.com/webpack/loader-utils#parsequery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;greater powers&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    test: &lt;span class=&quot;regexp&quot;&gt;/\.tsx?$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loader: &lt;span class=&quot;string&quot;&gt;&#39;ts-loader?&#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&amp;#123; transpileOnly: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样可以是一个指定的对象，和 loader 一同提供：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    test: &lt;span class=&quot;regexp&quot;&gt;/\.tsx?$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loader: &lt;span class=&quot;string&quot;&gt;&#39;ts-loader&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options:  &amp;#123; transpileOnly: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;LoaderOptionsPlugin-上下文&quot;&gt;&lt;a href=&quot;#LoaderOptionsPlugin-上下文&quot; class=&quot;headerlink&quot; title=&quot;LoaderOptionsPlugin 上下文&quot;&gt;&lt;/a&gt;&lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; 上下文&lt;/h2&gt;&lt;p&gt;一些 loader 需要从配置文件中读取上下文信息。这个需要长期的设置在 loader 的选项中。&lt;/p&gt;
&lt;p&gt;为了兼容老的 loader，可以通过这个插件来传递给 loader：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  +   &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.LoaderOptionsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    +     options: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  +       context: __dirname&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  +     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;debug&quot;&gt;&lt;a href=&quot;#debug&quot; class=&quot;headerlink&quot; title=&quot;debug&quot;&gt;&lt;/a&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;在 webapck1 中 &lt;code&gt;debug&lt;/code&gt; 选项用来把 loader 切换到 debug 模式。&lt;/p&gt;
&lt;p&gt;在 webapck3 或更后面的版本中，这个模式会被移除掉。&lt;/p&gt;
&lt;p&gt;为了兼容老的 loader，可以通过这个插件来传递参数给 loader：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- debug: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   new webpack.LoaderOptionsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     debug: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ES2015-代码分割&quot;&gt;&lt;a href=&quot;#ES2015-代码分割&quot; class=&quot;headerlink&quot; title=&quot;ES2015 代码分割&quot;&gt;&lt;/a&gt;ES2015 代码分割&lt;/h2&gt;&lt;p&gt;在 webpack1 中，可以通过 &lt;code&gt;require.ensure&lt;/code&gt; 来懒加载一些代码块：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./module&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ES2015 中我们使用 &lt;code&gt;import()&lt;/code&gt; 作为一个方法在运行时动态的记载 ES2015.&lt;/p&gt;
&lt;p&gt;webpack 会把 &lt;code&gt;import()&lt;/code&gt; 作为一个分割点，并且把加载的代码分离出来作为一个单独的代码块。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import()&lt;/code&gt; 需要一个模块的名称作为参数，并返回一个 Promise 对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./module&quot;&lt;/span&gt;).then(&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.default;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;).catch(err =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Chunk loading failed&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好消息：现在代码块加载失败可以被处理了，因为它们是基于 Promise 的。&lt;/p&gt;
&lt;p&gt;警告（Caveat）：&lt;code&gt;require.ensure&lt;/code&gt; 可以方便的指定代码块的名字，通过第三个参数，但是 &lt;code&gt;import&lt;/code&gt; API 还不支持这个特性。如果你还依赖这个功能，那么你可以继续使用 &lt;code&gt;require.ensure&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./module&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;string&quot;&gt;&quot;custom-chunk-name&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想要和 Babel 结合使用 &lt;code&gt;import&lt;/code&gt;, 你需要安装 &lt;a href=&quot;http://babeljs.io/docs/plugins/syntax-dynamic-import/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dynamic-import&lt;/a&gt; 这个还处于 Stage 3 的语法插件来绕过语法解析错误。当这个提案被加到标准里面后，就不需要这么做了。&lt;/p&gt;
&lt;h2 id=&quot;动态表达式（Dynamic-expressions）&quot;&gt;&lt;a href=&quot;#动态表达式（Dynamic-expressions）&quot; class=&quot;headerlink&quot; title=&quot;动态表达式（Dynamic expressions）&quot;&gt;&lt;/a&gt;动态表达式（Dynamic expressions）&lt;/h2&gt;&lt;p&gt;很有可能你会需要传递一个表达式给 &lt;code&gt;import()&lt;/code&gt;. 这里处理的模式跟 CommonJs 中很相似。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import()&lt;/code&gt; 创建一个单独的代码块给每个可能的模块。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;route&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;path, query&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`./routes/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;path&amp;#125;&lt;/span&gt;/route`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .then(route =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; route.Route(query));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This creates a separate chunk for each possible route&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;混合使用-ES2015，AMD-和-CommonJS&quot;&gt;&lt;a href=&quot;#混合使用-ES2015，AMD-和-CommonJS&quot; class=&quot;headerlink&quot; title=&quot;混合使用 ES2015，AMD 和 CommonJS&quot;&gt;&lt;/a&gt;混合使用 ES2015，AMD 和 CommonJS&lt;/h2&gt;&lt;p&gt;如果是 AMD 和 CommonJs ，那么它们完全可以很自由的混合使用。在这种情况下，Webpack 的处理的行为和 babel 或者 node-eps 相似。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// CommonJS consuming ES2015 Module&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; book = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./book&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;book.currentPage;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;book.readPage();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;book.default === &lt;span class=&quot;string&quot;&gt;&quot;This is a book&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES2015 Module consuming CommonJS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// module.exports map to default&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; readFileSync &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// named exports are read from returned object+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fs.readFileSync === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; readFileSync === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很重要的一点是，你需要告诉 babel 不要解析这些模块符号（module symbols），这样 webpack 才能使用它们。在 &lt;code&gt;.babelrc&lt;/code&gt; 中这样配置就可以了：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;babelrc&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;quot;presets&amp;quot;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&amp;quot;es2015&amp;quot;, &amp;#123; &amp;quot;modules&amp;quot;: false &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;提示&quot;&gt;&lt;a href=&quot;#提示&quot; class=&quot;headerlink&quot; title=&quot;提示&quot;&gt;&lt;/a&gt;提示&lt;/h2&gt;&lt;p&gt;不需要修改什么，但是会很方便。&lt;/p&gt;
&lt;h3 id=&quot;字符串模板&quot;&gt;&lt;a href=&quot;#字符串模板&quot; class=&quot;headerlink&quot; title=&quot;字符串模板&quot;&gt;&lt;/a&gt;字符串模板&lt;/h3&gt;&lt;p&gt;webpack 现在支持在表达式中使用字符串模板了。这意味着可以在 webpack constructs 中使用他们：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- require(&amp;quot;./templates/&amp;quot; + name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ require(`./templates/$&amp;#123;name&amp;#125;`);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Configuration-Promise&quot;&gt;&lt;a href=&quot;#Configuration-Promise&quot; class=&quot;headerlink&quot; title=&quot;Configuration Promise&quot;&gt;&lt;/a&gt;Configuration Promise&lt;/h3&gt;&lt;p&gt;webpack 现在支持从配置文件中返回一个 &lt;code&gt;Promise&lt;/code&gt; 了。这意味着我们可以在配置文件中做一些异步的处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webapck.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fetchLangs().then(lang =&amp;gt; (&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefinePlugin(&amp;#123; LANGUAGE: lang &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;高级-loader-匹配&quot;&gt;&lt;a href=&quot;#高级-loader-匹配&quot; class=&quot;headerlink&quot; title=&quot;高级 loader 匹配&quot;&gt;&lt;/a&gt;高级 loader 匹配&lt;/h3&gt;&lt;p&gt;webpack 现在支持更多的方式来让 loader 去匹配文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      resource: &lt;span class=&quot;regexp&quot;&gt;/filename/&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// matches &quot;/path/filename.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      resourceQuery: &lt;span class=&quot;regexp&quot;&gt;/querystring/&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// matches &quot;/filename.js?querystring&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      issuer: &lt;span class=&quot;regexp&quot;&gt;/filename/&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// matches &quot;/path/something.js&quot; if requested from &quot;/path/filename.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;更多的命令行选项&quot;&gt;&lt;a href=&quot;#更多的命令行选项&quot; class=&quot;headerlink&quot; title=&quot;更多的命令行选项&quot;&gt;&lt;/a&gt;更多的命令行选项&lt;/h3&gt;&lt;p&gt;添加了一些新的命令行选项：&lt;br&gt;&lt;code&gt;--define process.env.NODE_ENV=&amp;quot;production&amp;quot;&lt;/code&gt; ,查看 &lt;code&gt;DefinePlugin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--display-depth&lt;/code&gt; 展示每个模块和入口的距离&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--display-used-exports&lt;/code&gt; 展示模块使用了那个模块的暴露的信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--display-max-modules&lt;/code&gt; 设置输出中展示的最大模块数量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-p&lt;/code&gt; 同样设置了 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 为 “production”&lt;/p&gt;
&lt;h3 id=&quot;Loader-修改&quot;&gt;&lt;a href=&quot;#Loader-修改&quot; class=&quot;headerlink&quot; title=&quot;Loader 修改&quot;&gt;&lt;/a&gt;Loader 修改&lt;/h3&gt;&lt;p&gt;只和 loader 的作者有关。&lt;/p&gt;
&lt;h3 id=&quot;可缓存（Cacheable）&quot;&gt;&lt;a href=&quot;#可缓存（Cacheable）&quot; class=&quot;headerlink&quot; title=&quot;可缓存（Cacheable）&quot;&gt;&lt;/a&gt;可缓存（Cacheable）&lt;/h3&gt;&lt;p&gt;Loader 现在默认是可以缓存的。Loader 必须选择 return 如果它们是不可缓存的话。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  // Cacheable loader&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  module.exports = function(source) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   this.cacheable();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return source;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  // Not cacheable loader&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  module.exports = function(source) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   this.cacheable(false);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return source;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;复杂的选项&quot;&gt;&lt;a href=&quot;#复杂的选项&quot; class=&quot;headerlink&quot; title=&quot;复杂的选项&quot;&gt;&lt;/a&gt;复杂的选项&lt;/h3&gt;&lt;p&gt;webpack1 只支持可以 &lt;code&gt;JSON.stringify&lt;/code&gt;选线的 loader. webpack2 支持所有的 plugins 接收一个 JS 对象作为参数。&lt;/p&gt;
&lt;p&gt;使用复杂的选项会带来一个限制。需要给设置对象一个 &lt;code&gt;ident&lt;/code&gt; 使他可以被其它 loaders 引用。&lt;/p&gt;
&lt;p&gt;拥有一个 &lt;code&gt;ident&lt;/code&gt; 在选项对象上，意味着他可以被其它 inline loader 引用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;require(&amp;apos;some-loader??by-iden!resource&amp;apos;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test: /.../,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  loader: &amp;quot;...&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  options: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ident: &amp;quot;by-ident&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    magic: () =&amp;gt; return Math.random()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种 inline 写法不应该经常使用，但是它可以被 laoder 生成的代码使用。例子：style-loader 生成一个模块，&lt;code&gt;require&lt;/code&gt; 了剩下的请求（比如用来暴露 CSS）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// style-loader generated code (simplified)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var addStyle = require(&amp;quot;./add-style&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var css = require(&amp;quot;-!css-loader?&amp;#123;&amp;quot;modules&amp;quot;:true&amp;#125;!postcss-loader??postcss-ident&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;addStyle(css);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以如果你要使用复杂的选项，那么告诉你的用户有关 &lt;code&gt;ident&lt;/code&gt; 的事情。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;resolve-root-resolve-fallback-resolve-modulesDirectories&quot;&gt;&lt;a href=&quot;#resolve-root-resolve-fallback-resolve-modulesDirectories&quot; class=&quot;headerlink&quot; title=&quot;resolve.root,resolve.fallback,resolve.modulesDirectories&quot;&gt;&lt;/a&gt;&lt;code&gt;resolve.root&lt;/code&gt;,&lt;code&gt;resolve.fallback&lt;/code&gt;,&lt;code&gt;resolve.modulesDirectories&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这些配置项项都被一个单独的配置所替代 &lt;code&gt;resolve.modules&lt;/code&gt;. 查看 &lt;a href=&quot;https://webpack.js.org/configuration/resolve&quot;&gt;resolving&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;resolve: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   root: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   modules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+     &lt;span class=&quot;string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;resolve-extensions&quot;&gt;&lt;a href=&quot;#resolve-extensions&quot; class=&quot;headerlink&quot; title=&quot;resolve.extensions&quot;&gt;&lt;/a&gt;&lt;code&gt;resolve.extensions&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个选项已经不在需要传一个空字符串了。它的行为已经被移动到了 &lt;code&gt;resolve.enforceExtension&lt;/code&gt;. 查看 &lt;a href=&quot;https://webpack.js.org/configuration/resolve&quot;&gt;resolving&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;h2 id=&quot;resolve&quot;&gt;&lt;a href=&quot;#resolve&quot; class=&quot;headerlink&quot; title=&quot;resolve.*&quot;&gt;&lt;/a&gt;&lt;code&gt;resolve.*&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这里修改了很多内容。因为被用到的不是很多，所以就不一一列举出来了。查看 &lt;a href=&quot;https://webpack.js.org/configuration/resolve&quot;&gt;resolving&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;h2 id=&quot;module-loaders-现在是-module-rules&quot;&gt;&lt;a href=&quot;#module-loaders-现在是-module-rules&quot; class=&quot;headerlink&quot; title=&quot;module.loaders 现在是 module.rules&quot;&gt;&lt;/a&gt;&lt;code&gt;module.loaders&lt;/code&gt; 现在是 &lt;code&gt;module.rules&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;老的 loader 配置被一个更加强大的 rules 系统所取代了，允许配置 loader 和更多内容。为了保证一致性，旧的 &lt;code&gt;module.loaders&lt;/code&gt; 语法依然可以合法且可以使用的。新的命名规范更加易于理解，这是一个使用 &lt;code&gt;module.rules&lt;/code&gt; 去升级配置的很好的理由。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-   loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+   rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-       loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+       use: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-           query: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+           options: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              modules: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.jsx$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loader: &lt;span class=&quot;string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// Do not use &quot;use&quot; here&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>【翻译向】webpack2 指南（下）</title>
    <link href="http://kisnows.com/2017/01/18/webpack2-guide-3/"/>
    <id>http://kisnows.com/2017/01/18/webpack2-guide-3/</id>
    <published>2017-01-18T09:14:35.000Z</published>
    <updated>2017-02-15T13:17:36.645Z</updated>
    
    <content type="html">&lt;h1 id=&quot;缓存（Caching）&quot;&gt;&lt;a href=&quot;#缓存（Caching）&quot; class=&quot;headerlink&quot; title=&quot;缓存（Caching）&quot;&gt;&lt;/a&gt;缓存（Caching）&lt;/h1&gt;&lt;p&gt;为了能够使 webpack 处理后的静态资源能够长期缓存下来，需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;[chunkhash]&lt;/code&gt; 给每一个文件创建基于内容变化的缓存标识&lt;/li&gt;
&lt;li&gt;在 HTML 文件中引入文件时使用编译状态来拿到文件名称&lt;/li&gt;
&lt;li&gt;在载入资源之前生成 chunk-manifest JSON 文件并写入到 HTML 页面中&lt;/li&gt;
&lt;li&gt;确保包含启动代码的入口代码块的 hash 值不会被修改，当它的依赖没有变化的时候&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;存在的问题&quot;&gt;&lt;a href=&quot;#存在的问题&quot; class=&quot;headerlink&quot; title=&quot;存在的问题&quot;&gt;&lt;/a&gt;存在的问题&lt;/h2&gt;&lt;p&gt;每当我们代码中有一些东西需要被更新的时候，它需要在服务上部署然后由客户端重新下载这些文件。当网络状状况不太好的时候，这是意见非常低效的事情。这也是为什么浏览器要缓存静态资源的原因。&lt;/p&gt;
&lt;p&gt;这会导致一个陷阱：当我们发布一个新的版本的时候不去更新的文件名，这会让浏览器认为文件没有变化，导致客户端拿不到最新的资源。&lt;/p&gt;
&lt;p&gt;一个简单解决问题的方式就是告诉浏览器一个新的文件名。在没有 webpack 的时候我们会使用构建版本来标识此次的更新：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;application.js?build=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;application.css?build=1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 webpack 中这样做也很简单：每一次 webpack 的构建都会生成一个可以用来构成文件名的独一无二的 hash 值。下面这个配置文件会生成两个带有 hash 值的文件名：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    vendor: &lt;span class=&quot;string&quot;&gt;&#39;./src/vendor.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    main: &lt;span class=&quot;string&quot;&gt;&#39;./src/index.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].[hash].js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;执行 webpack 命令会得到以下输出：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Hash: 55e783391098c2496a8f&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Version: webpack 1.10.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Time: 58ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Asset Size Chunks Chunk Names&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;main.55e783391098c2496a8f.js 1.43 kB 0 [emitted] main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vendor.55e783391098c2496a8f.js 1.43 kB 1 [emitted] vendor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[0] ./src/index.js 46 bytes &amp;#123;0&amp;#125; [built]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[0] ./src/vendor.js 40 bytes &amp;#123;1&amp;#125; [built]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但存在的问题是，每次我们重新编译，所有的文件名都会变化，这会导致客户端每次都重新把整个应用的代码重新下载一遍。那么我们如何才能时客户端每次只下载有变动的文件。&lt;/p&gt;
&lt;h2 id=&quot;给每个文件生成独特的-hash&quot;&gt;&lt;a href=&quot;#给每个文件生成独特的-hash&quot; class=&quot;headerlink&quot; title=&quot;给每个文件生成独特的 hash&quot;&gt;&lt;/a&gt;给每个文件生成独特的 hash&lt;/h2&gt;&lt;p&gt;当一个文件的内容没有变化的时候，如何保证它的文件名不会在每次编译中变化。比如，一个用来放所有的我们的所有依赖库文件的代码包。&lt;/p&gt;
&lt;p&gt;Webpack 允许根据文件的内容生成 hash 值。这是更新后的配置：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].[chunkhash].js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个配置同样会生成两个文件，但是每个文件都拥有自己的 hash 值：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;main.155567618f4367cd1cb8.js 1.43 kB 0 [emitted] main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vendor.c2330c22cd2decb5da5a.js 1.43 kB 1 [emitted] vendor&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;不要在开发环境中使用 [chunkhash]，这会导致每次的编译时间边长。把开发环境和生成环境的配置文件分开，在开发环境使用 [name].js ，在生产环境中使用 [name].[chunkhash].js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从 webpack 编译状态（compilation stats）中获取文件名&lt;br&gt;在开发环境中，你只需要在 HTML 中引入你的文件就可以了。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;srcipt&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而，在生产环境中，我们每次都会得到一个不同的文件名：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main.12312123t234.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;srcipt&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了能够在 HTML 中引入正确的文件，我们需要了解一些构建的信息。这可以通过下面这个插件来从 webpack 编译状态（compliation stats） 中提取出来。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.plugin(&lt;span class=&quot;string&quot;&gt;&quot;done&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;stats&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;).writeFileSync(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&quot;…&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;stats.json&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(stats.toJson()));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者，通过下面这些插件来暴露 JSON 文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/webpack-manifest-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/package/webpack-manifest-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/assets-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/package/assets-webpack-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个简单的通过 webpack-manifest-plugin 输出的文件如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;main.js&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;main.155567618f4367cd1cb8.js&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;vendor.js&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;vendor.c2330c22cd2decb5da5a.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来的事情就由你的服务来决定了。这有一个很不错的例子  &lt;a href=&quot;walk through for Rails-based projects&quot;&gt;walk through for Rails-based projects&lt;/a&gt;. 使用 Node.js 的服务端渲染的话可以使用 &lt;a href=&quot;https://github.com/halt-hammerzeit/webpack-isomorphic-tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack-isomorphic-tools&lt;/a&gt;. 如果你的应用不需要依赖服务端渲染的话，那完全可以直接生成一个 &lt;code&gt;index.html&lt;/code&gt;. 可以使用下面这两个插件来完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ampedandwired/html-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ampedandwired/html-webpack-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/szrenwei/inline-manifest-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/szrenwei/inline-manifest-webpack-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;确定的-hashes-Deterministic-hashes&quot;&gt;&lt;a href=&quot;#确定的-hashes-Deterministic-hashes&quot; class=&quot;headerlink&quot; title=&quot;确定的 hashes (Deterministic hashes)&quot;&gt;&lt;/a&gt;确定的 hashes (Deterministic hashes)&lt;/h2&gt;&lt;p&gt;为了压缩生成文件的大小，webpack 使用 id 代替名字来识别模块。再编译过程中，id 已经被生成，映射到代码块的名字并且放到一个 JavaScript 对象中，被叫做代码块清单（ chunk manifest）。它会被放到入口文件中，确保打包后的文件能够正常工作。&lt;/p&gt;
&lt;p&gt;这会有和之前一样的问题：无论修改任何地方的文件，即使其它地方都没有修改，更新后的入口需要包含清单文件。这会生成一个新的 hash 值，导致问们的入口文件名修改，无法享受长期缓存带来的好处。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们应该使用 &lt;a href=&quot;https://github.com/diurnalist/chunk-manifest-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/diurnalist/chunk-manifest-webpack-plugin&lt;/a&gt; ，一个可以把清单文件提取出来单独放到一个 JSON 文件中。这是更新后的配置文件，会生成 chunk-manifest.json 并放到我们打包后的文件夹下面：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ChunkManifestPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;chunk-manifest-webpack-plugin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// your config values here&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChunkManifestPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&quot;chunk-manifest.json&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      manifestVariable: &lt;span class=&quot;string&quot;&gt;&quot;webpackManifest&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们从入口文件中移除掉清单文件后，那么我们就需要手动把这个文件提供给 webapck 使用。在上面的例子中你可能注意到 &lt;code&gt;manifestVariable&lt;/code&gt; 这个选项。这是一个全局变量，一个供 webpack 来查找清单 JSON 文件，这也是为什么我们需要在代码包前面引入到 HTML 中。在 HTML 中写入 JSON 文件的内容是很容易，那么我们的 HTML 文件的 head 部分就会向下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //&amp;lt;![CDATA[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      window.webpackManifest = &amp;#123;&quot;0&quot;:&quot;main.3d038f325b02fdee5724.js&quot;,&quot;1&quot;:&quot;1.c4116058de00860e5aa8.js&quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //]]&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终的 webpack.config.js 文件如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ManifestPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack-manifest-plugin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ChunkManifestPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;chunk-manifest-webpack-plugin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; WebpackMd5Hash = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack-md5-hash&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    vendor: &lt;span class=&quot;string&quot;&gt;&#39;./src/vendor.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    main: &lt;span class=&quot;string&quot;&gt;&#39;./src/index.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].[chunkhash].js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    chunkFilename: &lt;span class=&quot;string&quot;&gt;&#39;[name].[chunkhash].js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.CommonsChunkPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      name: &lt;span class=&quot;string&quot;&gt;&quot;vendor&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      minChunks: &lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebpackMd5Hash(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ManifestPlugin(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChunkManifestPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&quot;chunk-manifest.json&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      manifestVariable: &lt;span class=&quot;string&quot;&gt;&quot;webpackManifest&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用 &lt;a href=&quot;https://github.com/ampedandwired/html-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack-html-plugin&lt;/a&gt; ,那么你可以使用 &lt;a href=&quot;https://github.com/szrenwei/inline-manifest-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; inline-manifest-webpack-plugin &lt;/a&gt; 来做这件事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用这个配置，那么第三方代码块（vendors chunkd）将不会变化，除非你修改它的代码或者依赖。&lt;/p&gt;
&lt;h1 id=&quot;垫片（Shimming）&quot;&gt;&lt;a href=&quot;#垫片（Shimming）&quot; class=&quot;headerlink&quot; title=&quot;垫片（Shimming）&quot;&gt;&lt;/a&gt;垫片（Shimming）&lt;/h1&gt;&lt;p&gt;webpack 作为了个模块打包工具，可以支持的模块系统包括 ES2015 modules, CommonJs 和 AMD. 但是很多情况下，当我们使用第三方库的时候，我们看到他们会依赖一个全局变量比如 &lt;code&gt;$&lt;/code&gt; 或者说 &lt;code&gt;jquery&lt;/code&gt;. 它们也可能创建一些需要暴露出来的新的全局变量。我们来看几种不同的方式来使 webpack 能够理解这些非模块（broken modules）的文件。&lt;/p&gt;
&lt;p&gt;最好使用在 &lt;code&gt;dist&lt;/code&gt; 文件下没有打包压缩过的 CommonJs/AMD 文件（Prefer unminified CommonJS/AMD files over bundled dist versions.）&lt;br&gt;大多数模块会在 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;main&lt;/code&gt; 字段中指定它们的 &lt;code&gt;dist&lt;/code&gt; 版本。这对大多数开发者来说都是非常有用的，对 webpack 来说最好设置一个别名到它们的 &lt;code&gt;src&lt;/code&gt; 目录下面，这样能够使 webpack 更好的优化依赖。但是，在很多情况下使用 &lt;code&gt;dist&lt;/code&gt; 版本也不会有什么大的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  resolve: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  alias: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    jquery: &lt;span class=&quot;string&quot;&gt;&quot;jquery/src/jquery&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;provide-plugin&quot;&gt;&lt;a href=&quot;#provide-plugin&quot; class=&quot;headerlink&quot; title=&quot;provide-plugin&quot;&gt;&lt;/a&gt;&lt;code&gt;provide-plugin&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;通过使用 &lt;code&gt;[provide-plugin](https://webpack.js.org/plugins/provide-plugin)&lt;/code&gt; 使这个模块在所有通过 &lt;code&gt;webpack&lt;/code&gt; 引用的模块中作为一个可用的变量。只有当你使用了这个变量后，对应的模块才会被引用进来。很多古老的模块通过使用特定的全局变量，比如 jQuery 的 &lt;code&gt;$&lt;/code&gt; 和或者 &lt;code&gt;jQuery&lt;/code&gt;.  在这个场景下，你可以提前在 webpack 中配置为 &lt;code&gt;var $=requrei(&amp;#39;jquery&amp;#39;)&lt;/code&gt; ，在每一次遇到全局 &lt;code&gt;$&lt;/code&gt; 标识符。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.ProvidePlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      $: &lt;span class=&quot;string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      jQuery: &lt;span class=&quot;string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;imports-loader&quot;&gt;&lt;a href=&quot;#imports-loader&quot; class=&quot;headerlink&quot; title=&quot;imports-loader&quot;&gt;&lt;/a&gt;&lt;code&gt;imports-loader&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;[imports-loader](https://webpack.js.org/loaders/imports-loader/)&lt;/code&gt; 将必须要的全局变量插入到传统模块中。比如，一些传统模块依赖 &lt;code&gt;this&lt;/code&gt; 指向 &lt;code&gt;window&lt;/code&gt; 对象。这会导致一个问题，当模块被执行在 CommonJS 上下文的时候， &lt;code&gt;this&lt;/code&gt; 指向为 &lt;code&gt;module.exports&lt;/code&gt;.在这种情况下，你可以通过 &lt;code&gt;imports-loader&lt;/code&gt;重写 &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      test: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&quot;some-module&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      use: &lt;span class=&quot;string&quot;&gt;&#39;imports-loader?this=&amp;gt;window&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它支持不同的模块类型，比如 AMD，CommonJS 同时也支持传统模块。可是，通常情况下它会去检查 &lt;code&gt;define&lt;/code&gt; 变量，然后使用一些奇怪（quirky）的代码去暴露这些属性。在这种情况下，通过设置 &lt;code&gt;define = false&lt;/code&gt; 来强制CommonJS 路径可能会有一些帮助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      test: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&quot;some-module&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      use: &lt;span class=&quot;string&quot;&gt;&#39;imports-loader?define=&amp;gt;false&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;exports-loader&quot;&gt;&lt;a href=&quot;#exports-loader&quot; class=&quot;headerlink&quot; title=&quot;exports-loader&quot;&gt;&lt;/a&gt;&lt;code&gt;exports-loader&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;假设一个库文件创建了一个全局变量，期待它的消费者去使用。在这种情况下，我们应该使用 &lt;code&gt;[exports-loader](https://webpack.js.org/loaders/exports-loader/)&lt;/code&gt;, 来暴露一个 CommonJS 风格的全局变量。比如，为了暴露 &lt;code&gt;file&lt;/code&gt; 为 &lt;code&gt;file&lt;/code&gt;，&lt;code&gt;helpers.parse&lt;/code&gt; 为 &lt;code&gt;parse&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      test: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;&quot;some-module&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      use: &lt;span class=&quot;string&quot;&gt;&#39;exports-loader?file,parse=helpers.parse&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// adds below code the the file&#39;s source:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//  exports[&quot;file&quot;] = file;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//  exports[&quot;parse&quot;] = helpers.parse;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;script-loader&quot;&gt;&lt;a href=&quot;#script-loader&quot; class=&quot;headerlink&quot; title=&quot;script-loader&quot;&gt;&lt;/a&gt;&lt;code&gt;script-loader&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;[script-loader](https://webpack.js.org/loaders/script-loader/)&lt;/code&gt; 会在全局上下文里面解析代码，就和你在 HTML 中添加了一个 &lt;code&gt;script&lt;/code&gt; 标签一样。在这种情况下，理论上所有的模块都应该正常的运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个文件会被作为字符串打包在代码中。不会被 &lt;code&gt;webpack&lt;/code&gt; 压缩，所以请使用压缩后的版本。同样这种情况无法使用 webpack 提供的开发工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设你有一个 &lt;code&gt;legacy.js&lt;/code&gt; 文件包含：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;GLOBAL_CONFIG = &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用-script-loader&quot;&gt;&lt;a href=&quot;#使用-script-loader&quot; class=&quot;headerlink&quot; title=&quot;使用 script-loader&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;script-loader&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;script-loader!legacy.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般会得到这样的结果：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;GLOBAL_CONFIG = &amp;#123;&amp;#125;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;noParse-选项&quot;&gt;&lt;a href=&quot;#noParse-选项&quot; class=&quot;headerlink&quot; title=&quot;noParse 选项&quot;&gt;&lt;/a&gt;&lt;code&gt;noParse&lt;/code&gt; 选项&lt;/h2&gt;&lt;p&gt;当没有 AMD/CommonJS 风格的模块，同时你需要在 &lt;code&gt;dist&lt;/code&gt; 中引入，你可以把这个模块标识为 &lt;code&gt;[noParse](https://webpack.js.org/configuration/module/#module-noparse)&lt;/code&gt;. 这样 &lt;code&gt;webpack&lt;/code&gt; 就只会引入这个模块但是不会去做任何处理，这样也可以减少构建的时间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何需要 AST 支持的，比如 &lt;code&gt;ProvidePlugin&lt;/code&gt;, 都是不会工作的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    noParse: &lt;span class=&quot;regexp&quot;&gt;/jquery|backbone/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;编写一个库文件&quot;&gt;&lt;a href=&quot;#编写一个库文件&quot; class=&quot;headerlink&quot; title=&quot;编写一个库文件&quot;&gt;&lt;/a&gt;编写一个库文件&lt;/h1&gt;&lt;p&gt;webpack 是一个工具，可以用来打包应用代码，同样也可以用来打包库代码。如果你是一个 JavaScript 库的作者，正在寻找精简打包代码的流程，那么这个章节的内容会对你很有帮助。&lt;/p&gt;
&lt;h2 id=&quot;编写一个库（Author-a-Library）&quot;&gt;&lt;a href=&quot;#编写一个库（Author-a-Library）&quot; class=&quot;headerlink&quot; title=&quot;编写一个库（Author a Library）&quot;&gt;&lt;/a&gt;编写一个库（Author a Library）&lt;/h2&gt;&lt;p&gt;我们这有一个精简的包装库来把数字 1 到 5 转换到对应的单词，反之亦然。 看起来可能是这样的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/index.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; _ &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;lodash&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numRef &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./ref.json&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numToWord&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _.reduce(numRef, (accum, ref) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ref.num === num ? ref.word : accum;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wordToNum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;word&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _.reduce(numRef, (accum, ref) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ref.word === word &amp;amp;&amp;amp; word.toLowerCase() ? ref.num : accum;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;库的使用规范如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//ES2015modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import*aswebpackNumbersfrom&#39;webpack-numbers&#39;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpackNumbers.wordToNum(&#39;Two&#39;)//outputis2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//CommonJSmodules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;varwebpackNumbers=require(&#39;webpack-numbers&#39;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpackNumbers.numToWord(3);//outputisThree&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//Asascripttag&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;scriptsrc=&quot;https://unpkg.com/webpack-numbers&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*webpackNumbersisavailableasaglobalvariable*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpackNumbers.wordToNum(&#39;Five&#39;)//outputis5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完整的库配置和代码放在这里 &lt;a href=&quot;https://github.com/kalcifer/webpack-library-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; webpack-library-example&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;配置-webpack&quot;&gt;&lt;a href=&quot;#配置-webpack&quot; class=&quot;headerlink&quot; title=&quot;配置 webpack&quot;&gt;&lt;/a&gt;配置 webpack&lt;/h2&gt;&lt;p&gt;那么接下来的事情就是打包这个库&lt;br&gt;    • 不打包 lodash，但是会被它的消费者引入&lt;br&gt;    • 命名这个库为 &lt;code&gt;webpack-numbers&lt;/code&gt;, 并且变量为 &lt;code&gt;webpackNumbers&lt;/code&gt;&lt;br&gt;    • 库可以通过 &lt;code&gt;import webapckNumbers from &amp;#39;webpack-numbers&amp;#39;&lt;/code&gt; 或者 &lt;code&gt;require(&amp;#39;webpack-numbers&amp;#39;)&lt;/code&gt; 来引入&lt;br&gt;    • 当通过 &lt;code&gt;script&lt;/code&gt; 标签引入的时候，可以通过全局变量 &lt;code&gt;webpackNumbers&lt;/code&gt; 来访问&lt;br&gt;    • 可以在 Node.js 中使用&lt;/p&gt;
&lt;h3 id=&quot;添加-webpack&quot;&gt;&lt;a href=&quot;#添加-webpack&quot; class=&quot;headerlink&quot; title=&quot;添加 webpack&quot;&gt;&lt;/a&gt;添加 webpack&lt;/h3&gt;&lt;p&gt;添加基础 webpack 配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  entry: &lt;span class=&quot;string&quot;&gt;&#39;./src/index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: &lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;webpack-numbers.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将添加一个基础配置来打包这个库。&lt;/p&gt;
&lt;h3 id=&quot;添加-Loaders&quot;&gt;&lt;a href=&quot;#添加-Loaders&quot; class=&quot;headerlink&quot; title=&quot;添加 Loaders&quot;&gt;&lt;/a&gt;添加 Loaders&lt;/h3&gt;&lt;p&gt;但是如果没有对应 loaders 去解析代码是没有办法工作的。这里，我们添加 &lt;code&gt;json-loader&lt;/code&gt; 来添加对 json 文件的解析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  // ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      test: /.json$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      use: &amp;apos;json-loader&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加-externals&quot;&gt;&lt;a href=&quot;#添加-externals&quot; class=&quot;headerlink&quot; title=&quot;添加 externals&quot;&gt;&lt;/a&gt;添加 &lt;code&gt;externals&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;现在，如果执行 &lt;code&gt;webpack&lt;/code&gt; 命令，你会发现一个提交较大的代码包被生成。如果你去检查代码，会发现 ladash 被打包到了代码包中。对于你的库来说把 &lt;code&gt;lodash&lt;/code&gt; 打包在一起使完全没有必要的。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;externals&lt;/code&gt; 配置：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    externals: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;lodash&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    commonjs: &lt;span class=&quot;string&quot;&gt;&quot;lodash&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      commonjs2: &lt;span class=&quot;string&quot;&gt;&quot;lodash&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      amd: &lt;span class=&quot;string&quot;&gt;&quot;lodash&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      root: &lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这意味着在使用者的环境下你的库会期望依赖 &lt;code&gt;lodash&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;添加-libraryTarget&quot;&gt;&lt;a href=&quot;#添加-libraryTarget&quot; class=&quot;headerlink&quot; title=&quot;添加 libraryTarget&quot;&gt;&lt;/a&gt;添加 &lt;code&gt;libraryTarget&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;为了这个库能够被广泛的使用，我们需要让它在不同的环境下有相同的表现。比如， CommonJS，AMD，Node.js 或者作为一个全局变量。&lt;/p&gt;
&lt;p&gt;为了达到这个目的，需要在 webpack 配置中添加 &lt;code&gt;library&lt;/code&gt;  属性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  library: &lt;span class=&quot;string&quot;&gt;&#39;webpackNumbers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这能够你的库被引入的时候可以作为一个全局变量被访问。为了能够在其它情况下使用，在配置中继续添加 &lt;code&gt;libraryTarget&lt;/code&gt; 的值：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  library: &lt;span class=&quot;string&quot;&gt;&#39;webpackNumbers&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    libraryTarget:&lt;span class=&quot;string&quot;&gt;&#39;umd&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Possible value - amd, commonjs, commonjs2, commonjs-module, this, var&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 &lt;code&gt;library&lt;/code&gt; 设置了，但是 &lt;code&gt;libraryTarget&lt;/code&gt;没有配置，那么 &lt;code&gt;libraryTarget&lt;/code&gt; 默认为 &lt;code&gt;var&lt;/code&gt; 就像在&lt;a href=&quot;https://webpack.js.org/configuration/output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; config reference&lt;/a&gt; 中指定的一样。&lt;/p&gt;
&lt;h3 id=&quot;最后一步&quot;&gt;&lt;a href=&quot;#最后一步&quot; class=&quot;headerlink&quot; title=&quot;最后一步&quot;&gt;&lt;/a&gt;最后一步&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/guides/production-build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;调整生产环境下的配置文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将打包后的文件添加到  &lt;code&gt;package.json&lt;/code&gt; 中指定的字段里面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;main&quot;: &quot;dist/webpack-numbers.js&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;module&quot;: &quot;src/index.js&quot;, // To add as standard module as per https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你可以把它作为一个 npm 模块发布了，并且在 unpkg.com 里面向你的用户传播了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缓存（Caching）&quot;&gt;&lt;a href=&quot;#缓存（Caching）&quot; class=&quot;headerlink&quot; title=&quot;缓存（Caching）&quot;&gt;&lt;/a&gt;缓存（Caching）&lt;/h1&gt;&lt;p&gt;为了能够使 webpack 处理后的静态资源能够长期缓存下来，需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;[chunkhash]&lt;/code&gt; 给每一个文件创建基于内容变化的缓存标识&lt;/li&gt;
&lt;li&gt;在 HTML 文件中引入文件时使用编译状态来拿到文件名称&lt;/li&gt;
&lt;li&gt;在载入资源之前生成 chunk-manifest JSON 文件并写入到 HTML 页面中&lt;/li&gt;
&lt;li&gt;确保包含启动代码的入口代码块的 hash 值不会被修改，当它的依赖没有变化的时候&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;存在的问题&quot;&gt;&lt;a href=&quot;#存在的问题&quot; class=&quot;headerlink&quot; title=&quot;存在的问题&quot;&gt;&lt;/a&gt;存在的问题&lt;/h2&gt;&lt;p&gt;每当我们代码中有一些东西需要被更新的时候，它需要在服务上部署然后由客户端重新下载这些文件。当网络状状况不太好的时候，这是意见非常低效的事情。这也是为什么浏览器要缓存静态资源的原因。&lt;/p&gt;
&lt;p&gt;这会导致一个陷阱：当我们发布一个新的版本的时候不去更新的文件名，这会让浏览器认为文件没有变化，导致客户端拿不到最新的资源。&lt;/p&gt;
&lt;p&gt;一个简单解决问题的方式就是告诉浏览器一个新的文件名。在没有 webpack 的时候我们会使用构建版本来标识此次的更新：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;application.js?build=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;application.css?build=1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 webpack 中这样做也很简单：每一次 webpack 的构建都会生成一个可以用来构成文件名的独一无二的 hash 值。下面这个配置文件会生成两个带有 hash 值的文件名：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    vendor: &lt;span class=&quot;string&quot;&gt;&#39;./src/vendor.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    main: &lt;span class=&quot;string&quot;&gt;&#39;./src/index.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].[hash].js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="webpack" scheme="http://kisnows.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】webpack2 指南（中）</title>
    <link href="http://kisnows.com/2017/01/18/webpack2-guide-2/"/>
    <id>http://kisnows.com/2017/01/18/webpack2-guide-2/</id>
    <published>2017-01-18T03:49:14.000Z</published>
    <updated>2017-02-15T13:17:36.690Z</updated>
    
    <content type="html">&lt;h1 id=&quot;动态模块替换（Hot-Module-Repalcement-React）&quot;&gt;&lt;a href=&quot;#动态模块替换（Hot-Module-Repalcement-React）&quot; class=&quot;headerlink&quot; title=&quot;动态模块替换（Hot Module Repalcement -React）&quot;&gt;&lt;/a&gt;动态模块替换（Hot Module Repalcement -React）&lt;/h1&gt;&lt;p&gt;就像之前 &lt;a href=&quot;https://webpack.js.org/concepts/hot-module-repalcement&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理念页面&lt;/a&gt; 中解析的细节那样，动态模块替换（HMR）会在应用运行时动态的替换、添加或者删除模块而不用重新刷新页面。 HMR 非常有用，当应用只有一个状态树（single state tree）时。&lt;/p&gt;
&lt;p&gt;下面介绍的方法描述中使用了 Babel 和 React ,但这并不是使用 HRM 所必须的工具。&lt;/p&gt;
&lt;h2 id=&quot;项目配置&quot;&gt;&lt;a href=&quot;#项目配置&quot; class=&quot;headerlink&quot; title=&quot;项目配置&quot;&gt;&lt;/a&gt;项目配置&lt;/h2&gt;&lt;p&gt;这里会指导你如何用 Babel， React 和 PostCss 一起使用 HMR 去演示一个项目。为了能够跟着下面走下去，需要把这些依赖添加到 &lt;code&gt;package.json&lt;/code&gt; 中去。&lt;/p&gt;
&lt;p&gt;为了使用 HMR，你需要如下这些依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save-dev babel@6.5.2 babel-core@6.13.2 babel-loader@6.2.4 babel-preset-es2015@6.13.2 babel-preset-react@6.11.1 babel-preset-stage-2@6.13.0 css-loader@0.23.1 postcss-loader@0.9.1 react-hot-loader@3.0.0-beta.6 style-loader@0.13.1 webpack@2.1.0-beta.25 webpack-dev-server@2.1.0-beta.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时，为了达到我们演示的目的，还需要：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save react@15.3.0 react-dom@15.3.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Babel-Config&quot;&gt;&lt;a href=&quot;#Babel-Config&quot; class=&quot;headerlink&quot; title=&quot;Babel Config&quot;&gt;&lt;/a&gt;Babel Config&lt;/h3&gt;&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt; 文件应该如下：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;modules&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // webpack understands the native import syntax, and uses it for tree shaking&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;stage-2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Specifies what level of language features to activate.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Stage &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; is &lt;span class=&quot;string&quot;&gt;&quot;draft&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; is finished, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; is strawman.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // See https://tc39.github.io/process-document/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Transpile React components to JavaScript&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;react-hot-loader/babel&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Enables React code to work with HMR.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Webpack-Config&quot;&gt;&lt;a href=&quot;#Webpack-Config&quot; class=&quot;headerlink&quot; title=&quot;Webpack Config&quot;&gt;&lt;/a&gt;Webpack Config&lt;/h3&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; resolve &amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  entry: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;react-hot-loader/patch&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// activate HMR for React&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;webpack-dev-server/client?http://localhost:8080&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// bundle the client for webpack-dev-server&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// and connect to the provided endpoint&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;webpack/hot/only-dev-server&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// bundle the client for hot reloading&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// only- means to only hot reload for successful updates&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the entry point of our app&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the output bundle&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicPath: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// necessary for HMR to know where to load the hot update chunks&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  context: resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;src&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  devtool: &lt;span class=&quot;string&quot;&gt;&#39;inline-source-map&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  devServer: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    hot: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// enable HMR on the server&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    contentBase: resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// match the output path&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicPath: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// match the output `publicPath`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rules: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        use: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;babel-loader&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        exclude: &lt;span class=&quot;regexp&quot;&gt;/node_modules/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        use: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;style-loader&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;css-loader?modules&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;postcss-loader&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.HotModuleReplacementPlugin(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// enable HMR globally&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.NamedModulesPlugin(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// prints more readable module names in the browser console on HMR updates&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面有很多配置，但不是所有都和 HMR 有关。可以通过查阅 webpack-dev-server options 和concept pages 来加深理解。&lt;/p&gt;
&lt;p&gt;我们基础设想是这样的，你的 JavaScript 入口文件在 &lt;code&gt;./src/index.js&lt;/code&gt; 且你使用 CSS Module 来编写样式文件。&lt;/p&gt;
&lt;p&gt;配置文件中需要重点关注的是 &lt;code&gt;devServer&lt;/code&gt; 和 &lt;code&gt;entry&lt;/code&gt; key. &lt;code&gt;HotModueReplacementPlugin&lt;/code&gt; 同样需要被包含在 &lt;code&gt;plugins&lt;/code&gt; key 中。&lt;/p&gt;
&lt;p&gt;为了达到目的，我们引入了两个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;react-hot-loader&lt;/code&gt; 添加到了入口中， 是为了能够使 React 支持 HMR&lt;/li&gt;
&lt;li&gt;为了更好的理解 HMR 每次更新的时候做了哪些事情，我们添加了 &lt;code&gt;NamedModulePlugin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ./src/index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; AppContainer &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-hot-loader&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AppContainer is a necessary wrapper component for HMR&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./components/App&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; render = (Component) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ReactDOM.render(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;AppContainer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Component&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;AppContainer&lt;/span&gt;&amp;gt;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render(App);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Hot Module Replacement API&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.hot) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.hot.accept(&lt;span class=&quot;string&quot;&gt;&#39;./components/App&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; NewApp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/App&#39;&lt;/span&gt;).default&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    render(NewApp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ./src/components/App.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; styles &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./App.css&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; App = () =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;styles.app&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; App;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.app&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-size-adjust&lt;/span&gt;: none;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: helvetica, arial, sans-serif;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个需要特别注意的是 &lt;code&gt;module&lt;/code&gt; 的引用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Webpack 会暴露出 &lt;code&gt;module.hot&lt;/code&gt; 给我们的代码，当我们设置 &lt;code&gt;devServer: { hot: true }&lt;/code&gt; 时；&lt;/li&gt;
&lt;li&gt;这样我们可以使用 &lt;code&gt;module.hot&lt;/code&gt; 来给特定的资源弃用 HMR （这里是 &lt;code&gt;App.js&lt;/code&gt;）. 这里有一个非常重要的 API &lt;code&gt;module.hot.accept&lt;/code&gt; ,用来决定如何处理这些特定的依赖。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要注意的是，webpack2 内建支持 ES2015 模块语法，你不需要在 &lt;code&gt;module.hot.accept&lt;/code&gt; 中重新引用跟组件。为了达到这个目的，需要在 &lt;code&gt;.babelrc&lt;/code&gt; 配置 Babel ES2015 的预先设置：&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;modules&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 就像我们在之前 Babel Config 中配置的那样。需要注意，禁用 Babel 的模块功能 不仅仅是为了启用 HMR。如果你不关掉这个配置，那么你会碰到需要问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果你在 webpack2 的配置文件中使用 ES6 模块，并且你按照 #3 修改了 &lt;code&gt;.babelrc&lt;/code&gt;，那么你需要使用 &lt;code&gt;require&lt;/code&gt; 语法来创建两个 &lt;code&gt;.babelrc&lt;/code&gt; 文件：&lt;ol&gt;
&lt;li&gt;一个放在根目录下面并配置为 &lt;code&gt;&amp;quot;presets: [&amp;quot;es2015&amp;quot;]&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个放在 webpack 要编译的文件夹下，比如在这个例子中，就是 &lt;code&gt;src/&lt;/code&gt;&lt;br&gt;所以在这个案例中，&lt;code&gt;module.hot.accept&lt;/code&gt; 会执行 &lt;code&gt;render&lt;/code&gt; 方法无论 &lt;code&gt;src/compoents/App.js&lt;/code&gt; 或者其它的依赖文件变化的时候 ——这意味着当 &lt;code&gt;App.css&lt;/code&gt; 被引入到 &lt;code&gt;App.js&lt;/code&gt; 中以后，即使是 &lt;code&gt;App.css&lt;/code&gt; 被修改，&lt;br&gt;&lt;code&gt;render&lt;/code&gt; 方法同样会被执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Index-html&quot;&gt;&lt;a href=&quot;#Index-html&quot; class=&quot;headerlink&quot; title=&quot;Index.html&quot;&gt;&lt;/a&gt;Index.html&lt;/h3&gt;&lt;p&gt;入口页面需要被放在页面 &lt;code&gt;dist&lt;/code&gt; 下面，webpack-dev-server 的运行需要这个文件。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Example Index&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Package-json&quot;&gt;&lt;a href=&quot;#Package-json&quot; class=&quot;headerlink&quot; title=&quot;Package.json&quot;&gt;&lt;/a&gt;Package.json&lt;/h3&gt;&lt;p&gt;最后，我们需要启动 &lt;code&gt;webpack-dev-server&lt;/code&gt; 来打包我们的代码并且看看 HMR 是如何工作的。我们可以使用如下的 &lt;code&gt;package.json&lt;/code&gt; 入口：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;scripts&quot;&lt;/span&gt; : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;start&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行 &lt;code&gt;npm start&lt;/code&gt;, 打开浏览器输入 &lt;code&gt;http://localhost:8080&lt;/code&gt;, 应该可以看到下面这些项展示在 console.log中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dev-server.js:49[HMR] Waiting for update signal from WDS…&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;only-dev-server.js:74[HMR] Waiting for update signal from WDS…&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;client?c7c8:24 [WDS] Hot Module Replacement enabled.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后编辑并且修改 &lt;code&gt;App.js&lt;/code&gt; 文件，你会在 console.log 中看到类似如下的日志：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[WDS] App updated. Recompiling…&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;client?c7c8:91 [WDS] App hot update…&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dev-server.js:45 [HMR] Checking for updates on the server…&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log-apply-result.js:20 [HMR] Updated modules:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log-apply-result.js:22 [HMR]  - ./components/App.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dev-server.js:27 [HMR] App is up to date.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意 HMR 指出了更新模块的路径。这是因为我们使用了 &lt;code&gt;NamedModulesPlugin&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;开发环境（Development）&quot;&gt;&lt;a href=&quot;#开发环境（Development）&quot; class=&quot;headerlink&quot; title=&quot;开发环境（Development）&quot;&gt;&lt;/a&gt;开发环境（Development）&lt;/h1&gt;&lt;p&gt;这个章节介绍在开发过程中可以使用的一些工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要注意，不能在生产环境使用&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Source-Map&quot;&gt;&lt;a href=&quot;#Source-Map&quot; class=&quot;headerlink&quot; title=&quot;Source Map&quot;&gt;&lt;/a&gt;Source Map&lt;/h2&gt;&lt;p&gt;当 JS 发生异常的时候，我们需要指导是哪一个文件的哪一行出错了。但是当文件都被 webpack 打包以后，找问题会变得很麻烦。&lt;br&gt;Source Map 就是为了解决这个问题的。它有很多不同的&lt;a href=&quot;https://webpack.js.org/configuration/devtool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;选项&lt;/a&gt;，每一种都有的好处和不足。在一开始，我们使用：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;devtool: &lt;span class=&quot;string&quot;&gt;&quot;cheap-eval-source-map&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;选择一个工具（Choosing-a-Tool）&quot;&gt;&lt;a href=&quot;#选择一个工具（Choosing-a-Tool）&quot; class=&quot;headerlink&quot; title=&quot;选择一个工具（Choosing a Tool）&quot;&gt;&lt;/a&gt;选择一个工具（Choosing a Tool）&lt;/h2&gt;&lt;p&gt;Webpack 可被用于监视模式（watch mode）。这种模式下， webpack 会监视你的文件，当它们有变动的时候就会重编译。Webpack-dev-server 提供了一个很方便使用的开发环境的服务，并且支持自动刷新功能。如果你已经有了一个开发环境的服务，并且希望能够拥有更好的适应性，那么 webpack-dev-middleware 可以被用作一个中间件来达到这个目的。&lt;/p&gt;
&lt;p&gt;Webpack-dev-server 和 webpack-dev-middleware 实在内存中进行编译的，这意味着打包后的代码包并不会保存到本地磁盘中。这回使打包变得很快，同时不会产生很多临时文件来污染你的本地文件系统。&lt;/p&gt;
&lt;p&gt;大多数情况下，你都会想要去使用 webpack-dev-server， 因为它使用起来很方便，而且提供了许多开箱即用的功能。&lt;/p&gt;
&lt;h3 id=&quot;Webpack-监视模式（wtach-mode）&quot;&gt;&lt;a href=&quot;#Webpack-监视模式（wtach-mode）&quot; class=&quot;headerlink&quot; title=&quot;Webpack 监视模式（wtach mode）&quot;&gt;&lt;/a&gt;Webpack 监视模式（wtach mode）&lt;/h3&gt;&lt;p&gt;Webpack 的监视模式会检测文件的变动。只要变动被检测到，它就会重新进行一次编译。我们希望它的编译过程能有一个很好的进度展示。那么就执行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack --progress --watch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随便修改一个文件然后保存，你就会看到重新编译的过程。&lt;/p&gt;
&lt;p&gt;监视模式没有考虑任何和服务有关的问题，所以你需要自己提供一个服务。一个简单的服务就是 &lt;code&gt;[server](https://github.com/tj/serve)&lt;/code&gt;. 当安装好后（&lt;code&gt;npm i server -g&lt;/code&gt;），在你打包后的文件目录下运行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当每次重新编译后，你都需要手动的去刷新浏览器。&lt;/p&gt;
&lt;h3 id=&quot;webpack-dev-server&quot;&gt;&lt;a href=&quot;#webpack-dev-server&quot; class=&quot;headerlink&quot; title=&quot;webpack-dev-server&quot;&gt;&lt;/a&gt;webpack-dev-server&lt;/h3&gt;&lt;p&gt;webpack-dev-server 提供一个支持自动刷新的服务。&lt;/p&gt;
&lt;p&gt;首先，确认你 &lt;code&gt;index.html&lt;/code&gt; 页面里面已经引用了你的代码包。我们先假设 &lt;code&gt;output.filename&lt;/code&gt; 设置为 &lt;code&gt;bundle.js&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/bundle.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;srcipt&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从 npm 安装 &lt;code&gt;webpack-dev-server&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install webpack-dev-server --save-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以执行 &lt;code&gt;webpack-dev-server&lt;/code&gt; 的命令了：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack-dev-server --open&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的命令会自动打开你的浏览器并指定到 &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;修改一下你的文件并保存。你会发现代码被重新打包了，当打包完成的时候，页面会自动刷新。如果没有如愿达到效果，那么你需要调整 &lt;code&gt;watchOptions(https://webpack.js.org/configuration/dev-server#devserver-watchoptions-)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;现在你有了一个可以自动刷新的服务，接下来我们看如何启用动态模块替换（Hot Module Replacement）。这是一个可以提供不刷新页面替换模块的接口，查看&lt;a href=&quot;https://webpack.js.org/guides/hmr-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;了解更多 。&lt;/p&gt;
&lt;p&gt;webpack-dev-server 可以做很多的事情，比如代理请求到你的后端服务。想了解更多的配置项，那就查看 &lt;a href=&quot;https://webpack.js.org/configuration/dev-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;devServer 的文档吧&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;webpack-dev-middleware&quot;&gt;&lt;a href=&quot;#webpack-dev-middleware&quot; class=&quot;headerlink&quot; title=&quot;webpack-dev-middleware&quot;&gt;&lt;/a&gt;webpack-dev-middleware&lt;/h3&gt;&lt;p&gt;webpack-dev-middleware 适用于基于中间件的链接堆栈（好难翻译）。当你已经有一个 Node.js 服务或者你想要完全的控制服务的时候会很有用。&lt;/p&gt;
&lt;p&gt;这个中间件会让文件编译在内存中进行。当一个编译在进行过程中，它会延迟一个文件请求，直到它编译完成。&lt;/p&gt;
&lt;p&gt;首先从 npm 上安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install express webpack-dev-server --save-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作为一个例子，我们可以这样使用中间件：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpackDevMiddleware = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;webpack-dev-middleware&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpackConfig = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./webpack.config&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; compiler = webpack(webpackConfig);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.use(webpackDevMiddleware(compiler, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  publicPath: &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Same as `output.publicPath` in most cases.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Listening on port 3000!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据你在 &lt;code&gt;output.publicPath&lt;/code&gt; 和 &lt;code&gt;output.filename&lt;/code&gt; 中的配置，你打包的代码应该可以通过 &lt;code&gt;http://localhost:3000/bundle.js&lt;/code&gt; 访问。&lt;/p&gt;
&lt;p&gt;默认情况下使用的是监视模式。它还支持懒模式（lazy mode），只有在有请求进来的时候才会重新编译。&lt;/p&gt;
&lt;p&gt;配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;app.use(webpackDevMiddleware(compiler, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  lazy: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  filename: &lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Same as `output.filename` in most cases.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有许多其它有用的选项，详细内容可以查看 &lt;a href=&quot;https://webpack.js.org/configuration/dev-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;为生产环境构建（Building-for-Production）&quot;&gt;&lt;a href=&quot;#为生产环境构建（Building-for-Production）&quot; class=&quot;headerlink&quot; title=&quot;为生产环境构建（Building for Production）&quot;&gt;&lt;/a&gt;为生产环境构建（Building for Production）&lt;/h1&gt;&lt;p&gt;本章介绍如何用 webpack 来做生产环境的构建。&lt;/p&gt;
&lt;h2 id=&quot;一条自动化的方式&quot;&gt;&lt;a href=&quot;#一条自动化的方式&quot; class=&quot;headerlink&quot; title=&quot;一条自动化的方式&quot;&gt;&lt;/a&gt;一条自动化的方式&lt;/h2&gt;&lt;p&gt;执行 &lt;code&gt;webpack -p&lt;/code&gt;(等同于 &lt;code&gt;webpack --optimize--minimize --define process.env.NODE_ENV=&amp;quot;production&amp;quot;&lt;/code&gt;).&lt;br&gt;这会执行以下几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;UglifyJsPlugin&lt;/code&gt; 压缩文件&lt;/li&gt;
&lt;li&gt;执行了 &lt;code&gt;LoaderOptionsPlugin&lt;/code&gt;, 查看&lt;a href=&quot;https://webpack.js.org/plugins/loader-options-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;设置 Node 的环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;源码压缩&quot;&gt;&lt;a href=&quot;#源码压缩&quot; class=&quot;headerlink&quot; title=&quot;源码压缩&quot;&gt;&lt;/a&gt;源码压缩&lt;/h3&gt;&lt;p&gt;webpack 使用 &lt;code&gt;UglifyJsPlugin&lt;/code&gt; 来压缩源码，通过执行 &lt;a href=&quot;http://lisperator.net/uglifyjs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UglifyJs&lt;/a&gt; 来达到压缩输出代码的目的。这个插件支持所有 UgilfyJs 的功能。在命令行里输入 &lt;code&gt;--optimize-minimize&lt;/code&gt; ，那么相当与在配置文件中添加了以下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.UglifyJsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      sourceMap: options.devtool &amp;amp;&amp;amp; (options.devtool.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;sourcemap&quot;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || options.devtool.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;source-map&quot;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，基于 &lt;a href=&quot;https://webpack.js.org/configuration/devtool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;devtools option&lt;/a&gt; ，在打包的时候会生成 Source Map.&lt;/p&gt;
&lt;h3 id=&quot;资源映射（Source-Map）&quot;&gt;&lt;a href=&quot;#资源映射（Source-Map）&quot; class=&quot;headerlink&quot; title=&quot;资源映射（Source Map）&quot;&gt;&lt;/a&gt;资源映射（Source Map）&lt;/h3&gt;&lt;p&gt;我们推荐在开发环境启用 Source Map. 因为在 debug 或者测试的时候很有用。Webpack 可以生成包含在代码包或者分离文件中的 inline Source Map.&lt;/p&gt;
&lt;p&gt;在配置文件中，通过修改 &lt;code&gt;devtools&lt;/code&gt; 配置来设置 Source Map 类型。目前我们支持七种不同类型的 Source Map. 可以在&lt;a href=&quot;https://webpack.js.org/configuration/devtool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;具体文档&lt;/a&gt;中找到更加详细的介绍。&lt;/p&gt;
&lt;p&gt;一个比较好好的选择是使用 &lt;code&gt;cheap-module-source-map&lt;/code&gt;，可以将源映射简化为每行映射(simplifies the Source Maps to a single mapping per line)。&lt;/p&gt;
&lt;h3 id=&quot;Node-环境变量&quot;&gt;&lt;a href=&quot;#Node-环境变量&quot; class=&quot;headerlink&quot; title=&quot;Node 环境变量&quot;&gt;&lt;/a&gt;Node 环境变量&lt;/h3&gt;&lt;p&gt;执行 &lt;code&gt;webpack -p&lt;/code&gt;( &lt;code&gt;--define process.env.NODE_EMV=&amp;quot;production&amp;quot;&lt;/code&gt;) 会通过如下的配置调用 &lt;code&gt;DefinePlugin&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.DefinePlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;process.env.NODE_ENV&#39;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;string&quot;&gt;&#39;production&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;DefindPlugin&lt;/code&gt; 会在源码中进行查找和替换的工作。所有找到的 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 都会被替换为 &lt;code&gt;production&lt;/code&gt;.  这样，类似与 &lt;code&gt;if(process.env.NODE_ENV !==&amp;#39;procution&amp;#39;) console.log(…)&lt;/code&gt; 这样的代码就会被 &lt;code&gt;UnglifyJs&lt;/code&gt; 认为等同于  &lt;code&gt;if(false) console.log(…)&lt;/code&gt; .&lt;/p&gt;
&lt;h2 id=&quot;一个手动的方式：为-webpack-配置不同环境变量下的配置文件&quot;&gt;&lt;a href=&quot;#一个手动的方式：为-webpack-配置不同环境变量下的配置文件&quot; class=&quot;headerlink&quot; title=&quot;一个手动的方式：为 webpack 配置不同环境变量下的配置文件&quot;&gt;&lt;/a&gt;一个手动的方式：为 webpack 配置不同环境变量下的配置文件&lt;/h2&gt;&lt;p&gt;一个最简单的方式来为 webpack 配置不同环境变量下的配置文件的方法就是建立多个配置文件。比如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dev.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 此处官网文档有语法错误，我改了一下&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    devtool: &lt;span class=&quot;string&quot;&gt;&#39;cheap-module-source-map&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;/../dist/assets&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].bundle.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      publicPath: publicPath,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      sourceMapFilename: &lt;span class=&quot;string&quot;&gt;&#39;[name].map&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    devServer: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      port: &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      host: &lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      historyApiFallback: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      noInfo: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      stats: &lt;span class=&quot;string&quot;&gt;&#39;minimal&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      publicPath: publicPath&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;prod.js&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;/../dist/assets&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].bundle.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      publicPath: publicPath,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      sourceMapFilename: &lt;span class=&quot;string&quot;&gt;&#39;[name].map&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.LoaderOptionsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        minimize: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        debug: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UglifyJsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        beautify: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mangle: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          screw_ie8: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          keep_fnames: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        compress: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          screw_ie8: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        comments: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后把我们的 webpack.config.js 的内容改成下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildConfig&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./config/&#39;&lt;/span&gt; + env + &lt;span class=&quot;string&quot;&gt;&#39;.js&#39;&lt;/span&gt;)(&amp;#123; env: env &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = buildConfig(env);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，在 &lt;code&gt;package.json&lt;/code&gt; 中添加如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;build:dev&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;webpack --env=dev --progress --profile --colors&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;build:dist&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;webpack --env=prod --progress --profile --colors&quot;&lt;/span&gt;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，我们把环境变量传给了 webpack.config.js 文件。从这里我们使用一个简单的方式通过传递环境变量来决定使用正确的配置文件。&lt;/p&gt;
&lt;p&gt;一个更加高级的途径是我们有一个基础配置文件，里面有所有共通的功能，然后在不同环境变量下的不同功能通过指定特定的文件，然后使用 &lt;code&gt;webpack-merge&lt;/code&gt; 来合并成一个完整的配置。这样可以避免写很多&lt;br&gt;重复的代码。比如，类似与解析 js,ts,png,jpeg 等都是共通的功能，需要放在基础配置文件里面：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;base.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;polyfills&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./src/polyfills.ts&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;vendor&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./src/vendor.ts&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;main&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./src/main.ts&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;/../dist/assets&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].bundle.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      publicPath: publicPath,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      sourceMapFilename: &lt;span class=&quot;string&quot;&gt;&#39;[name].map&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resolve: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      extensions: [&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.ts&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.js&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.json&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      modules: [path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;src&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;node_modules&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      loaders: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.ts$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;awesome-typescript-loader&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;angular2-template-loader&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        exclude: [&lt;span class=&quot;regexp&quot;&gt;/\.(spec|e2e)\.ts$/&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loaders: [&lt;span class=&quot;string&quot;&gt;&#39;to-string-loader&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;css-loader&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.(jpg|png|gif)$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loader: &lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: &lt;span class=&quot;regexp&quot;&gt;/\.(woff|woff2|eot|ttf|svg)$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loader: &lt;span class=&quot;string&quot;&gt;&#39;url-loader?limit=100000&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ForkCheckerPlugin(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.CommonsChunkPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        name: [&lt;span class=&quot;string&quot;&gt;&#39;polyfills&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;vendor&#39;&lt;/span&gt;].reverse()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HtmlWebpackPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        template: &lt;span class=&quot;string&quot;&gt;&#39;src/index.html&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        chunksSortMode: &lt;span class=&quot;string&quot;&gt;&#39;dependency&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后使用 &lt;code&gt;webpack-merge&lt;/code&gt; 来合并特定环境变量下指定的配置文件。来看一个合并生产环境下特定配置的例子（和上面 prod.js 对比以下）：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prod.js(updated)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; webpackMerge = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack-merge&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; commonConfig = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./base.js&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; webpackMerge(commonConfig(), &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.LoaderOptionsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        minimize: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        debug: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.DefinePlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;process.env&#39;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;NODE_ENV&#39;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;string&quot;&gt;&#39;prod&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.UglifyJsPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        beautify: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mangle: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          screw_ie8: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          keep_fnames: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        compress: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          screw_ie8: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        comments: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以注意到，在 ‘prod.js’ 中主要有三处更新，分别是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• 通过 &amp;apos;webpack-meger&amp;apos; 合并了 `base.js`
• 把 `output` 属性移到了 `base.js` 中。我们只要关心在 `base.js` 中以外的不同的配置就可以了
• 通过 `DefinePlugin` 把 `process.env.NODE_ENV` 设置为 `prod`. 这样，整个应用代码中的 `process.env.NODE_ENV` 都有一个为 `prod` 的值了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;哪些需要在不同的环境变量下保持一致都由你来决定。这里只是通过一个 DEMO 来典型的说明一下如何在不同的环境变量下保持部分配置的统一。&lt;/p&gt;
&lt;p&gt;可以看到，&lt;code&gt;webpack-merge&lt;/code&gt; 是多么强大，可以让我们避免写很多重复的代码（外国人话真多）。&lt;/p&gt;
&lt;h1 id=&quot;React-懒加载（Lazy-Loading-React）&quot;&gt;&lt;a href=&quot;#React-懒加载（Lazy-Loading-React）&quot; class=&quot;headerlink&quot; title=&quot;React 懒加载（Lazy Loading - React）&quot;&gt;&lt;/a&gt;React 懒加载（Lazy Loading - React）&lt;/h1&gt;&lt;p&gt;通过使用高阶函数可以使一个组件懒加载它的依赖而不需要它的消费者知道，或者使用一个接收函数或者模块的组件，可以使一个消费者可以懒加载它的子组件而不需要它的子组件知道。&lt;/p&gt;
&lt;h2 id=&quot;组件懒加载&quot;&gt;&lt;a href=&quot;#组件懒加载&quot; class=&quot;headerlink&quot; title=&quot;组件懒加载&quot;&gt;&lt;/a&gt;组件懒加载&lt;/h2&gt;&lt;p&gt;先看一个消费者选择去懒加载一些组件。&lt;code&gt;importLazy&lt;/code&gt; 是一个返回 &lt;code&gt;defualt&lt;/code&gt; 属性的函数，这是为了能和 Babel/ES2015 互通。如果你不需要，可以忽略掉 &lt;code&gt;importLazy&lt;/code&gt; 方法。&lt;code&gt;importLazy&lt;/code&gt; 只是简单的返回了通过 &lt;code&gt;export default&lt;/code&gt; 暴露出的模块。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;LazilyLoad modules=&amp;#123;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  TodoHandler: () =&amp;gt; importLazy(&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/TodoHandler&#39;&lt;/span&gt;)),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  TodoMenuHandler: () =&amp;gt; importLazy(&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/TodoMenuHandler&#39;&lt;/span&gt;)),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  TodoMenu: () =&amp;gt; importLazy(&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/TodoMenu&#39;&lt;/span&gt;)),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;(&amp;#123;TodoHandler, TodoMenuHandler, TodoMenu&amp;#125;) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TodoHandler&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TodoMenuHandler&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TodoMenu&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;TodoMenuHandler&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;TodoHandler&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  )&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;LazilyLoad&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;高阶组件（Higher-Order-Component）&quot;&gt;&lt;a href=&quot;#高阶组件（Higher-Order-Component）&quot; class=&quot;headerlink&quot; title=&quot;高阶组件（Higher Order Component）&quot;&gt;&lt;/a&gt;高阶组件（Higher Order Component）&lt;/h2&gt;&lt;p&gt;作为一个组件，你可以确保整个组件本身的依赖是懒加载的。当一个组件依赖一个非常大的库文件的时候会很有用。假设我们要写一个支持代码高亮的 Todo 组件：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;this.props.isCode ? &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Highlight&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;content&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Highlight&lt;/span&gt;&amp;gt;&lt;/span&gt; : content&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以确保只有当我们需要代码高亮功能的时候才去加载这个代价高昂的库文件：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Highlight.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Highlight&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;Highlight&amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.highlight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// highlight js is now on our props for use&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; LazilyLoadFactory(Highlight, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  highlight: () =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;highlight&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这个 Highlight 组件的消费者是如何在不知情的情况下被懒加载的。&lt;/p&gt;
&lt;h2 id=&quot;完整的代码&quot;&gt;&lt;a href=&quot;#完整的代码&quot; class=&quot;headerlink&quot; title=&quot;完整的代码&quot;&gt;&lt;/a&gt;完整的代码&lt;/h2&gt;&lt;p&gt;LazilyLoad 组件的源码，暴露了组件接口和高阶组件接口。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LazilyLoad&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(...arguments);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      isLoaded: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentWillMount() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.load(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentDidMount() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._isMounted = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentWillReceiveProps(next) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next.modules === &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.modules) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.load(next);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentWillUnmount() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._isMounted = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  load(props) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      isLoaded: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; modules &amp;#125; = props;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; keys = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(modules);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all(keys.map((key) =&amp;gt; modules[key]()))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .then((values) =&amp;gt; (keys.reduce((agg, key, index) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        agg[key] = values[index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; agg;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;, &amp;#123;&amp;#125;)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .then((result) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._isMounted) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123; modules: result, isLoaded: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.isLoaded) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.Children.only(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.children(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.modules));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LazilyLoad.propTypes = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  children: React.PropTypes.func.isRequired,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LazilyLoadFactory = (Component, modules) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (props) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;LazilyLoad&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;modules&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;modules&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;(mods) =&amp;gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Component&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;...mods&lt;/span&gt;&amp;#125; &amp;#123;&lt;span class=&quot;attr&quot;&gt;...props&lt;/span&gt;&amp;#125; /&amp;gt;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;LazilyLoad&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export const importLazy = (promise) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  promise.then((result) =&amp;gt; result.default)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export default LazilyLoad;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过使用 bundle loader 可以语义化命名代码块，一次来智能的加载一组代码&lt;/li&gt;
&lt;li&gt;确保你使用了 babel-preset-2015, 并且设置 modules 为 false，这允许 webpack 去处理 modules&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;公开路径？（Public-Path）&quot;&gt;&lt;a href=&quot;#公开路径？（Public-Path）&quot; class=&quot;headerlink&quot; title=&quot;公开路径？（Public Path）&quot;&gt;&lt;/a&gt;公开路径？（Public Path）&lt;/h1&gt;&lt;p&gt;Webpack 提供了一个很长有用的功能，可以设置你应用中所有资源引用的基础路径。它被称之为 &lt;code&gt;publicPath&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;使用场景（Use-case）&quot;&gt;&lt;a href=&quot;#使用场景（Use-case）&quot; class=&quot;headerlink&quot; title=&quot;使用场景（Use case）&quot;&gt;&lt;/a&gt;使用场景（Use case）&lt;/h2&gt;&lt;p&gt;这里有一些真实应用中的场景，通过这个功能来达到目的。&lt;/p&gt;
&lt;h3 id=&quot;在构建的时候设置值&quot;&gt;&lt;a href=&quot;#在构建的时候设置值&quot; class=&quot;headerlink&quot; title=&quot;在构建的时候设置值&quot;&gt;&lt;/a&gt;在构建的时候设置值&lt;/h3&gt;&lt;p&gt;在开发模式下，我们通常会把 &lt;code&gt;assets/&lt;/code&gt; 目录放在和入口页同级的目录下面。这样没有问题，但是假如在生产环境下你的静态资源是存放在 CDN 上那又该怎么办呢？&lt;/p&gt;
&lt;p&gt;可以很方便的通过环境变量来解决这个问题。假设我们有一个变量 &lt;code&gt;ASSET_PATH&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这里看起来好像有问题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; webpack &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Whatever comes as an environment variable, otherwise use root&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ASSET_PATH = process.env.ASSET_PATH || &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicPath: ASSET_PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This makes it possible for us to safely use env vars on our code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.DefinePlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;process.env.ASSET_PATH&#39;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(ASSET_PATH)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在开发中设置值（Set-Value-on-the-fly）&quot;&gt;&lt;a href=&quot;#在开发中设置值（Set-Value-on-the-fly）&quot; class=&quot;headerlink&quot; title=&quot;在开发中设置值（Set Value on the fly）&quot;&gt;&lt;/a&gt;在开发中设置值（Set Value on the fly）&lt;/h3&gt;&lt;p&gt;另一种方式是在开发过程成设置 public 路径。Webpack 暴露了一个全局变量 &lt;code&gt;__webpack_public_path__&lt;/code&gt; 来让我们达到这个目的。所以在你的入口文件中，你可以这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;__webpack_publick_path__ = process.en.ASSET_PATH;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如何来做都取决于你。当我们通过 &lt;code&gt;DefinePlugin&lt;/code&gt; 进行了配置以后， &lt;code&gt;process.env.ASSET_PATH&lt;/code&gt; 在任何地方都可以直接拿来使用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态模块替换（Hot-Module-Repalcement-React）&quot;&gt;&lt;a href=&quot;#动态模块替换（Hot-Module-Repalcement-React）&quot; class=&quot;headerlink&quot; title=&quot;动态模块替换（Hot Module Repalcement -React）&quot;&gt;&lt;/a&gt;动态模块替换（Hot Module Repalcement -React）&lt;/h1&gt;&lt;p&gt;就像之前 &lt;a href=&quot;https://webpack.js.org/concepts/hot-module-repalcement&quot;&gt;理念页面&lt;/a&gt; 中解析的细节那样，动态模块替换（HMR）会在应用运行时动态的替换、添加或者删除模块而不用重新刷新页面。 HMR 非常有用，当应用只有一个状态树（single state tree）时。&lt;/p&gt;
&lt;p&gt;下面介绍的方法描述中使用了 Babel 和 React ,但这并不是使用 HRM 所必须的工具。&lt;/p&gt;
&lt;h2 id=&quot;项目配置&quot;&gt;&lt;a href=&quot;#项目配置&quot; class=&quot;headerlink&quot; title=&quot;项目配置&quot;&gt;&lt;/a&gt;项目配置&lt;/h2&gt;&lt;p&gt;这里会指导你如何用 Babel， React 和 PostCss 一起使用 HMR 去演示一个项目。为了能够跟着下面走下去，需要把这些依赖添加到 &lt;code&gt;package.json&lt;/code&gt; 中去。&lt;/p&gt;
&lt;p&gt;为了使用 HMR，你需要如下这些依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save-dev babel@6.5.2 babel-core@6.13.2 babel-loader@6.2.4 babel-preset-es2015@6.13.2 babel-preset-react@6.11.1 babel-preset-stage-2@6.13.0 css-loader@0.23.1 postcss-loader@0.9.1 react-hot-loader@3.0.0-beta.6 style-loader@0.13.1 webpack@2.1.0-beta.25 webpack-dev-server@2.1.0-beta.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时，为了达到我们演示的目的，还需要：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save react@15.3.0 react-dom@15.3.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Babel-Config&quot;&gt;&lt;a href=&quot;#Babel-Config&quot; class=&quot;headerlink&quot; title=&quot;Babel Config&quot;&gt;&lt;/a&gt;Babel Config&lt;/h3&gt;&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt; 文件应该如下：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;modules&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // webpack understands the native import syntax, and uses it for tree shaking&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;stage-2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Specifies what level of language features to activate.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Stage &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; is &lt;span class=&quot;string&quot;&gt;&quot;draft&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; is finished, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; is strawman.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // See https://tc39.github.io/process-document/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Transpile React components to JavaScript&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;react-hot-loader/babel&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Enables React code to work with HMR.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Webpack-Config&quot;&gt;&lt;a href=&quot;#Webpack-Config&quot; class=&quot;headerlink&quot; title=&quot;Webpack Config&quot;&gt;&lt;/a&gt;Webpack Config&lt;/h3&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="webpack" scheme="http://kisnows.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】webpack2 指南（上）</title>
    <link href="http://kisnows.com/2017/01/17/webpack2-guide-1/"/>
    <id>http://kisnows.com/2017/01/17/webpack2-guide-1/</id>
    <published>2017-01-17T05:49:35.000Z</published>
    <updated>2017-01-18T12:39:40.638Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前置定义&quot;&gt;&lt;a href=&quot;#前置定义&quot; class=&quot;headerlink&quot; title=&quot;前置定义&quot;&gt;&lt;/a&gt;前置定义&lt;/h1&gt;&lt;p&gt;Bundle 代码包&lt;br&gt;Chunk 代码块&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;npm install webpack –save-dev&lt;/p&gt;
&lt;h1 id=&quot;代码分割&quot;&gt;&lt;a href=&quot;#代码分割&quot; class=&quot;headerlink&quot; title=&quot;代码分割&quot;&gt;&lt;/a&gt;代码分割&lt;/h1&gt;&lt;p&gt;代码分割是 webpack 中最引人注目的功能之一。它允许你把代码分割成各种可以根据需求载入的代码包，就像一个用户浏览器去匹配路由一样，或者一个用户发出的事件。这允许你小的模块，允许你控制资源的载入优先级，如果使用得当的话，可以大大影响（降低）你应用的加载时间。&lt;/p&gt;
&lt;h2 id=&quot;缓存和并行加载的资源分割&quot;&gt;&lt;a href=&quot;#缓存和并行加载的资源分割&quot; class=&quot;headerlink&quot; title=&quot;缓存和并行加载的资源分割&quot;&gt;&lt;/a&gt;缓存和并行加载的资源分割&lt;/h2&gt;&lt;h3 id=&quot;第三方代码分割&quot;&gt;&lt;a href=&quot;#第三方代码分割&quot; class=&quot;headerlink&quot; title=&quot;第三方代码分割&quot;&gt;&lt;/a&gt;第三方代码分割&lt;/h3&gt;&lt;p&gt;一个典型的应用会依赖很多第三方的框架和库文件。不像应用代码本身，这些第三方代码的变更非常频繁。&lt;br&gt;如果我们保持这些库在它本身的代码包中，从应用代码本身分离出来，那么我们就可以使用浏览器的缓存策略去在一个长时间内把这些代码缓存到最终用户的机器上。&lt;/p&gt;
&lt;p&gt;为了达到这个效果，第三方代码的 verndor 包的 hash 部分必须保持不变，不管应用代码如何变化。学习 &lt;a href=&quot;https://webpack.js.org/guids/code-splitting-libraries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何通过 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 来分割 verndor/libray 代码&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;CSS-分割&quot;&gt;&lt;a href=&quot;#CSS-分割&quot; class=&quot;headerlink&quot; title=&quot;CSS 分割&quot;&gt;&lt;/a&gt;CSS 分割&lt;/h3&gt;&lt;p&gt;你可能也想把样式文件分割成为一个单独的包，从应用逻辑总独立出来。这可以增强样式文件的可缓存性，并且允许浏览器在加载应用代码时并行加载你的样式文件，因此也可以避免 FOUC （一个无样式内容的闪屏）。&lt;br&gt;学习 &lt;a href=&quot;https//webpack.js.org/guides/code-splitting-css&quot;&gt;如何去分割 CSS&lt;/a&gt; 通过使用 &lt;code&gt;ExtractTextWebpackPlugin&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;按需代码分割&quot;&gt;&lt;a href=&quot;#按需代码分割&quot; class=&quot;headerlink&quot; title=&quot;按需代码分割&quot;&gt;&lt;/a&gt;按需代码分割&lt;/h2&gt;&lt;p&gt;虽然前面的资源分割需要用户在配置文件中预先指定分割点，但是也可以在应用代码中创建动态的分割点。&lt;/p&gt;
&lt;p&gt;这个功能在有很多细微颗粒代码块时会很有用，举个例子，每一个应用的路由或者按照用户的预测行为。这可以使用户按需加载需要的资源。&lt;/p&gt;
&lt;h3 id=&quot;通过-require-ensure-来分割代码&quot;&gt;&lt;a href=&quot;#通过-require-ensure-来分割代码&quot; class=&quot;headerlink&quot; title=&quot;通过 require.ensure() 来分割代码&quot;&gt;&lt;/a&gt;通过 &lt;code&gt;require.ensure()&lt;/code&gt; 来分割代码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;require.ensure&lt;/code&gt; 是一个 CommonJS 风格的方式去异步加载资源。通过添加 &lt;code&gt;require.ensure([&amp;lt;fileurl&amp;gt;])&lt;/code&gt; , 我们可以在代码中定义一个分割点。 Webpack 可以创建一个包含在这个分割点中的所有代码的代码包。学习 &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-require&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何分割代码&lt;/a&gt; 通过使用 &lt;code&gt;require.ensure()&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TODO System.import()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;代码分割-CSS&quot;&gt;&lt;a href=&quot;#代码分割-CSS&quot; class=&quot;headerlink&quot; title=&quot;代码分割 - CSS&quot;&gt;&lt;/a&gt;代码分割 - CSS&lt;/h1&gt;&lt;p&gt;在 webpack 中，当你使用 css-loader 并且在 JavaScript 中引入 CSS 文件，那么 CSS 文件会被打包在你的 JavaScript 文件中。这有一个不好的地方，就是你无法使用浏览器异步并行加载 CSS 的能力。相反，你的页面会等到整个 JavaScript 文件加载完成，才完成了样式文件的加载。Webpack 可以通过使用 extract-text-webpack-plugin 和 css-loader 来把样式文件分离出来去解决这个问题。&lt;/p&gt;
&lt;h2 id=&quot;使用-css-loader&quot;&gt;&lt;a href=&quot;#使用-css-loader&quot; class=&quot;headerlink&quot; title=&quot;使用 css-loader&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;css-loader&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;引入 css 到你的 JavaScript 中，需要使用 css-loader 去配置 webpack 的配置文件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;modules.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &lt;span class=&quot;string&quot;&gt;&#39;..&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    module: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            exclude: &lt;span class=&quot;regexp&quot;&gt;/node_modules/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loader: &lt;span class=&quot;string&quot;&gt;&#39;css-loader&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用-extract-text-webpack-plugin-ExtractTextPlugin&quot;&gt;&lt;a href=&quot;#使用-extract-text-webpack-plugin-ExtractTextPlugin&quot; class=&quot;headerlink&quot; title=&quot;使用 extract-text-webpack-plugin - ExtractTextPlugin&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;extract-text-webpack-plugin&lt;/code&gt; - ExtractTextPlugin&lt;/h2&gt;&lt;p&gt;安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm I --save-dev extract-text-webpack-plugin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要使用这个 &lt;code&gt;ExtractTextPlugin&lt;/code&gt;,需要通过两个步骤配置在 &lt;code&gt;webpack.config.js&lt;/code&gt; 中。&lt;/p&gt;
&lt;h3 id=&quot;在-lodaer-里面&quot;&gt;&lt;a href=&quot;#在-lodaer-里面&quot; class=&quot;headerlink&quot; title=&quot;在 lodaer 里面&quot;&gt;&lt;/a&gt;在 lodaer 里面&lt;/h3&gt;&lt;p&gt;从之前的 &lt;code&gt;css-loader&lt;/code&gt; 中适配，我们应该如下添加 &lt;code&gt;ExtractTextPlugin&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;loader: ExtractTextPlugin.extract(&lt;span class=&quot;string&quot;&gt;&#39;css-loader?sourceMap&#39;&lt;/span&gt;) //Can be used without sourcemaps too.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在-plugin-里面&quot;&gt;&lt;a href=&quot;#在-plugin-里面&quot; class=&quot;headerlink&quot; title=&quot;在 plugin 里面&quot;&gt;&lt;/a&gt;在 plugin 里面&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;new ExtractTextPlugin(&amp;#123; filename: &lt;span class=&quot;string&quot;&gt;&#39;bundle.css&#39;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;disable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, allChunks: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这两步，就可以生成一个新的包含所有 CSS 模块的代码包，然后把他们添加到 &lt;code&gt;index.html&lt;/code&gt; 的 &lt;code&gt;heade&lt;/code&gt; 中去。可以通过 &lt;a href=&quot;https://github.com/webpack/extract-text-webpack-plugin#api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtractTextPlugin&lt;/a&gt; 去了解关于它 api 的更多信息。&lt;/p&gt;
&lt;p&gt;完整的配置文件如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ExtractTextPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;extract-text-webpack-plugin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        entry: &lt;span class=&quot;string&quot;&gt;&#39;./main.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            path: &lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            filename: &lt;span class=&quot;string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            rules: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                exclude: &lt;span class=&quot;regexp&quot;&gt;/node_modules/&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                loader: ExtractTextPlugin.extract(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    loader: &lt;span class=&quot;string&quot;&gt;&#39;css-loader?sourceMap&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        devtool: &lt;span class=&quot;string&quot;&gt;&#39;source-map&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ExtractTextPlugin(&amp;#123; filename: &lt;span class=&quot;string&quot;&gt;&#39;bundle.css&#39;&lt;/span&gt;, disable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, allChunks: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;代码分割-库文件&quot;&gt;&lt;a href=&quot;#代码分割-库文件&quot; class=&quot;headerlink&quot; title=&quot;代码分割-库文件&quot;&gt;&lt;/a&gt;代码分割-库文件&lt;/h1&gt;&lt;p&gt;一个典型的应用会依赖很多第三方来提供框架或功能支持。项目中使用的固定版本的库/框架文件的代码一般不会有变动，然而应用本身的业务逻辑代码却经常会有变动。&lt;/p&gt;
&lt;p&gt;把应用代码和库文件的代码打包在一起是一件非常低效的事情。这是因为浏览器可以根据缓存头缓存这些资源文件到本地而不用每次都去服务端或者 cdn 上去发请求重新获取，如果文件内容没有变动的话。为了能够享受这个好处，我们需要保持第三方文件的 hash 不变，无论应用本身的代码如何变化。&lt;/p&gt;
&lt;p&gt;我们只有把应用代码和第三方代码分离开才可以达到这样的效果。&lt;/p&gt;
&lt;p&gt;我们考虑一个一个简单的应用，它使用了 momentjs ，一个通常用来时间格式化的库。&lt;/p&gt;
&lt;p&gt;安装 &lt;code&gt;moment&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save moment&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Index 文件会引用 &lt;code&gt;moment&lt;/code&gt; 作为一个依赖并且打印当前的时间：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Index.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; moment = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;moment&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(moment().format());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过如下这个配置文件来打包这个应用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Webapck.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;[chunkhash].[name].js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当运行 &lt;code&gt;webapck&lt;/code&gt; 命令的时候，如果你检查打包后的文件，你会发现 &lt;code&gt;moment&lt;/code&gt; 和 &lt;code&gt;index.js&lt;/code&gt; 都被打包在了 &lt;code&gt;bundle.js&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;这不是一个很好的解决方案。如果 &lt;code&gt;index.js&lt;/code&gt; 修改了，那么这打包文件会重新构建，浏览器就需要重新去加载这个文件，即使 moment.js 文件并没有任何改动。&lt;/p&gt;
&lt;h2 id=&quot;多个入口&quot;&gt;&lt;a href=&quot;#多个入口&quot; class=&quot;headerlink&quot; title=&quot;多个入口&quot;&gt;&lt;/a&gt;多个入口&lt;/h2&gt;&lt;p&gt;让我们缓和这个问题，我们给 moment 添加一个新的入口命名为 vendors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      main: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      vendor: &lt;span class=&quot;string&quot;&gt;&#39;moment&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;[chunkhash].[name].js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在执行 webpack 命令，我们会看到两个打包后的文件。如果你检查里面代码的话，你会看到 &lt;code&gt;moment&lt;/code&gt; 的代码同时出现在两个代码包中。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们需要使用 &lt;a href=&quot;https://webpack.js.org/plugins/commons-chunk-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CommonsChunkPlugin&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;CommonsChunksPlugin&quot;&gt;&lt;a href=&quot;#CommonsChunksPlugin&quot; class=&quot;headerlink&quot; title=&quot;CommonsChunksPlugin&quot;&gt;&lt;/a&gt;&lt;code&gt;CommonsChunksPlugin&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这是一个相当复杂的插件。它从根本上允许你从不同的代码包中提取出所有的相同模块并且把它们加入到共同的代码包中。如果这个相同的代码包不存在，那么就创建一个新的。&lt;/p&gt;
&lt;p&gt;我们可以修改 webpack 的配置文件来使用这个 &lt;code&gt;CommonsCunksPlugin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      main: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      vendor: &lt;span class=&quot;string&quot;&gt;&#39;moment&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;[chunkhash].[name].js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.CommonsChunkPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        name: &lt;span class=&quot;string&quot;&gt;&#39;vendor&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Specify the common bundle&#39;s name.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的话， &lt;code&gt;moment&lt;/code&gt; 的代码就只会出现在 vendor 代码包中了。&lt;/p&gt;
&lt;h2 id=&quot;清单文件（Manifest-File）&quot;&gt;&lt;a href=&quot;#清单文件（Manifest-File）&quot; class=&quot;headerlink&quot; title=&quot;清单文件（Manifest File）&quot;&gt;&lt;/a&gt;清单文件（Manifest File）&lt;/h2&gt;&lt;p&gt;但是，如果我们可以修改应用的代码并且再次执行 &lt;code&gt;webpack&lt;/code&gt; 命令，我们看到 vendors 文件的 hash 还是变化了。即使我们已经分离了 &lt;code&gt;vendor&lt;/code&gt; 和 &lt;code&gt;main&lt;/code&gt; 代码包，但是当应用代码发生修改的时候 &lt;code&gt;vendor&lt;/code&gt; 还是变化了。 这意味着我们依旧不能享受浏览器缓存带来的好处，因为每一次重新编译都会修改 vendors 的 hash 值。&lt;/p&gt;
&lt;p&gt;这个问题是因为每一次编译，webpack 生成一些 webpack 运行时代码，用来帮助 webpack 来做它的工作。当那里存在一个单独的代码包，运行时会驻留在其中。但当多个代码包被生成的时候，运行时代码会被提取到公共的模块中，就是这个 &lt;code&gt;vendor&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;为了阻止这个，我们需要提取出运行时到一个分离的清单文件（Manifest File）。虽然我们又多创建另一个代码包，但它的开销也被我们在 vendor 文件上获得的长期缓存所带来的好处所抵消了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      main: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      vendor: &lt;span class=&quot;string&quot;&gt;&#39;moment&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;[chunkhash].[name].js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.CommonsChunkPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        names: [&lt;span class=&quot;string&quot;&gt;&#39;vendor&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;manifest&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// Specify the common bundle&#39;s name.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面这个配置文件，我们会看到三个代码包被生成。&lt;code&gt;vendor&lt;/code&gt;,&lt;code&gt;main&lt;/code&gt; 和 &lt;code&gt;manifest&lt;/code&gt;. 这样当应用代码修改的时候，重新打包后，修改的就只有 &lt;code&gt;main&lt;/code&gt; 和 &lt;code&gt;manifest&lt;/code&gt; 了。 &lt;code&gt;manifest&lt;/code&gt; 被修改是因为里面有对生成文件 hash 值的引用。&lt;/p&gt;
&lt;h1 id=&quot;代码分割-使用-RequireJS&quot;&gt;&lt;a href=&quot;#代码分割-使用-RequireJS&quot; class=&quot;headerlink&quot; title=&quot;代码分割-使用 RequireJS&quot;&gt;&lt;/a&gt;代码分割-使用 RequireJS&lt;/h1&gt;&lt;p&gt;在这个章节，我们讨论 webpack 如何通过 &lt;code&gt;require.ensure()&lt;/code&gt; 分割代码。&lt;/p&gt;
&lt;h2 id=&quot;require-ensure&quot;&gt;&lt;a href=&quot;#require-ensure&quot; class=&quot;headerlink&quot; title=&quot;require.ensure()&quot;&gt;&lt;/a&gt;&lt;code&gt;require.ensure()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Webpack 静态分析给 &lt;code&gt;require.ensure()&lt;/code&gt; 在代码中当构建和添加模块到分离的代码块中。这个新的代码块会被 webpack 在需要的时候通过 jsonp 引入。&lt;/p&gt;
&lt;p&gt;它的语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure(dependencies: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;[], callback: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;), &lt;span class=&quot;title&quot;&gt;chunkName&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;依赖-dependencies&quot;&gt;&lt;a href=&quot;#依赖-dependencies&quot; class=&quot;headerlink&quot; title=&quot;依赖(dependencies)&quot;&gt;&lt;/a&gt;依赖(dependencies)&lt;/h3&gt;&lt;p&gt;这是一个字符串数组，用来声明所有需要在执行回掉函数之前就需要预先加载好且可用的模块。&lt;/p&gt;
&lt;h3 id=&quot;回调函数-callback&quot;&gt;&lt;a href=&quot;#回调函数-callback&quot; class=&quot;headerlink&quot; title=&quot;回调函数(callback)&quot;&gt;&lt;/a&gt;回调函数(callback)&lt;/h3&gt;&lt;p&gt;一个回调函数会被 webpack 执行一次当所有依赖(dependencies)都被加载以后。Require 对象的实现作为一个参数传递给这个回调函数。这样，我们可以更进一步 &lt;code&gt;require&lt;/code&gt; 需要的依赖(dependencies)和其他需要执行的模块。&lt;/p&gt;
&lt;h3 id=&quot;代码块名字-chunkName&quot;&gt;&lt;a href=&quot;#代码块名字-chunkName&quot; class=&quot;headerlink&quot; title=&quot;代码块名字(chunkName)&quot;&gt;&lt;/a&gt;代码块名字(chunkName)&lt;/h3&gt;&lt;p&gt;代码块名字是一个用来命名通过 &lt;code&gt;require.ensrue()&lt;/code&gt; 创建的代码块。通过给不同的 &lt;code&gt;require.ensure()&lt;/code&gt; 创建的代码分割点分割出来的代码块一个相同的名字，我们可以确保所有的依赖都被打包到同一个代码块中。&lt;/p&gt;
&lt;p&gt;我们来看一下如下结构的一个项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;\\ file structure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    js --|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |    |-- entry.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |    |-- a.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |    |-- b.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dist&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// entry.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;***** I AM a *****&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// b.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;***** I AM b *****&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;env&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &lt;span class=&quot;string&quot;&gt;&#39;./js/entry.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      filename: &lt;span class=&quot;string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当运行 webpack 命令的时候，我们发现 webpack 创建了两个新的代码包，&lt;code&gt;bundle.js&lt;/code&gt; 和 &lt;code&gt;0.bundle.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;entry.js&lt;/code&gt; 和 &lt;code&gt;a.js&lt;/code&gt; 被打包到了 &lt;code&gt;bundle.js&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b.js&lt;/code&gt; 被打包到了 &lt;code&gt;0.bundle.js&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;require-ensure-的陷阱&quot;&gt;&lt;a href=&quot;#require-ensure-的陷阱&quot; class=&quot;headerlink&quot; title=&quot;require.ensure() 的陷阱&quot;&gt;&lt;/a&gt;&lt;code&gt;require.ensure()&lt;/code&gt; 的陷阱&lt;/h2&gt;&lt;h3 id=&quot;空数组作为一个参数&quot;&gt;&lt;a href=&quot;#空数组作为一个参数&quot; class=&quot;headerlink&quot; title=&quot;空数组作为一个参数&quot;&gt;&lt;/a&gt;空数组作为一个参数&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./a.js&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码确保一个分割点被创建， &lt;code&gt;a.js&lt;/code&gt; 会被 webpack 单独的打包成一个文件。&lt;/p&gt;
&lt;h3 id=&quot;依赖作为参数&quot;&gt;&lt;a href=&quot;#依赖作为参数&quot; class=&quot;headerlink&quot; title=&quot;依赖作为参数&quot;&gt;&lt;/a&gt;依赖作为参数&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([&lt;span class=&quot;string&quot;&gt;&#39;./a.js&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./b.js&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码，&lt;code&gt;a.js&lt;/code&gt; 和 &lt;code&gt;b.js&lt;/code&gt;  会被一起打包并且从主代码包中分离出来。但是只有 &lt;code&gt;b.js&lt;/code&gt; 的内容被执行了。 &lt;code&gt;a.js&lt;/code&gt; 的内容只是是可用的但并没有被执行。为了执行 &lt;code&gt;a.js&lt;/code&gt;, 我们需要 require 它作为一个同步的方式比如 &lt;code&gt;require(&amp;#39;./a.js)&lt;/code&gt; ，这样 JavaScript 就可以执行它了。 &lt;/p&gt;
&lt;h1 id=&quot;依赖管理&quot;&gt;&lt;a href=&quot;#依赖管理&quot; class=&quot;headerlink&quot; title=&quot;依赖管理&quot;&gt;&lt;/a&gt;依赖管理&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Ø es6 module
Ø Commonjs
Ø Amd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;表达式依赖（require-with-expression）&quot;&gt;&lt;a href=&quot;#表达式依赖（require-with-expression）&quot; class=&quot;headerlink&quot; title=&quot;表达式依赖（require with expression）&quot;&gt;&lt;/a&gt;表达式依赖（require with expression）&lt;/h2&gt;&lt;p&gt;当你通过表达式去引入一个模块的时候，就会创建一个上下文，所以当编译的时候我们并不知道准确的模块是哪个。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./template/&quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot;.ejs&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Webpack 解析 &lt;code&gt;require()&lt;/code&gt; 的调用，并且提取出来一些信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Directory:./template&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Regularexpression:/^.*\.ejs$/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;上下文模块（context-module）&quot;&gt;&lt;a href=&quot;#上下文模块（context-module）&quot; class=&quot;headerlink&quot; title=&quot;上下文模块（context module）&quot;&gt;&lt;/a&gt;上下文模块（context module）&lt;/h3&gt;&lt;p&gt;一个上下文模块被生成。它包含了在这个文件夹下所有可以被上面的正则匹配所匹配到的模块的引用。上下文模块包含了一个把请求解释到模块 id 的 map.&lt;br&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;./table.ejs&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;./table-row.ejs&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;./directory/folder.ejs&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上下文模块同样包含了一些运行时代码用来访问这个 map.&lt;/p&gt;
&lt;p&gt;这意味着动态的引用可以被支持，但是会导致所有可能被用到的模块都被打包到了最终的代码包中。&lt;/p&gt;
&lt;h3 id=&quot;require-context&quot;&gt;&lt;a href=&quot;#require-context&quot; class=&quot;headerlink&quot; title=&quot;require.context&quot;&gt;&lt;/a&gt;&lt;code&gt;require.context&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;你可以通过 &lt;code&gt;require.context()&lt;/code&gt; 方法创建你自己的上下文。它允许你传入一个用来查询的文件夹，一个用来决定是否递归查找子文件夹的标识，还有一个用来匹配文件的正则表达式。&lt;/p&gt;
&lt;p&gt;Webpack 会在代码打包的时候解析 &lt;code&gt;require.context()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它的语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.context(directory, useSubdirectories = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, regExp = &lt;span class=&quot;regexp&quot;&gt;/^\.\//&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.context(&lt;span class=&quot;string&quot;&gt;&quot;./test&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;regexp&quot;&gt;/\.test\.js$/&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a context with files from the test directory that can be required with a request endings with `.test.js`.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.context(&lt;span class=&quot;string&quot;&gt;&quot;../&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;regexp&quot;&gt;/\.stories\.js$/&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a context with all files in the parent folder and descending folders ending with `.stories.js`.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;上下文模块API（context-module-API）&quot;&gt;&lt;a href=&quot;#上下文模块API（context-module-API）&quot; class=&quot;headerlink&quot; title=&quot;上下文模块API（context module API）&quot;&gt;&lt;/a&gt;上下文模块API（context module API）&lt;/h2&gt;&lt;p&gt;一个上下文模块暴露一个方法，它接收一个参数：请求的内容。&lt;br&gt;暴露出来的函数有三个属性：&lt;code&gt;resolve&lt;/code&gt;,&lt;code&gt;key&lt;/code&gt;,&lt;code&gt;id&lt;/code&gt;&lt;br&gt;    • &lt;code&gt;resolve&lt;/code&gt; 是一个函数，执行后返回解析后的请求内容的模块 id&lt;br&gt;    • &lt;code&gt;keys&lt;/code&gt;是一个函数，执行后返回一个数组，包含所有可能被上下文模块所请求的所有的模块的 id&lt;br&gt;    当你想要通过正则匹配引入一个文件夹下所有模块时，这会非常有用：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;importAll&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;r&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  r.keys().forEach(r);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;importAll(&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.context(&lt;span class=&quot;string&quot;&gt;&#39;../components/&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cache = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;importAll&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;r&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  r.keys().forEach(key =&amp;gt; cache[key] = r(key));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;importAll(&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.context(&lt;span class=&quot;string&quot;&gt;&#39;../components/&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// At build-time cache will be polulated with all required modules.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;• `id` 是上下文模块生成的模块 id. 当使用 `module.hot.accept` 时，这会非常有用。
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前置定义&quot;&gt;&lt;a href=&quot;#前置定义&quot; class=&quot;headerlink&quot; title=&quot;前置定义&quot;&gt;&lt;/a&gt;前置定义&lt;/h1&gt;&lt;p&gt;Bundle 代码包&lt;br&gt;Chunk 代码块&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;npm install webpack –save-dev&lt;/p&gt;
&lt;h1 id=&quot;代码分割&quot;&gt;&lt;a href=&quot;#代码分割&quot; class=&quot;headerlink&quot; title=&quot;代码分割&quot;&gt;&lt;/a&gt;代码分割&lt;/h1&gt;&lt;p&gt;代码分割是 webpack 中最引人注目的功能之一。它允许你把代码分割成各种可以根据需求载入的代码包，就像一个用户浏览器去匹配路由一样，或者一个用户发出的事件。这允许你小的模块，允许你控制资源的载入优先级，如果使用得当的话，可以大大影响（降低）你应用的加载时间。&lt;/p&gt;
&lt;h2 id=&quot;缓存和并行加载的资源分割&quot;&gt;&lt;a href=&quot;#缓存和并行加载的资源分割&quot; class=&quot;headerlink&quot; title=&quot;缓存和并行加载的资源分割&quot;&gt;&lt;/a&gt;缓存和并行加载的资源分割&lt;/h2&gt;&lt;h3 id=&quot;第三方代码分割&quot;&gt;&lt;a href=&quot;#第三方代码分割&quot; class=&quot;headerlink&quot; title=&quot;第三方代码分割&quot;&gt;&lt;/a&gt;第三方代码分割&lt;/h3&gt;&lt;p&gt;一个典型的应用会依赖很多第三方的框架和库文件。不像应用代码本身，这些第三方代码的变更非常频繁。&lt;br&gt;如果我们保持这些库在它本身的代码包中，从应用代码本身分离出来，那么我们就可以使用浏览器的缓存策略去在一个长时间内把这些代码缓存到最终用户的机器上。&lt;/p&gt;
&lt;p&gt;为了达到这个效果，第三方代码的 verndor 包的 hash 部分必须保持不变，不管应用代码如何变化。学习 &lt;a href=&quot;https://webpack.js.org/guids/code-splitting-libraries&quot;&gt;如何通过 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 来分割 verndor/libray 代码&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;CSS-分割&quot;&gt;&lt;a href=&quot;#CSS-分割&quot; class=&quot;headerlink&quot; title=&quot;CSS 分割&quot;&gt;&lt;/a&gt;CSS 分割&lt;/h3&gt;&lt;p&gt;你可能也想把样式文件分割成为一个单独的包，从应用逻辑总独立出来。这可以增强样式文件的可缓存性，并且允许浏览器在加载应用代码时并行加载你的样式文件，因此也可以避免 FOUC （一个无样式内容的闪屏）。&lt;br&gt;学习 &lt;a href=&quot;https//webpack.js.org/guides/code-splitting-css&quot;&gt;如何去分割 CSS&lt;/a&gt; 通过使用 &lt;code&gt;ExtractTextWebpackPlugin&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;按需代码分割&quot;&gt;&lt;a href=&quot;#按需代码分割&quot; class=&quot;headerlink&quot; title=&quot;按需代码分割&quot;&gt;&lt;/a&gt;按需代码分割&lt;/h2&gt;&lt;p&gt;虽然前面的资源分割需要用户在配置文件中预先指定分割点，但是也可以在应用代码中创建动态的分割点。&lt;/p&gt;
&lt;p&gt;这个功能在有很多细微颗粒代码块时会很有用，举个例子，每一个应用的路由或者按照用户的预测行为。这可以使用户按需加载需要的资源。&lt;/p&gt;
&lt;h3 id=&quot;通过-require-ensure-来分割代码&quot;&gt;&lt;a href=&quot;#通过-require-ensure-来分割代码&quot; class=&quot;headerlink&quot; title=&quot;通过 require.ensure() 来分割代码&quot;&gt;&lt;/a&gt;通过 &lt;code&gt;require.ensure()&lt;/code&gt; 来分割代码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;require.ensure&lt;/code&gt; 是一个 CommonJS 风格的方式去异步加载资源。通过添加 &lt;code&gt;require.ensure([&amp;lt;fileurl&amp;gt;])&lt;/code&gt; , 我们可以在代码中定义一个分割点。 Webpack 可以创建一个包含在这个分割点中的所有代码的代码包。学习 &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-require&quot;&gt;如何分割代码&lt;/a&gt; 通过使用 &lt;code&gt;require.ensure()&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TODO System.import()&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="webpack" scheme="http://kisnows.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>2016年终总结</title>
    <link href="http://kisnows.com/2016/12/09/2016-year-end-summary/"/>
    <id>http://kisnows.com/2016/12/09/2016-year-end-summary/</id>
    <published>2016-12-09T14:03:10.000Z</published>
    <updated>2016-12-11T12:19:37.776Z</updated>
    
    <content type="html">&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;时间也真是快，从 15 年到现在算来我做前端开发也将近两年了，没想到这一路走过来这么顺利，运气真是挺好的。&lt;/p&gt;
&lt;p&gt;当初自学三个月，然后投简历面试，就拿到了好几个 offer，一切都太顺利了。然后去了一家做互联网金融的公司，老大对我很好，然而待了一年多还是在今年五月份选择了离职。原因很简单，公司的开发模式过于保守，一直待下去真的不会有任何长进了， 整天干的活都像是美工干的活，公司很不重视前端，而且前后端不分离，同一份文件前后端两个人一起改，想想真是痛苦。&lt;/p&gt;
&lt;p&gt;那离职了就要找工作，不得不说，找工作的经历真有意思。&lt;/p&gt;
&lt;h2 id=&quot;找工作&quot;&gt;&lt;a href=&quot;#找工作&quot; class=&quot;headerlink&quot; title=&quot;找工作&quot;&gt;&lt;/a&gt;找工作&lt;/h2&gt;&lt;p&gt;有一家创业公司，人家对我还比较满意，但就是薪资没谈妥，就算了，谁知道后来我都拿到另一家公司的 offer 了又说那个薪资可以接受了。&lt;/p&gt;
&lt;p&gt;有一家外企，面试的时候对他们的工作环境非常满意，然而面试发挥太差，连 sass 的循环都写不出来，结果可想而知。面试官还很和蔼，说回去等消息吧，然后我出门不到五分钟就收到了短信，‘您不适合本公司的要求’，嗯，效率真高，挺喜欢这点。&lt;/p&gt;
&lt;p&gt;有一家在滨江的大公司，面试通过了，薪资都谈妥了， Hr 说回去等 offer 吧，一般三天内就会发出来。我很高兴，第二天回原公司就提了离职。结果等了一星期还没收到 offer ，就打电话问，对方很不好意思的回答说，部门公司架构重组，我面试的那个事业部已经没了,,ԾㅂԾ,,，我也不好说什么了。&lt;/p&gt;
&lt;p&gt;中途还有一堆不靠谱的公司，当然也有我能力不足没通过面试的。&lt;/p&gt;
&lt;p&gt;有一个最直接就是蘑菇街的人问你能接受加班吗，我说偶尔可以，经常不行，然后人家来了一句，那不行，我们这边加班还是很严重的，几乎每天11点。然后，就没有然后了。后来小伙伴给内推了阿里，面天猫挂在了三面，又面了滨江的 B2B 部门。&lt;/p&gt;
&lt;p&gt;到二面的时候，接到了网易的面试，面网易的时候谈的很高兴，双方都很满意，最后 hr 问说有没有在面其他公司，我说当然， 比如阿里也在面，现在已经到了二面。然后就有了下面的对话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hr ：“那如果阿里和网易同时给你发 offer 你去哪个？“
我当时随口一说，“哪个先发 offer 就去哪个”
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后当天晚上就电话通知我面试通过了，第二天就发了 offer。现在想想，我真是机智啊，O(∩_∩)O&lt;/p&gt;
&lt;h2 id=&quot;网易&quot;&gt;&lt;a href=&quot;#网易&quot; class=&quot;headerlink&quot; title=&quot;网易&quot;&gt;&lt;/a&gt;网易&lt;/h2&gt;&lt;p&gt;找工作的事情就告一段落，来到网易。首先网易给我的第一印象就是，食堂真好（虽然已经吃腻了），仿佛回到了大学时候一样，然后妹子真多，嗯，真的。&lt;/p&gt;
&lt;p&gt;不得不说大公司跟小公司还是有很多差别的。首先，流程上就很规范，不会出现说之前公司那种产品经理过来一会要这样一会要那样的事情，但同时也有弊端，就是会议太多。想想那些会议有没有必要开，还是有必要的，但是会议的整体效率，真是低啊。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;一开始去网易除了业务上的需求，还自发奋勇接了几个前端技术部的非业务工作，可能这一点让老大觉得我积极性比较强，就又比较看好我。中途本来还要做个前端监控系统的，可惜刚搞好前期工作，负责人就离职了，项目也就搁置了。想想也是挺可惜的。&lt;/p&gt;
&lt;p&gt;都说进了网易会长胖，然而短短半年时间，我竟瘦了七八斤。不得不说，工作还是挺忙的，每天都得八九点多才能下班。想想以前六点下班，下班后看两小时书，打俩小时游戏，然后躺床睡觉，劳逸结合，简直完美。现在一下班就跟死猪一样了，什么都不想干，游戏都懒得打，就刷刷微博、A、B站然后就睡了。看书很少了，偶尔也看看一些前端相关的博客和文章。所以感觉这半年，除了工作经验上的积累，个人知识拓展上几乎是停滞的，长期这样下去肯定是不行的。&lt;/p&gt;
&lt;p&gt;而且我们那条业务线负责人离职后，老大让我顶大梁。虽然这对我来说是个锻炼，但确实亚历山大，每天除了业务需求，还有一堆杂七杂八的事情要处理，搞得焦头烂额。&lt;/p&gt;
&lt;p&gt;不过，还好。公司的同事都挺有意思的，上班整体也挺开心，这到挺好的。&lt;/p&gt;
&lt;h1 id=&quot;生活&quot;&gt;&lt;a href=&quot;#生活&quot; class=&quot;headerlink&quot; title=&quot;生活&quot;&gt;&lt;/a&gt;生活&lt;/h1&gt;&lt;p&gt;翻了一下去年的日记，哦，不对，应该叫月记。看来日常生活上还是那个样子，跟去年没什么大的区别。&lt;/p&gt;
&lt;h2 id=&quot;找房子&quot;&gt;&lt;a href=&quot;#找房子&quot; class=&quot;headerlink&quot; title=&quot;找房子&quot;&gt;&lt;/a&gt;找房子&lt;/h2&gt;&lt;p&gt;一开年就又是找房子，原来的房东直接涨价 500 块，真心不能接受。就只能开始又一次找房子的旅程了，跑了很多小区，最后在原来房子附近的小区找到一个还行的，不过价格也真是高。这种每年都要找房子的感觉真是不爽。&lt;/p&gt;
&lt;p&gt;找到的房子是个三室一厅的，就拉了个前同事入伙，开始三人合租的日子。&lt;/p&gt;
&lt;p&gt;新室友养了只猫，挺可爱的， 就是那猫实在掉毛掉的厉害，猫主人又很少打扫，这里让人不太愉快。不过还好，大家关系都不错，周末一起看个电影吃个饭，偶尔也去西湖、九溪等地方逛逛，挺好的。&lt;/p&gt;
&lt;h2 id=&quot;方向&quot;&gt;&lt;a href=&quot;#方向&quot; class=&quot;headerlink&quot; title=&quot;方向&quot;&gt;&lt;/a&gt;方向&lt;/h2&gt;&lt;p&gt;到现在都还是有点迷茫，还是不知道自己到底是个怎样的人，想要成为什么样的人。有点找不到方向的感觉 。&lt;/p&gt;
&lt;p&gt;年初和同学聊天，聊到想在哪里发展。他说不太想待杭州，又不想回去，比较想去上海。然而年中就结婚并定居杭州了。我呢，是想回去又不想回去，跟所有出来工作的人一样，纠结。&lt;/p&gt;
&lt;p&gt;总想活的潇洒一点，可又给自己画了很多条条框框，画地为牢，把自己困在原地。&lt;/p&gt;
&lt;p&gt;果然，一个人想要改变自己还是挺难的。&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;先看看去年给自己定的目标吧：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在此给明年订个简单的规定：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 每个月至少写一篇博客
2. 至少每两周看一次电影
3. 每两个月看一本书
4. 加强身体锻炼
5. 该追的美剧不能落下
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;除了 2，5 其他的一个都没完成，果然这执行力还是不行啊。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博客自从进了网易就没有更新过；&lt;/li&gt;
&lt;li&gt;书，一年下来就看了四本，好多书买回来，连封皮都没撕；&lt;/li&gt;
&lt;li&gt;锻炼身体，买了瑜伽毯，买了新的咏具，但锻炼总是断断续续的，一直没能坚持下来；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以今年的计划就简单一点吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个月至少一篇博客&lt;/li&gt;
&lt;li&gt;每个月都要出去走走，哪怕一个人&lt;/li&gt;
&lt;li&gt;书还是要看的，那就三个月一本书吧&lt;/li&gt;
&lt;li&gt;身体还是要锻炼的，心里有这个事情就行&lt;/li&gt;
&lt;li&gt;写一个个人项目，并发布出来，无论项目多水&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;感情&quot;&gt;&lt;a href=&quot;#感情&quot; class=&quot;headerlink&quot; title=&quot;感情&quot;&gt;&lt;/a&gt;感情&lt;/h2&gt;&lt;div style=&quot;opacity:0&quot;&gt;→←&lt;/div&gt;

&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;整体的感觉，就是这一年过的真快呀！转眼毕业都两年多了，有时都觉得挺可怕的，必须得再次告诫自己：&lt;br&gt;&lt;strong&gt;&lt;em&gt;Seize the day.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;时间也真是快，从 15 年到现在算来我做前端开发也将近两年了，没想到这一路走过来这么顺利，运气真是挺好的。&lt;/p&gt;
&lt;p&gt;当初自学三个月，然后投简历面试，就拿到了好几个 offer，一切都太顺利了。然后去了一家做互联网金融的公司，老大对我很好，然而待了一年多还是在今年五月份选择了离职。原因很简单，公司的开发模式过于保守，一直待下去真的不会有任何长进了， 整天干的活都像是美工干的活，公司很不重视前端，而且前后端不分离，同一份文件前后端两个人一起改，想想真是痛苦。&lt;/p&gt;
&lt;p&gt;那离职了就要找工作，不得不说，找工作的经历真有意思。&lt;/p&gt;
&lt;h2 id=&quot;找工作&quot;&gt;&lt;a href=&quot;#找工作&quot; class=&quot;headerlink&quot; title=&quot;找工作&quot;&gt;&lt;/a&gt;找工作&lt;/h2&gt;&lt;p&gt;有一家创业公司，人家对我还比较满意，但就是薪资没谈妥，就算了，谁知道后来我都拿到另一家公司的 offer 了又说那个薪资可以接受了。&lt;/p&gt;
&lt;p&gt;有一家外企，面试的时候对他们的工作环境非常满意，然而面试发挥太差，连 sass 的循环都写不出来，结果可想而知。面试官还很和蔼，说回去等消息吧，然后我出门不到五分钟就收到了短信，‘您不适合本公司的要求’，嗯，效率真高，挺喜欢这点。&lt;/p&gt;
&lt;p&gt;有一家在滨江的大公司，面试通过了，薪资都谈妥了， Hr 说回去等 offer 吧，一般三天内就会发出来。我很高兴，第二天回原公司就提了离职。结果等了一星期还没收到 offer ，就打电话问，对方很不好意思的回答说，部门公司架构重组，我面试的那个事业部已经没了,,ԾㅂԾ,,，我也不好说什么了。&lt;/p&gt;
&lt;p&gt;中途还有一堆不靠谱的公司，当然也有我能力不足没通过面试的。&lt;/p&gt;
&lt;p&gt;有一个最直接就是蘑菇街的人问你能接受加班吗，我说偶尔可以，经常不行，然后人家来了一句，那不行，我们这边加班还是很严重的，几乎每天11点。然后，就没有然后了。后来小伙伴给内推了阿里，面天猫挂在了三面，又面了滨江的 B2B 部门。&lt;/p&gt;
&lt;p&gt;到二面的时候，接到了网易的面试，面网易的时候谈的很高兴，双方都很满意，最后 hr 问说有没有在面其他公司，我说当然， 比如阿里也在面，现在已经到了二面。然后就有了下面的对话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hr ：“那如果阿里和网易同时给你发 offer 你去哪个？“
我当时随口一说，“哪个先发 offer 就去哪个”
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后当天晚上就电话通知我面试通过了，第二天就发了 offer。现在想想，我真是机智啊，O(∩_∩)O&lt;/p&gt;
&lt;h2 id=&quot;网易&quot;&gt;&lt;a href=&quot;#网易&quot; class=&quot;headerlink&quot; title=&quot;网易&quot;&gt;&lt;/a&gt;网易&lt;/h2&gt;&lt;p&gt;找工作的事情就告一段落，来到网易。首先网易给我的第一印象就是，食堂真好（虽然已经吃腻了），仿佛回到了大学时候一样，然后妹子真多，嗯，真的。&lt;/p&gt;
&lt;p&gt;不得不说大公司跟小公司还是有很多差别的。首先，流程上就很规范，不会出现说之前公司那种产品经理过来一会要这样一会要那样的事情，但同时也有弊端，就是会议太多。想想那些会议有没有必要开，还是有必要的，但是会议的整体效率，真是低啊。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://kisnows.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="年终总结" scheme="http://kisnows.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】走进 Redux 之高级篇</title>
    <link href="http://kisnows.com/2016/05/21/step-to-redux-3/"/>
    <id>http://kisnows.com/2016/05/21/step-to-redux-3/</id>
    <published>2016-05-21T12:14:46.000Z</published>
    <updated>2017-01-18T12:35:28.604Z</updated>
    
    <content type="html">&lt;h1 id=&quot;异步的-Actions&quot;&gt;&lt;a href=&quot;#异步的-Actions&quot; class=&quot;headerlink&quot; title=&quot;异步的 Actions&quot;&gt;&lt;/a&gt;异步的 Actions&lt;/h1&gt;&lt;p&gt;前几篇的教程里面，我们搭建了一个 todo 应用。这是一个完全同步的，每次一个 action 被 dispatched, state 都会即时更新。&lt;br&gt;解析来，我们要搭建一个不同的，异步的应用。它使用 Reddit API 来展示一个选中栏目的头条。&lt;/p&gt;
&lt;h2 id=&quot;Actions&quot;&gt;&lt;a href=&quot;#Actions&quot; class=&quot;headerlink&quot; title=&quot;Actions&quot;&gt;&lt;/a&gt;Actions&lt;/h2&gt;&lt;p&gt;当你调用一个异步的 API 时，有两个至关重要的时刻：你开始调用的时刻，和你收到答复的时刻。&lt;/p&gt;
&lt;p&gt;这两个时刻通常都会需要对应用的 state 做出变化；为此，你需要 dispatch 普通的将会被 reducers 同步处理的 actions. 通常，对于任意 API 请求，你将需要 dispatch 至少三次不同的 actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个通知 reducers 请求开始的 action&lt;br&gt;  reducers 可能通过切换一个 state 中的 &lt;code&gt;isFetching&lt;/code&gt; flag 来处理这个 action.  用来告诉 UI 是时候显示一个等待标识了。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求已经成功完成的 action&lt;br&gt;  reducers 可能通过把新数据合并到它控制的 state 中并重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. UI 会隐藏等待标识，并展示获取到的数据。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求失败的 action&lt;br&gt;  reducers 可能通过重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. 另外，有些 reducers 可能想要存储这个错误信息，这样可以让 UI 展示出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能需要在 actions 添加一个专用的 &lt;code&gt;status&lt;/code&gt; 字段：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;, status: &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, error: &lt;span class=&quot;string&quot;&gt;&#39;Oops&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;typs: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;, status: &lt;span class=&quot;string&quot;&gt;&#39;success&#39;&lt;/span&gt;, response: &amp;#123; ... &amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者为它们定义单独的 types：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS_REQUEST&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS_FAILURE&#39;&lt;/span&gt;, error: &lt;span class=&quot;string&quot;&gt;&#39;Oops&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS_SUCCESS&#39;&lt;/span&gt;, response: &amp;#123; ... &amp;#125; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;选择一个拥有 flags 的单独的 action type, 或者多个 actions types, 这都取决与你。多个 types 会有更少的犯错空间，但这不是一个问题，如果你使用 &lt;a href=&quot;https://github.com/acdlite/redux-actions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-actions&lt;/a&gt; 这样的辅助库来生成 action creator 和 reducers 的话。&lt;/p&gt;
&lt;h1 id=&quot;异步的数据流&quot;&gt;&lt;a href=&quot;#异步的数据流&quot; class=&quot;headerlink&quot; title=&quot;异步的数据流&quot;&gt;&lt;/a&gt;异步的数据流&lt;/h1&gt;&lt;p&gt;不使用 middlerware, Redux store 只提供同步的数据流。这是你通过 createStore() 得到的默认结果。&lt;/p&gt;
&lt;p&gt;可以使用 applyMiddleware() 来增强 createStore(). 这不是必须的，但它可以让你通过一个便利的方法描述异步的 action 。&lt;/p&gt;
&lt;p&gt;异步的 middleware 比如 redux-thunk 或 redux-promise 都包装了 store 的 dispatch() 方法，允许你 dispatch 除了 action 以外的内容，比如函数或者 Promise。你所使用的 middleware 可以以自己的方式解析你 dispatch 的任何内容，并继续传递 actions 给下一个 middleware。比如，支持 Promise 的 middleware 能够拦截 Promise，然后为每个 Promise 异步地 dispatch 一对 begin/end actions。&lt;/p&gt;
&lt;p&gt;当数据流上最后一个 middleware dispatches 一个 actions 时，它必须是一个普通的对象。这是同步的 Redux 数据流开始的地方。&lt;/p&gt;
&lt;h1 id=&quot;中间件（Middleware）&quot;&gt;&lt;a href=&quot;#中间件（Middleware）&quot; class=&quot;headerlink&quot; title=&quot;中间件（Middleware）&quot;&gt;&lt;/a&gt;中间件（Middleware）&lt;/h1&gt;&lt;p&gt;中间件提供一个第三方的扩展点，在 dispatching 一个 action 和 它到达 reducer 的中间时刻。人们使用中间件来打印日志，记录崩溃报告，调用一个异步的 API, 路由……&lt;br&gt;这里有&lt;a href=&quot;http://redux.js.org/docs/advanced/Middleware.html#seven-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一些例子&lt;/a&gt;来展示中间件的强大作用&lt;/p&gt;
&lt;h2 id=&quot;理解中间件&quot;&gt;&lt;a href=&quot;#理解中间件&quot; class=&quot;headerlink&quot; title=&quot;理解中间件&quot;&gt;&lt;/a&gt;理解中间件&lt;/h2&gt;&lt;p&gt;中间件可以做很多事情，理解它是从哪来的非常重要。我们通过使用 logging 和 crash reporting 这俩个例子来展示一个使用中间件的思维过程。&lt;/p&gt;
&lt;h3 id=&quot;问题-日志记录&quot;&gt;&lt;a href=&quot;#问题-日志记录&quot; class=&quot;headerlink&quot; title=&quot;问题: 日志记录&quot;&gt;&lt;/a&gt;问题: 日志记录&lt;/h3&gt;&lt;h4 id=&quot;尝试-1：手动记录&quot;&gt;&lt;a href=&quot;#尝试-1：手动记录&quot; class=&quot;headerlink&quot; title=&quot;尝试#1：手动记录&quot;&gt;&lt;/a&gt;尝试#1：手动记录&lt;/h4&gt;&lt;p&gt;最原始的解决方案就是每次在调用 &lt;code&gt;store.dispatch(action)&lt;/code&gt; 时记录 action 和 下一个 state. 代码可能就是下面的样子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; action = addTodo(&lt;span class=&quot;string&quot;&gt;&#39;Use Redux&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;dispatching&#39;&lt;/span&gt;,action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;store.dispatch(action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;next state&#39;&lt;/span&gt;, store.getState())&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这真的是一种很搓的办法。&lt;/p&gt;
&lt;h4 id=&quot;尝试-2：包装-Dispatch&quot;&gt;&lt;a href=&quot;#尝试-2：包装-Dispatch&quot; class=&quot;headerlink&quot; title=&quot;尝试#2：包装 Dispatch&quot;&gt;&lt;/a&gt;尝试#2：包装 Dispatch&lt;/h4&gt;&lt;p&gt;把 logging 提取到一个函数里面：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatchAndLog&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;store,action&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;dispatching&#39;&lt;/span&gt;,action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    store.dispatch(action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;next state&#39;&lt;/span&gt;,store.getState())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样每次调用的时候通过使用这个函数来替换 &lt;code&gt;store.dispatch()&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dispatchAndLog(store,addTOdo(&lt;span class=&quot;string&quot;&gt;&#39;USe Redux&#39;&lt;/span&gt;))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样已经能解问题了，但是这样并不优雅。&lt;/p&gt;
&lt;h4 id=&quot;尝试-3：-Monkeypatching-Dispatch&quot;&gt;&lt;a href=&quot;#尝试-3：-Monkeypatching-Dispatch&quot; class=&quot;headerlink&quot; title=&quot;尝试#3： Monkeypatching Dispatch&quot;&gt;&lt;/a&gt;尝试#3： Monkeypatching Dispatch&lt;/h4&gt;&lt;p&gt;如果我们只在 store 里面替换 &lt;code&gt;dispatch&lt;/code&gt; 函数呢？ Redux 的 store 只是一个拥有几个方法的普通对象，所以我们可以改写 &lt;code&gt;dispatch&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; next = store.dispatch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;store.dispath = fucntion dispatchAndLog (action)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;dispatching&#39;&lt;/span&gt;,action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = next(action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;next state&#39;&lt;/span&gt;,soter.getState())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reslut&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样基本上已经达到了我们的妖要求，不论你在哪里 dispatch 一个 action, 它都保证会被记录下来。虽然我们通过 Monkeypatching 改写了 store 内部的方法，但暂时先这样。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异步的-Actions&quot;&gt;&lt;a href=&quot;#异步的-Actions&quot; class=&quot;headerlink&quot; title=&quot;异步的 Actions&quot;&gt;&lt;/a&gt;异步的 Actions&lt;/h1&gt;&lt;p&gt;前几篇的教程里面，我们搭建了一个 todo 应用。这是一个完全同步的，每次一个 action 被 dispatched, state 都会即时更新。&lt;br&gt;解析来，我们要搭建一个不同的，异步的应用。它使用 Reddit API 来展示一个选中栏目的头条。&lt;/p&gt;
&lt;h2 id=&quot;Actions&quot;&gt;&lt;a href=&quot;#Actions&quot; class=&quot;headerlink&quot; title=&quot;Actions&quot;&gt;&lt;/a&gt;Actions&lt;/h2&gt;&lt;p&gt;当你调用一个异步的 API 时，有两个至关重要的时刻：你开始调用的时刻，和你收到答复的时刻。&lt;/p&gt;
&lt;p&gt;这两个时刻通常都会需要对应用的 state 做出变化；为此，你需要 dispatch 普通的将会被 reducers 同步处理的 actions. 通常，对于任意 API 请求，你将需要 dispatch 至少三次不同的 actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个通知 reducers 请求开始的 action&lt;br&gt;  reducers 可能通过切换一个 state 中的 &lt;code&gt;isFetching&lt;/code&gt; flag 来处理这个 action.  用来告诉 UI 是时候显示一个等待标识了。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求已经成功完成的 action&lt;br&gt;  reducers 可能通过把新数据合并到它控制的 state 中并重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. UI 会隐藏等待标识，并展示获取到的数据。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求失败的 action&lt;br&gt;  reducers 可能通过重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. 另外，有些 reducers 可能想要存储这个错误信息，这样可以让 UI 展示出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能需要在 actions 添加一个专用的 &lt;code&gt;status&lt;/code&gt; 字段：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redux" scheme="http://kisnows.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>Flex 布局</title>
    <link href="http://kisnows.com/2016/05/04/step-to-flexbox/"/>
    <id>http://kisnows.com/2016/05/04/step-to-flexbox/</id>
    <published>2016-05-04T08:10:43.000Z</published>
    <updated>2016-07-15T14:04:25.907Z</updated>
    
    <content type="html">&lt;p&gt;第一次接触 flex 是在去年，当时是我第一次做手机项目，结果却因为兼容性问题给掉坑了。查了 can I use 发现它只支持到安卓 4.1, 然而我们的要求是要兼容到 4.0 才行的。&lt;br&gt;所以之后一直都没敢用，昨天听到有人说 flex 是可以支持到安卓 2.1 以上的。我不信，难道是我当时看错了？！&lt;br&gt;今天又去查了一下，发现确实是 4.1 啊。盯着屏幕想了半天，突然发现 Can I Use 上一个浏览器浏览器使用率，想着该不会直接把使用率低的浏览器给忽略掉了吧。打开设置一看，果真如此，于是把数据源改成中国，浏览器最小使用率 0.03% 果真 2.3 出来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/step-to-flexbox/can-i-use.png&quot; alt=&quot;Can I USE&quot;&gt;&lt;/p&gt;
&lt;p&gt;既然如此，说明 flex 还是可以在生产环境中使用了。那么就好好在过一下它的用法吧。&lt;br&gt;Flex 就是弹性布局，任何一个元素都可以设置为 flex 布局，当一个元素被设置为 flex 布局后，它的子元素上 float, vertical-align 都会失效。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png&quot; alt=&quot;base&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片出自&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就是说一个 flex 容器有两个轴，一个主轴一个交叉轴。每个轴都有自己对应的起始位置，主轴的起始分别为 main start 和 main end, 交叉轴的起始分别为 cross start 和 cross end.&lt;br&gt;容器内的项目会默认沿着主轴排列，从 main start 到 main end .&lt;/p&gt;
&lt;h1 id=&quot;felx-容器&quot;&gt;&lt;a href=&quot;#felx-容器&quot; class=&quot;headerlink&quot; title=&quot;felx 容器&quot;&gt;&lt;/a&gt;felx 容器&lt;/h1&gt;&lt;p&gt;容器上可以 6 个属性，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-direction&lt;/li&gt;
&lt;li&gt;flex-wrap&lt;/li&gt;
&lt;li&gt;flex-flow&lt;/li&gt;
&lt;li&gt;justify-content&lt;/li&gt;
&lt;li&gt;align-items&lt;/li&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;flex-direction&quot;&gt;&lt;a href=&quot;#flex-direction&quot; class=&quot;headerlink&quot; title=&quot;flex-direction&quot;&gt;&lt;/a&gt;flex-direction&lt;/h2&gt;&lt;p&gt;决定主轴方向，也就是项目的排列方向。&lt;/p&gt;
&lt;h3 id=&quot;MDN-上的语法解释：&quot;&gt;&lt;a href=&quot;#MDN-上的语法解释：&quot; class=&quot;headerlink&quot; title=&quot;MDN 上的语法解释：&quot;&gt;&lt;/a&gt;MDN 上的语法解释：&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* The direction text is laid out in a line */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Like &amp;lt;row&amp;gt;, but reversed */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* The direction in which lines of text are stacked */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Like &amp;lt;column&amp;gt;, but reversed */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Global values */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;inherit&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;initial&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;unset&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;下面从左到右分别是 row, row-reverse, colum, colum-reverse. 可以明显的看出他们之间的区别。&lt;/p&gt;
&lt;div&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/1ryjp43c/embed/result,html,css/&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;h2 id=&quot;flex-wrap&quot;&gt;&lt;a href=&quot;#flex-wrap&quot; class=&quot;headerlink&quot; title=&quot;flex-wrap&quot;&gt;&lt;/a&gt;flex-wrap&lt;/h2&gt;&lt;p&gt;flex-wrap 定义内部的 item 是排列在一行还是说当超出时可以换行的属性。如果允许换行，这个属性也能让你控制堆叠的方向。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;nowrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例：&quot;&gt;&lt;a href=&quot;#实例：&quot; class=&quot;headerlink&quot; title=&quot;实例：&quot;&gt;&lt;/a&gt;实例：&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/3f7odnc6/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;flex-flow&quot;&gt;&lt;a href=&quot;#flex-flow&quot; class=&quot;headerlink&quot; title=&quot;flex-flow&quot;&gt;&lt;/a&gt;flex-flow&lt;/h2&gt;&lt;p&gt;flex-flow 是 flex-direction 和 flex-wrap 的简写。&lt;br&gt;初始值： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-directoin: row&lt;/li&gt;
&lt;li&gt;flex-wrap: nowrap&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;语法：&quot;&gt;&lt;a href=&quot;#语法：&quot; class=&quot;headerlink&quot; title=&quot;语法：&quot;&gt;&lt;/a&gt;语法：&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* flex-flow: &amp;lt;&#39;flex-direction&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* flex-flow: &amp;lt;&#39;flex-wrap&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;nowrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* flex-flow: &amp;lt;&#39;flex-direction&#39;&amp;gt; and &amp;lt;&#39;flex-wrap&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;nowrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;wrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column-reverse&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;wrap-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;justify-content&quot;&gt;&lt;a href=&quot;#justify-content&quot; class=&quot;headerlink&quot; title=&quot;justify-content&quot;&gt;&lt;/a&gt;justify-content&lt;/h2&gt;&lt;p&gt;justify-content 用来定义浏览器如何计算主轴上 (main-axis) flex 内部的 item 之间的空隙。&lt;br&gt;对齐的过程会在长度和自动外编剧计算后进行，也就是说只要有一个设置了 flex-grow 不为 0 的弹性 (flexible) 元素，那么 justify-content 就不会起作用了。初始值为 flex-start.&lt;/p&gt;
&lt;h3 id=&quot;语法：-1&quot;&gt;&lt;a href=&quot;#语法：-1&quot; class=&quot;headerlink&quot; title=&quot;语法：&quot;&gt;&lt;/a&gt;语法：&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack flex items from the start */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-start&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack items from the end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack items around the center */&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute items evenly&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The first item at the start, the last at the end */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-between&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute items evenly&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Items have equal space around them */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-around&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例：-1&quot;&gt;&lt;a href=&quot;#实例：-1&quot; class=&quot;headerlink&quot; title=&quot;实例：&quot;&gt;&lt;/a&gt;实例：&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/2etbfr66/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;align-item&quot;&gt;&lt;a href=&quot;#align-item&quot; class=&quot;headerlink&quot; title=&quot;align-item&quot;&gt;&lt;/a&gt;align-item&lt;/h2&gt;&lt;p&gt;align-item 属性用来对齐当前 flex line 上的 flex 元素，和 justify-content 一样，不过是是在主轴的垂直方向上作用。初始值为 stretch.&lt;/p&gt;
&lt;h3 id=&quot;语法-1&quot;&gt;&lt;a href=&quot;#语法-1&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Align to cross-start */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-start&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Align to cross-end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Center items in the cross-axis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Align the items&#39; baselines */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;baseline&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Stretch the items to fit */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;stretch&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;###　实例&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/kisnows/jxbgepc2/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;align-content&quot;&gt;&lt;a href=&quot;#align-content&quot; class=&quot;headerlink&quot; title=&quot;align-content&quot;&gt;&lt;/a&gt;align-content&lt;/h2&gt;&lt;p&gt;align-content 属性定义当交叉轴上有空间时，flex 元素在交叉轴上的对齐方式。对于单行的flex 元素，这个属性没有作用。默认值为： stretch.&lt;/p&gt;
&lt;h3 id=&quot;语法-2&quot;&gt;&lt;a href=&quot;#语法-2&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack lines from the cross-axis start */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-start&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack lines to the cross-axis end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack lines around the cross-axis center */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute lines along the cross-axis, start to end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-between&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute lines along the cross-axis, equally spaced */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-around&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Stretch lines to occupy the whole cross-axis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;stretch&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例-1&quot;&gt;&lt;a href=&quot;#实例-1&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/dhjrbm1o/1/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;flex-项目（子元素）&quot;&gt;&lt;a href=&quot;#flex-项目（子元素）&quot; class=&quot;headerlink&quot; title=&quot;flex 项目（子元素）&quot;&gt;&lt;/a&gt;flex 项目（子元素）&lt;/h1&gt;&lt;p&gt;flex 项目上同样可以设置 6 个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order&lt;/li&gt;
&lt;li&gt;flex-grow&lt;/li&gt;
&lt;li&gt;flex-shrink&lt;/li&gt;
&lt;li&gt;flex-basis&lt;/li&gt;
&lt;li&gt;align-self&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;order&quot;&gt;&lt;a href=&quot;#order&quot; class=&quot;headerlink&quot; title=&quot;order&quot;&gt;&lt;/a&gt;order&lt;/h2&gt;&lt;p&gt;定义项目在主轴上的优先级，越小越靠前。默认为 0.&lt;/p&gt;
&lt;h2 id=&quot;flex-grow&quot;&gt;&lt;a href=&quot;#flex-grow&quot; class=&quot;headerlink&quot; title=&quot;flex-grow&quot;&gt;&lt;/a&gt;flex-grow&lt;/h2&gt;&lt;p&gt;定义项目的拉伸因子，就是计算这个项目如何来占据剩余的空间。默认为 1.&lt;/p&gt;
&lt;h2 id=&quot;flex-shrink&quot;&gt;&lt;a href=&quot;#flex-shrink&quot; class=&quot;headerlink&quot; title=&quot;flex-shrink&quot;&gt;&lt;/a&gt;flex-shrink&lt;/h2&gt;&lt;p&gt;定义项目的因子。默认为 1.&lt;/p&gt;
&lt;h3 id=&quot;order-flex-grow-flex-shrink-实例&quot;&gt;&lt;a href=&quot;#order-flex-grow-flex-shrink-实例&quot; class=&quot;headerlink&quot; title=&quot;order,flex-grow,flex-shrink 实例&quot;&gt;&lt;/a&gt;order,flex-grow,flex-shrink 实例&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/Lxz9wj7n/4/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;flex-basis&quot;&gt;&lt;a href=&quot;#flex-basis&quot; class=&quot;headerlink&quot; title=&quot;flex-basis&quot;&gt;&lt;/a&gt;flex-basis&lt;/h2&gt;&lt;p&gt;flex-basis 定义在初试阶段 flex 占据主轴空间的基础。这个属性决定了 content-box 的尺寸，除非你修改了 box-sizing. 初始值为 auto.&lt;/p&gt;
&lt;h3 id=&quot;语法-3&quot;&gt;&lt;a href=&quot;#语法-3&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Specify &amp;lt;&#39;width&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: 3&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;auto&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Intrinsic sizing keywords */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;fill&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;max-content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;min-content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;fit-content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Automatically size based on the flex item’s content */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例-2&quot;&gt;&lt;a href=&quot;#实例-2&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/3zmppe13/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;flex&quot;&gt;&lt;a href=&quot;#flex&quot; class=&quot;headerlink&quot; title=&quot;flex&quot;&gt;&lt;/a&gt;flex&lt;/h2&gt;&lt;p&gt;flex 是一个定义项目改变尺寸能力的一个缩写属性。&lt;br&gt;默认值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-grow: 0&lt;/li&gt;
&lt;li&gt;flex-shrink: 1 &lt;/li&gt;
&lt;li&gt;flex-basis: auto&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;语法-4&quot;&gt;&lt;a href=&quot;#语法-4&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 0 0 auto */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;none&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* One value, unitless number: flex-grow */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* One value, width/height: flex-basis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;auto&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Two values: flex-grow | flex-basis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 1 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Two values: flex-grow | flex-shrink */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 2 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Three values: flex-grow | flex-shrink | flex-basis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 2 2 10%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;align-self&quot;&gt;&lt;a href=&quot;#align-self&quot; class=&quot;headerlink&quot; title=&quot;align-self&quot;&gt;&lt;/a&gt;align-self&lt;/h2&gt;&lt;p&gt;定义项目的对齐方式，会覆盖 align-items 属性。如果只要有一个项目的交叉轴外边距设置为 auto, 那么 align-self 就会被忽略。默认值为 auto.&lt;/p&gt;
&lt;h3 id=&quot;语法-5&quot;&gt;&lt;a href=&quot;#语法-5&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;和 align-items 相同&lt;/p&gt;
&lt;h3 id=&quot;实例-3&quot;&gt;&lt;a href=&quot;#实例-3&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/raagzpbz/embed/result,html,css/&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;style&gt;
    iframe {
        min-height: 300px;
    }
&lt;/style&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;第一次接触 flex 是在去年，当时是我第一次做手机项目，结果却因为兼容性问题给掉坑了。查了 can I use 发现它只支持到安卓 4.1, 然而我们的要求是要兼容到 4.0 才行的。&lt;br&gt;所以之后一直都没敢用，昨天听到有人说 flex 是可以支持到安卓 2.1 以上的。我不信，难道是我当时看错了？！&lt;br&gt;今天又去查了一下，发现确实是 4.1 啊。盯着屏幕想了半天，突然发现 Can I Use 上一个浏览器浏览器使用率，想着该不会直接把使用率低的浏览器给忽略掉了吧。打开设置一看，果真如此，于是把数据源改成中国，浏览器最小使用率 0.03% 果真 2.3 出来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/step-to-flexbox/can-i-use.png&quot; alt=&quot;Can I USE&quot;&gt;&lt;/p&gt;
&lt;p&gt;既然如此，说明 flex 还是可以在生产环境中使用了。那么就好好在过一下它的用法吧。&lt;br&gt;Flex 就是弹性布局，任何一个元素都可以设置为 flex 布局，当一个元素被设置为 flex 布局后，它的子元素上 float, vertical-align 都会失效。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png&quot; alt=&quot;base&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="flexbox" scheme="http://kisnows.com/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】走进 Redux 之基础篇(二)</title>
    <link href="http://kisnows.com/2016/05/03/step-to-redux-2/"/>
    <id>http://kisnows.com/2016/05/03/step-to-redux-2/</id>
    <published>2016-05-03T02:02:50.000Z</published>
    <updated>2016-07-15T13:02:46.634Z</updated>
    
    <content type="html">&lt;p&gt;紧接上一篇&lt;a href=&quot;https://www.kisnows.com/2016/04/26/step-to-redux-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;走进 Redux 之基础篇(一)&lt;/a&gt;,接下来会跟着文档从下面三个点开始。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据流&lt;/li&gt;
&lt;li&gt;与 React 配合&lt;/li&gt;
&lt;li&gt;实例：TodoList&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据流&quot;&gt;&lt;a href=&quot;#数据流&quot; class=&quot;headerlink&quot; title=&quot;数据流&quot;&gt;&lt;/a&gt;数据流&lt;/h1&gt;&lt;p&gt;Redux 的架构围绕与如何搭建一个&lt;strong&gt;严格的单向数据流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这意味着所有的数据都有遵循一个同样的生命周期模式，可以让整个应用变得可预测也更加易于理解。在 Redux 应用中，所有的数据生命周期分为如下四个步骤：&lt;/p&gt;
&lt;h2 id=&quot;1-你主动调用-store-dispatch-action&quot;&gt;&lt;a href=&quot;#1-你主动调用-store-dispatch-action&quot; class=&quot;headerlink&quot; title=&quot;1 你主动调用 store.dispatch(action)&quot;&gt;&lt;/a&gt;1 你主动调用 &lt;code&gt;store.dispatch(action)&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Action 是一个用来描述发生了事情的对象。比如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type:&lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;,text:&lt;span class=&quot;string&quot;&gt;&#39;todo\&#39;s content&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_USER_SUCCESS&#39;&lt;/span&gt;, response: &amp;#123;id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;Mary&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以认为 action 是一个事件的简短片段描述。你可以在任何地方调用  &lt;code&gt;store.dispatch(action)&lt;/code&gt;  ，包括组件和 XHR 中，甚至可以在定时器中调用。&lt;/p&gt;
&lt;h2 id=&quot;2-Redux-store-调用你提供的-reducer-函数&quot;&gt;&lt;a href=&quot;#2-Redux-store-调用你提供的-reducer-函数&quot; class=&quot;headerlink&quot; title=&quot;2 Redux store 调用你提供的 reducer 函数&quot;&gt;&lt;/a&gt;2 Redux store 调用你提供的 reducer 函数&lt;/h2&gt;&lt;p&gt;store 会传递俩个参数给 reducer：当前的 state 和 action. 比如，在一个 todo 应用中，根 reducer 会收到类似下面这样的参数：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; previousState = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    visibleTodoFilter: &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ALL&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todos: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        text: &lt;span class=&quot;string&quot;&gt;&#39;Read the docs&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        complete: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; action = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:  &lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text:  &lt;span class=&quot;string&quot;&gt;&#39;Understand the flow&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// nextState 由 todoApp 这个根 reducer 来生成&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextState = todoApp(previousState, action)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是 reducer 是一个纯函数，没有副作用的，仅仅是计算下一个 state . 他应该是可以完全预测的，对于同样的参数，无论调用多少次都应该返回一个同样值。类似于 API 调用或者路由的变化都应该&lt;strong&gt;在 action 被 dispatch 之前&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;3-根-reducer-可以合并多个子-reducer-的输出来生成一个单一的-state-树。&quot;&gt;&lt;a href=&quot;#3-根-reducer-可以合并多个子-reducer-的输出来生成一个单一的-state-树。&quot; class=&quot;headerlink&quot; title=&quot;3 根 reducer 可以合并多个子 reducer 的输出来生成一个单一的 state 树。&quot;&gt;&lt;/a&gt;3 根 reducer 可以合并多个子 reducer 的输出来生成一个单一的 state 树。&lt;/h2&gt;&lt;p&gt;如何组合根 reducer 完全由你来决定。 Redux 提供了 combineRedux() 这个帮助函数，在把根 reducer 分离成独立的函数去管理整个 state 树的一个分支时很有帮助。&lt;br&gt;我们来看一下 combineRedusers() 这个函数怎么工作。假设你有俩个 reducer ， 一个用来管理 todo 列表，另一个用来管理当前选中的过滤状态：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; function todos(state = [], action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function visibleTodoFilter(state = &amp;apos;SHOW_ALL&amp;apos;, action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let todoApp = combineReducers(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当触发一个 action 的时候， 通过 &lt;code&gt;combineRedusers&lt;/code&gt; 返回的 &lt;code&gt;todoApp&lt;/code&gt; 将会调用&lt;strong&gt;所有&lt;/strong&gt; reducer：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let nextTodos = todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let nextVisibleTodoFilter = visibleTodoFilter(state.visibleTodoFilter, action)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它会把每个 reducer 返回的 state 合并成一个单独的 state 树&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;return &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos: nextTodos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter: nextVisibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以选择不用 &lt;code&gt;combineRedusers&lt;/code&gt; ，毕竟他只是好用的辅助工具，你可以自己来实现你的跟 reducer.&lt;/p&gt;
&lt;h2 id=&quot;4-Redux-store-会保存由根-reducer-返回的整个-state-树&quot;&gt;&lt;a href=&quot;#4-Redux-store-会保存由根-reducer-返回的整个-state-树&quot; class=&quot;headerlink&quot; title=&quot;4 Redux store 会保存由根 reducer 返回的整个 state 树&quot;&gt;&lt;/a&gt;4 Redux store 会保存由根 reducer 返回的整个 state 树&lt;/h2&gt;&lt;p&gt;现在这个新的 state 树就是当前应用的下一个 state 。所有通过 &lt;code&gt;store.subscribe(listener)&lt;/code&gt; 注册了监听事件的监听函数都会被调用； 监听对象可能会调用 &lt;code&gt;store.getState()&lt;/code&gt; 来获取当前的 state .&lt;br&gt;现在，整个视图都可以通过新的 state 来更新。如果你使用 React Redux 做为视图绑定工具，那么这就是 component.setState(newState) 调用的节点。&lt;/p&gt;
&lt;h1 id=&quot;和-React-配合使用&quot;&gt;&lt;a href=&quot;#和-React-配合使用&quot; class=&quot;headerlink&quot; title=&quot;和 React 配合使用&quot;&gt;&lt;/a&gt;和 React 配合使用&lt;/h1&gt;&lt;p&gt;虽然 Redux 和 React 之间没有联系，但是 Redux 确实和类似于 React 和 Deku 这类可以用数据状态俩描述 UI 的框架配合的很好。我们将会使用 React 来搭建一个简单的 Todo 应用。&lt;/p&gt;
&lt;h2 id=&quot;安装-React-Redux&quot;&gt;&lt;a href=&quot;#安装-React-Redux&quot; class=&quot;headerlink&quot; title=&quot;安装 React Redux&quot;&gt;&lt;/a&gt;安装 React Redux&lt;/h2&gt;&lt;p&gt;React bindings 并没有默认包括在 Redux 中，我们需要单独的安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save react-redux&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;展示型组件-Presentational-Components-和容器型组件-Container-Components&quot;&gt;&lt;a href=&quot;#展示型组件-Presentational-Components-和容器型组件-Container-Components&quot; class=&quot;headerlink&quot; title=&quot;展示型组件 (Presentational Components) 和容器型组件 (Container Components)&quot;&gt;&lt;/a&gt;展示型组件 (Presentational Components) 和容器型组件 (Container Components)&lt;/h2&gt;&lt;p&gt;Redux 的 React bindings 信奉 &lt;strong&gt;展示型组件和容器型组件分离&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;—&lt;/th&gt;
&lt;th&gt;展示型组件&lt;/th&gt;
&lt;th&gt;容器型组件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;目的&lt;/td&gt;
&lt;td&gt;界面看起来的样子（标记，样式）&lt;/td&gt;
&lt;td&gt;事情是怎样工作的（数据获取，状态更新）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;意识到 Redux&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读取数据&lt;/td&gt;
&lt;td&gt;从父 props 中读取&lt;/td&gt;
&lt;td&gt;顶 Redux state 中订阅获取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修改数据&lt;/td&gt;
&lt;td&gt;从 props  中调用回调函数&lt;/td&gt;
&lt;td&gt;分发 (dispatch) Redux actions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Are written&lt;/td&gt;
&lt;td&gt;手写&lt;/td&gt;
&lt;td&gt;通常由 React Redux 生成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大多数组件都应该被写成展示型组件，但是我们也需要生成一些容器型组件类把它们和 Redux store 连接起来。&lt;/p&gt;
&lt;p&gt;技术上说，你可一通过使用 &lt;code&gt;store.subscribe()&lt;/code&gt; 来手写容器型组件。但是我们不建议这样做，因为 React Redux 做了很多你很难直接手写出来的性能优化。所以，比起手写容器型组件，我们更建议通过 React Redux 提供的 &lt;code&gt;connetc()&lt;/code&gt; 函数来生成它。&lt;/p&gt;
&lt;h2 id=&quot;设计组件层级&quot;&gt;&lt;a href=&quot;#设计组件层级&quot; class=&quot;headerlink&quot; title=&quot;设计组件层级&quot;&gt;&lt;/a&gt;设计组件层级&lt;/h2&gt;&lt;p&gt;我们的设计很简单。我们想要展示一个 todo 内容列表。一个按钮，用来标记一个 todo 内容是否完成。一个用来添加新 todo 的地方。在页脚部，我们需要一个切换键来展示所有的、完成的或者未完成的 todos.&lt;/p&gt;
&lt;h3 id=&quot;展示型组件&quot;&gt;&lt;a href=&quot;#展示型组件&quot; class=&quot;headerlink&quot; title=&quot;展示型组件&quot;&gt;&lt;/a&gt;展示型组件&lt;/h3&gt;&lt;p&gt;通过下面这些展示型组件，我们可以概括出一个 props 层级。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TodoList&lt;/code&gt;  是一个用来展示可用 Todos 的列表&lt;ul&gt;
&lt;li&gt;&lt;code&gt;todos: Array&lt;/code&gt; 一个内容为 { id, text, completed } 样子的列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onTodoClick(id: number)&lt;/code&gt; 一个回调函数，当一个 todo 被点击的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Todo&lt;/code&gt; 一个单独的 todo 项目&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text: string&lt;/code&gt; 要展示的文字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completed: boolean&lt;/code&gt; todo 是否被完成的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onClick&lt;/code&gt;  一个回调函数，当一个 todo 被点击时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link&lt;/code&gt; 一个用回调的链接&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onClick&lt;/code&gt; 这个链接被点击时的回调&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Footer&lt;/code&gt; 用来改变当前显示 todo 内容的地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;App&lt;/code&gt; 跟组件，用来渲染所有其它的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们描述这个应用看起来的样子，但是不知道数据从哪里来，也不知道如何改变他们。只是渲染我们给它的数据。如果你要从 Redux 迁移到其它框架，这些组件几乎都是可以不用改动的。它们和 Redux 之间没有联系。&lt;/p&gt;
&lt;h3 id=&quot;容器型组件&quot;&gt;&lt;a href=&quot;#容器型组件&quot; class=&quot;headerlink&quot; title=&quot;容器型组件&quot;&gt;&lt;/a&gt;容器型组件&lt;/h3&gt;&lt;p&gt;我们同样需要一些容器型组件来把展示型组件连接到 Redux. 比如，&lt;code&gt;TodoList&lt;/code&gt; 组件需要一个容器 &lt;code&gt;VisibleTodoList&lt;/code&gt; 用来从 Redux 去订阅数据来知道如何使用当前的可视性筛选条件 (visibility filter). 为了更改可视性筛选条件，我们提供一个 &lt;code&gt;FilterLink&lt;/code&gt; 容器来渲染 &lt;code&gt;Link&lt;/code&gt; 用来 dispatches 一个合适的 action 在点击的时候：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VisibleTodoList&lt;/code&gt; 通过当前的可视性筛选条件来过滤要展示的内容并渲染一个 &lt;code&gt;TodoList&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FilterLink&lt;/code&gt; 获得当前的可视性筛选条件并渲染 &lt;code&gt;Link&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter: string&lt;/code&gt; 表示一个可视性筛选条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;其它组件&quot;&gt;&lt;a href=&quot;#其它组件&quot; class=&quot;headerlink&quot; title=&quot;其它组件&quot;&gt;&lt;/a&gt;其它组件&lt;/h3&gt;&lt;p&gt;有时，我们难以去区分一个组件是展示型还是容器型的。比如，有时表单和函数是互相依赖的， 就像这个小型的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AddTodo&lt;/code&gt; 一个有 ‘添加’ 按钮的输入框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术上说，我没呢可以把它分离成俩个组件，但是这样明显太繁琐了。当项目变得负责和庞大的时候，我们可以把它分离开，但是现在的话，就这样让他们混合在一起吧。&lt;/p&gt;
&lt;h3 id=&quot;实现组件&quot;&gt;&lt;a href=&quot;#实现组件&quot; class=&quot;headerlink&quot; title=&quot;实现组件&quot;&gt;&lt;/a&gt;实现组件&lt;/h3&gt;&lt;h4 id=&quot;展示型组件-1&quot;&gt;&lt;a href=&quot;#展示型组件-1&quot; class=&quot;headerlink&quot; title=&quot;展示型组件&quot;&gt;&lt;/a&gt;展示型组件&lt;/h4&gt;&lt;p&gt;就是普通的 React 组件，就不详细介绍了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;TodoList.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123; PropTypes &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Todo &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./Todo&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TodoList = (&amp;#123; todos, onTodoClick &amp;#125;) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;todos.map(todo =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Todo&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;todo.id&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;span class=&quot;attr&quot;&gt;...todo&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;()&lt;/span&gt; =&amp;gt; onTodoClick(todo.id)&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TodoList.propTypes = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  todos: PropTypes.arrayOf(PropTypes.shape(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    id: PropTypes.number.isRequired,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    completed: PropTypes.bool.isRequired,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text: PropTypes.string.isRequired&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;).isRequired).isRequired,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  onTodoClick: PropTypes.func.isRequired&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export default TodoList&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;容器型组件-1&quot;&gt;&lt;a href=&quot;#容器型组件-1&quot; class=&quot;headerlink&quot; title=&quot;容器型组件&quot;&gt;&lt;/a&gt;容器型组件&lt;/h4&gt;&lt;p&gt;接下来我们通过生成容器型组件来把展示型组件和 Redux 链接起来。技术上说，一个容器型组件只是一个 React 组件，通过使用 &lt;code&gt;store.subscribe()&lt;/code&gt; 来读取一部分 Redux state tree 并且提供 props 给一个展示型组件用来渲染。你可以手写这个组件，但是我们建议使用 Redux 提供的 &lt;code&gt;connect()&lt;/code&gt; 函数来生成这些容器型组件，它提供了很多有用的优化去阻止一些不必要重新渲染。&lt;/p&gt;
&lt;p&gt;为了使用它 &lt;code&gt;connect()&lt;/code&gt; , 你需要顶一个叫做 &lt;code&gt;mapStateToProps&lt;/code&gt;  的特殊函数，用来指明如何转换当前的 Redux store state 成为你想要传递给展示型组件的 props. 比如， &lt;code&gt;VisibleTodoList&lt;/code&gt; 需要去计算 &lt;code&gt;todos&lt;/code&gt; 来传递给 &lt;code&gt;TodoList&lt;/code&gt;, 所以我们定义一个函数通过 &lt;code&gt;state.visibilityFilter&lt;/code&gt; 用来过滤 &lt;code&gt;state.todos&lt;/code&gt;,  并且在 &lt;code&gt;mapStateToProps&lt;/code&gt; 中使用它：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getVisibleTodos = (todos, filter) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (filter) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ALL&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todos&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;SHOW_COMPLETED&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todos.filter(t =&amp;gt; t.completed)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ACTIVE&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todos.filter(t =&amp;gt; !t.completed)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mapStateToProps = (state) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todos: getVisibleTodos(state.todos, state.visibilityFilter)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了读取 state 之外， 容器型组件可以 dispatch actions.  通过同样的方式，你可以定义一个名为 &lt;code&gt;mapDispatchToProps()&lt;/code&gt;  的函数去接收 &lt;code&gt;dispatch()&lt;/code&gt; 方法，并返回一个回调 props 用来注入到你想要的展示型组件中。比如，我们想要 &lt;code&gt;VisibleTodoList&lt;/code&gt; 去注入一个名为 &lt;code&gt;onTodoClisk&lt;/code&gt; 的 prop 到 &lt;code&gt;TodoList&lt;/code&gt; 组件中，而且我们想要 &lt;code&gt;onTodoClick&lt;/code&gt; 去 dispatch 一个 `TOGGLE_TODO’ action:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mapDispatchToProps = (dispatch) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onTodoClick: (id) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      dispatch(toggleTodo(id))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们通过调用 &lt;code&gt;connect()&lt;/code&gt; 来生成一个 &lt;code&gt;VisibleTodoList&lt;/code&gt;  并传递这两个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; connect &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; VisibleTodoList = connect(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mapStateToProps,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mapDispatchToProps&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)(TodoList)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; VisibleTodoList&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些都是 React Redux  的基础 API, 但是这有一些快捷方式和强大的选项，所以我们鼓励你去仔细查看 &lt;a href=&quot;https://github.com/reactjs/react-redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个文档&lt;/a&gt;. 如果你担心 &lt;code&gt;mapStateToProps&lt;/code&gt; 创建新对象的过程，你可能需要去了解 &lt;a href=&quot;http://redux.js.org/docs/recipes/ComputingDerivedData.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;computing derived data&lt;/a&gt; with &lt;a href=&quot;https://github.com/rackt/reselect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reselect&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;传递到-Store&quot;&gt;&lt;a href=&quot;#传递到-Store&quot; class=&quot;headerlink&quot; title=&quot;传递到 Store&quot;&gt;&lt;/a&gt;传递到 Store&lt;/h4&gt;&lt;p&gt;所有的容器型组件需要连接到 Redux store 这样它们才能订阅它。一个方式是把它做为一个 prop 传递给每一个容器型组件。然而那样过于繁琐，&lt;br&gt;我们推荐的方式是通过使用特定的 React Redux 组件 &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; 去黑魔法般的使 store 可用给应用中的所有容器型组件而不用专门去传递它。你只需要在渲染跟组件的时候调用它一次。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Index.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; render &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Provider &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; todoApp &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./reducers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./components/App&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; store = createStore(todoApp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;store&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;store&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;App&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;实例：TodoList&quot;&gt;&lt;a href=&quot;#实例：TodoList&quot; class=&quot;headerlink&quot; title=&quot;实例：TodoList&quot;&gt;&lt;/a&gt;实例：TodoList&lt;/h1&gt;&lt;p&gt;直接看文档，虽然了解到很多专有名次和方法，但还是看不出个所以然来。所以还是得看代码，这里是官方的 &lt;a href=&quot;http://redux.js.org/docs/basics/ExampleTodoList.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TodoList&lt;/a&gt; 源码，结合这两篇文章应该就能很好的理解了。&lt;br&gt;我在这里遇到了几个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;webpack 一直报错找不到入口文件 ‘./index’ , 最后发现 babel 的坑。 Babel 升级到 6.0 以后需要在 .babelrc 这个文件中指明要编译 js 的文件类型，否则编译会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面渲染出来后，点击添加什么都是可以正常运行的。但是点击筛选的时候老师报错，而且报的错莫名其妙。于是一步一步打断点来看，最后发现是 &lt;code&gt;Footer.js&lt;/code&gt; 里面 filter 对应的 action 拼写错误导致后面的组件找不到对应的 action &lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; FilterLink &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../containers/FilterLink&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Footer = () =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Show:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&quot; &quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filter&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;SHOW_ALL&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    All&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&quot;, &quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filter&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;SHOW_ACTIVE&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Active&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&quot;, &quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filter&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;SHOW_COMPLETED&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Completed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Footer&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 可见应用的 action 还是需要专门单独维护一个文件，将所有的 action 都定义为变量然后暴露出来，这样如果后面有拼写错误的话，那么在编译阶段就可以发现问题了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basics|Redux&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;紧接上一篇&lt;a href=&quot;https://www.kisnows.com/2016/04/26/step-to-redux-1/&quot;&gt;走进 Redux 之基础篇(一)&lt;/a&gt;,接下来会跟着文档从下面三个点开始。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据流&lt;/li&gt;
&lt;li&gt;与 React 配合&lt;/li&gt;
&lt;li&gt;实例：TodoList&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据流&quot;&gt;&lt;a href=&quot;#数据流&quot; class=&quot;headerlink&quot; title=&quot;数据流&quot;&gt;&lt;/a&gt;数据流&lt;/h1&gt;&lt;p&gt;Redux 的架构围绕与如何搭建一个&lt;strong&gt;严格的单向数据流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这意味着所有的数据都有遵循一个同样的生命周期模式，可以让整个应用变得可预测也更加易于理解。在 Redux 应用中，所有的数据生命周期分为如下四个步骤：&lt;/p&gt;
&lt;h2 id=&quot;1-你主动调用-store-dispatch-action&quot;&gt;&lt;a href=&quot;#1-你主动调用-store-dispatch-action&quot; class=&quot;headerlink&quot; title=&quot;1 你主动调用 store.dispatch(action)&quot;&gt;&lt;/a&gt;1 你主动调用 &lt;code&gt;store.dispatch(action)&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Action 是一个用来描述发生了事情的对象。比如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type:&lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;,text:&lt;span class=&quot;string&quot;&gt;&#39;todo\&#39;s content&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_USER_SUCCESS&#39;&lt;/span&gt;, response: &amp;#123;id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;Mary&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以认为 action 是一个事件的简短片段描述。你可以在任何地方调用  &lt;code&gt;store.dispatch(action)&lt;/code&gt;  ，包括组件和 XHR 中，甚至可以在定时器中调用。&lt;/p&gt;
&lt;h2 id=&quot;2-Redux-store-调用你提供的-reducer-函数&quot;&gt;&lt;a href=&quot;#2-Redux-store-调用你提供的-reducer-函数&quot; class=&quot;headerlink&quot; title=&quot;2 Redux store 调用你提供的 reducer 函数&quot;&gt;&lt;/a&gt;2 Redux store 调用你提供的 reducer 函数&lt;/h2&gt;&lt;p&gt;store 会传递俩个参数给 reducer：当前的 state 和 action. 比如，在一个 todo 应用中，根 reducer 会收到类似下面这样的参数：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redux" scheme="http://kisnows.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】走进 Redux 之基础篇(一)</title>
    <link href="http://kisnows.com/2016/04/26/step-to-redux-1/"/>
    <id>http://kisnows.com/2016/04/26/step-to-redux-1/</id>
    <published>2016-04-26T14:17:16.000Z</published>
    <updated>2016-07-15T13:02:34.422Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Redux-的三个原则&quot;&gt;&lt;a href=&quot;#Redux-的三个原则&quot; class=&quot;headerlink&quot; title=&quot;Redux 的三个原则&quot;&gt;&lt;/a&gt;Redux 的三个原则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;整个应用的状态都以一个对象树的形式保存在一个单一的 store 中&lt;/li&gt;
&lt;li&gt;唯一去改变这个对象树的方法就是通过去触发 action,一个用来描述发生了什么事情的对象&lt;/li&gt;
&lt;li&gt;通过编写纯函数 reducers，去描述这个 action 如何改变了整个对象树&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h1&gt;&lt;p&gt;Action 就是承载了要从你的应用传送给 store 的信息。它们只是 store 的信息数据来源。可以通过 &lt;code&gt;store.dispatch()&lt;/code&gt; 来传递 action.&lt;br&gt;action 可能长这个样子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ADD_TODO = &lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text: &lt;span class=&quot;string&quot;&gt;&#39;Bulid my first Redux App&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Actions 就是普通的 JavaScript 对象，但是必须有 &lt;code&gt;type&lt;/code&gt; 属性，用来指定是发生了哪种类型的操作。 Types 应该被定义为字符串常量。当你的项目变的庞大起来时，你可能需要把它们移动到一个单独隔离的模块里面。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; ADD_TODO, REMOVE_TODO &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../actionTypes&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;type&lt;/code&gt; 不同的是，整个 action 的结构完全由你来决定。不过可以参考 &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux Standard Action&lt;/a&gt; 里面的指南来了解如何更好的组织 action 的结构。&lt;/p&gt;
&lt;h2 id=&quot;Action-Creators&quot;&gt;&lt;a href=&quot;#Action-Creators&quot; class=&quot;headerlink&quot; title=&quot;Action Creators&quot;&gt;&lt;/a&gt;Action Creators&lt;/h2&gt;&lt;p&gt;Action Creators 就是用来生成 action 的函数。&lt;br&gt;在 Redux 中 action creators 简单的返回一个 action 对象就可以了：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTodo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        text: &lt;span class=&quot;string&quot;&gt;&#39;Some text&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样可以更加容易的创建一类 action, 而且更易于测试。&lt;/p&gt;
&lt;h2 id=&quot;Dispatch&quot;&gt;&lt;a href=&quot;#Dispatch&quot; class=&quot;headerlink&quot; title=&quot;Dispatch&quot;&gt;&lt;/a&gt;Dispatch&lt;/h2&gt;&lt;p&gt;实际的初始化一个 dispatch 可以通过把结果传递给 &lt;code&gt;diapatch()&lt;/code&gt; 函数：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;store.dispatch(addTodo(text))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;或者，你可以通过创建个一个被的绑定 action creator 用来自动 dispatches：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;`&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;javascript&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; boundAddTodo = (text) =&amp;gt; dispatch(addTodo(text))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你能够直接调用它们了：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;boundAddTodo(text)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatch()&lt;/code&gt; 函数可以直接访问 store 通过 &lt;code&gt;store.dispatch()&lt;/code&gt;，但你可能更喜欢通过使用一个像 react-redux 的 &lt;code&gt;connect()&lt;/code&gt; 这样辅助函数来访问。可以通过 &lt;code&gt;bindActionCreators()&lt;/code&gt; 来自动绑定很多 action creators 到 &lt;code&gt;dispatch()&lt;/code&gt; 函数上。&lt;/p&gt;
&lt;h1 id=&quot;Reducers&quot;&gt;&lt;a href=&quot;#Reducers&quot; class=&quot;headerlink&quot; title=&quot;Reducers&quot;&gt;&lt;/a&gt;Reducers&lt;/h1&gt;&lt;p&gt;Actions 描述一个发生了什么事情的事实，但是没有指定如何去改变应用的 state. 这个就是 reducer 要做的。&lt;/p&gt;
&lt;h2 id=&quot;设计-State-结构&quot;&gt;&lt;a href=&quot;#设计-State-结构&quot; class=&quot;headerlink&quot; title=&quot;设计 State 结构&quot;&gt;&lt;/a&gt;设计 State 结构&lt;/h2&gt;&lt;p&gt;在 Redux 里面，应用的所有状态都被存储在一个单一的对象中。所以在写代码之前考虑一下如何设计 state 是很重要的。如何用最简单的方法来把应用状态描述为一个对象。&lt;br&gt;对于一个 todo 应用来说，我们想要存储俩个不同的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前选中的显示过滤条件&lt;/li&gt;
&lt;li&gt;实际的 todos 列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单的 state 就是下面这个样子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibilityFilter: &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ALL&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           text: &lt;span class=&quot;string&quot;&gt;&#39;Consider using Redux&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           completed: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           text: &lt;span class=&quot;string&quot;&gt;&#39;Keep all state in a single tree&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;处理-Actions&quot;&gt;&lt;a href=&quot;#处理-Actions&quot; class=&quot;headerlink&quot; title=&quot;处理 Actions&quot;&gt;&lt;/a&gt;处理 Actions&lt;/h2&gt;&lt;p&gt;Reducer 是一个纯函数，接受之前的 state 和 action 做为参数，返回下一个 state.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(previousState, action) =&amp;gt; newState&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之所以叫做 reducer 是因为它要被传递给 &lt;code&gt;Array.prototype.reduce(reducer,?initialValue)&lt;/code&gt; 这个函数。所以保持 reduce 的纯净非常重要。永远不要在 reducer 里面做下面的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转换它的函数参数&lt;/li&gt;
&lt;li&gt;做一些带有副作用的操作，比如 API 的调用和路由的跳转&lt;/li&gt;
&lt;li&gt;调用不纯净的函数，比如 &lt;code&gt;Date.now()&lt;/code&gt; 和 &lt;code&gt;Math.random()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了这些以后，我们来开始 reducer 函数。通过指明初始 state 来开始。 Redux 将会在第一次调用 reducer 时传递一个 &lt;code&gt;undefined&lt;/code&gt; state. 这时我们需要返回一个初始化的 state：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; VisibilityFilters &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./actions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initialState = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    visibilityFilter: VisibilityFilters.SHOW_ALL,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todo: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//采用 ES2015 写法，当 state 传递为 undefined 时，会被赋值为 initialState&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来处理 &lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt;. 需要做的就是在 state 上改变 &lt;code&gt;visibilityFilter&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SET_VISIBILITY_FILTER:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, state, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                visibilityFilter: action.SET_VISIBILITY_FILTER&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们不修改原有的 state. 通过 &lt;code&gt;Object.assign()&lt;/code&gt; 创建一个原有 state 和 要改变内容合并后的副本。&lt;/li&gt;
&lt;li&gt;当找不到状况也就是 default 时，必须返回之前的 state&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;处理更多的-Actions&quot;&gt;&lt;a href=&quot;#处理更多的-Actions&quot; class=&quot;headerlink&quot; title=&quot;处理更多的 Actions&quot;&gt;&lt;/a&gt;处理更多的 Actions&lt;/h2&gt;&lt;p&gt;还有一些 action 需要去处理，我们也都一一加上。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SET_VISIBILITY_FILTER:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, state, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            visibilityFilter: action.filter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ADD_TODO:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, state, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                todos: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ...state.todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        text: action.text,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;)    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过分离 reducer 函数来使它更加容易理解，毕竟把 todos 相关的处理逻辑和 visibilityFilter 的处理逻辑放在一块不是很清晰。分离 reducer 也是很简单的。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todos&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state=[], action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ADD_TODO:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ...state,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    text: action.text,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;visibilityFilter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = SHOW_ALL, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SET_VISIBILITY_FILTER:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; action.filter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = &amp;#123;&amp;#125;, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        visibilityFilter: visibilityFilter(state.visibilityFilter, action),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        todos: todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，每个 reducer 都管理着整个 state 中属于自己的部分。每个 reducer 的 &lt;code&gt;state&lt;/code&gt; 参数都不同，分别对应他们自己管理部分的 state.&lt;br&gt;当应用变得庞大时，我们可以把 reducer 分离到多个不同的文件中，保持独立性并管理不同的数据源。&lt;br&gt;最后，Redux 提供了一个 &lt;code&gt;combineReducers()&lt;/code&gt; 函数来做和上面 todoApp 同样逻辑的事情，合并多个 reducer, 这样可以省略很多样板代码。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; combineReducers &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; todoApp = combineReducers(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    visibilityFilter,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todos&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; todoApp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它和下面的写法是完全等价的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = &amp;#123;&amp;#125;, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        visibilityFilter: visibilityFilter(state.visibilityFilter, action),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        todos: todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;combineReducers()&lt;/code&gt; 所做的就是生成一个函数，并给每个 reducer 函数并传入对应的 state，并把它们合并成一个单独的对象。这并不是&lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑魔法&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;combineReducers-原理&quot;&gt;&lt;a href=&quot;#combineReducers-原理&quot; class=&quot;headerlink&quot; title=&quot;combineReducers 原理&quot;&gt;&lt;/a&gt;combineReducers 原理&lt;/h3&gt;&lt;p&gt;15 年看 Redux 时，没有读文档，这里一直没能理解，不知道 &lt;code&gt;combineReducers()&lt;/code&gt; 到底是怎么做的，以为他就是个黑魔法。而且还能通过 &lt;code&gt;combineReducers()&lt;/code&gt; 后的函数生成初始化的 store.&lt;/p&gt;
&lt;p&gt;今天重新读了文档和 &lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑魔法&lt;/a&gt; 这个 issue 后理解了。&lt;br&gt;其实 &lt;code&gt;combineReducers()&lt;/code&gt; 是这样工作的。假设你有俩个 reducer ， 一个用来管理 todo 列表，另一个用来管理当前选中的过滤状态：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; function todos(state = [], action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function visibleTodoFilter(state = &amp;apos;SHOW_ALL&amp;apos;, action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let todoApp = combineReducers(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，每个 reducer 中都定义了默认的 state:&lt;br&gt;&lt;code&gt;todos&lt;/code&gt; 中为 &lt;code&gt;[]&lt;/code&gt;, 而 &lt;code&gt;visibleTodoFilter&lt;/code&gt; 中为 &lt;code&gt;SHOW_ALL&lt;/code&gt;。&lt;br&gt;当触发一个 action 的时候， 通过 combineReduser 返回的 todoApp 将会调用&lt;strong&gt;整个&lt;/strong&gt; reducer：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextTodos = todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextVisibleTodoFilter = visibleTodoFilter(state.visibleTodoFilter, action)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终它会把每个 reducer 返回的 state 合并成一个单独的 state 树&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos: nextTodos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter: nextVisibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就可以理解 combineReducer 的工作原理了。当然你也可以选择不用 combineReduser ，毕竟他只是一个官方提供的辅助工具，你可以自己来实现你的根 reducer.&lt;/p&gt;
&lt;h1 id=&quot;Store&quot;&gt;&lt;a href=&quot;#Store&quot; class=&quot;headerlink&quot; title=&quot;Store&quot;&gt;&lt;/a&gt;Store&lt;/h1&gt;&lt;p&gt;Store 是一个对象，用来把它们联系起来。Store 的职责如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存整个应用的 state&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;getState()&lt;/code&gt; 来获取 state&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;dispatch(action)&lt;/code&gt; 来更新 state&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;subscribe(listener)&lt;/code&gt; 来注册监听器&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;subscribe(listener)&lt;/code&gt; 返回的值来处理没有注册的监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的只能有一个 store 在 Redux 应用中。当你想要分离数据逻辑时，你可以通过创建更多的 reducer 来代替更多的 store.&lt;br&gt;当你拥有一个 reducer 时，创建 store 是很容易的。我们可以通过 &lt;code&gt;combineReducers()&lt;/code&gt; 后创建的根 reducer 来创建 store.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; todoApp &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./reducers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; store = createStore(todoApp)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以通过传递可选参数来初始化 state. 当你开发一个通过应用时着很有用，可以把服务端传来的 state 做为客户端初始化 state.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; store = createStore(todoApp, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.STATE_FROM_SERVER)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;理解了这些内容，就大概可以知道 Redux 是怎么运作的了。可见读文档还是很有用的，不像去年直接去看官方例子里的源码，结果看的一愣一愣的，最后也不明白是个怎么回事。&lt;br&gt;接下来，要继续学习数据流以及和 React 的配合，并动手写一个 TodoList 实例来加深理解。&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basics|Redux&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-的三个原则&quot;&gt;&lt;a href=&quot;#Redux-的三个原则&quot; class=&quot;headerlink&quot; title=&quot;Redux 的三个原则&quot;&gt;&lt;/a&gt;Redux 的三个原则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;整个应用的状态都以一个对象树的形式保存在一个单一的 store 中&lt;/li&gt;
&lt;li&gt;唯一去改变这个对象树的方法就是通过去触发 action,一个用来描述发生了什么事情的对象&lt;/li&gt;
&lt;li&gt;通过编写纯函数 reducers，去描述这个 action 如何改变了整个对象树&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h1&gt;&lt;p&gt;Action 就是承载了要从你的应用传送给 store 的信息。它们只是 store 的信息数据来源。可以通过 &lt;code&gt;store.dispatch()&lt;/code&gt; 来传递 action.&lt;br&gt;action 可能长这个样子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ADD_TODO = &lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text: &lt;span class=&quot;string&quot;&gt;&#39;Bulid my first Redux App&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Actions 就是普通的 JavaScript 对象，但是必须有 &lt;code&gt;type&lt;/code&gt; 属性，用来指定是发生了哪种类型的操作。 Types 应该被定义为字符串常量。当你的项目变的庞大起来时，你可能需要把它们移动到一个单独隔离的模块里面。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; ADD_TODO, REMOVE_TODO &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../actionTypes&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;type&lt;/code&gt; 不同的是，整个 action 的结构完全由你来决定。不过可以参考 &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; 里面的指南来了解如何更好的组织 action 的结构。&lt;/p&gt;
&lt;h2 id=&quot;Action-Creators&quot;&gt;&lt;a href=&quot;#Action-Creators&quot; class=&quot;headerlink&quot; title=&quot;Action Creators&quot;&gt;&lt;/a&gt;Action Creators&lt;/h2&gt;&lt;p&gt;Action Creators 就是用来生成 action 的函数。&lt;br&gt;在 Redux 中 action creators 简单的返回一个 action 对象就可以了：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTodo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        text: &lt;span class=&quot;string&quot;&gt;&#39;Some text&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样可以更加容易的创建一类 action, 而且更易于测试。&lt;/p&gt;
&lt;h2 id=&quot;Dispatch&quot;&gt;&lt;a href=&quot;#Dispatch&quot; class=&quot;headerlink&quot; title=&quot;Dispatch&quot;&gt;&lt;/a&gt;Dispatch&lt;/h2&gt;&lt;p&gt;实际的初始化一个 dispatch 可以通过把结果传递给 &lt;code&gt;diapatch()&lt;/code&gt; 函数：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redux" scheme="http://kisnows.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的类和继承</title>
    <link href="http://kisnows.com/2016/03/21/class%20and%20inherit%20in%20JavaScript/"/>
    <id>http://kisnows.com/2016/03/21/class and inherit in JavaScript/</id>
    <published>2016-03-21T11:38:13.000Z</published>
    <updated>2016-04-13T13:05:16.446Z</updated>
    
    <content type="html">&lt;p&gt;我们都知道 JavaScript 是一门基于原型的语言。当我们调用一个对象本身没有的属性时，JavaScript 就会从对象的原型对象上去找该属性，如果原型上也没有该属性，那就去找原型的原型，一直找原型链的末端也就是 &lt;code&gt;Object.prototype&lt;/code&gt; 的原型 &lt;code&gt;null&lt;/code&gt;。这种属性查找的方式我们称之为原型链。&lt;/p&gt;
&lt;h1 id=&quot;类的实现&quot;&gt;&lt;a href=&quot;#类的实现&quot; class=&quot;headerlink&quot; title=&quot;类的实现&quot;&gt;&lt;/a&gt;类的实现&lt;/h1&gt;&lt;p&gt;由于 JavaScript 本身是没有的类的感念的。所以我们如果要实现一个类，一般是通过构造函数来模拟类的实现：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;//实现一个类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//通过 new 来新建实例&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先新建一个 &lt;code&gt;Person&lt;/code&gt; 的构造函数，为了和一般的函数区别，我们会使用 CamelCase 方式来命名构造函数。&lt;br&gt;然后通过 &lt;code&gt;new&lt;/code&gt; 操作符来创建实例，&lt;code&gt;new&lt;/code&gt; 操作符其实干了这么几件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个继承自 &lt;code&gt;Person.prototype&lt;/code&gt; 的新对象&lt;/li&gt;
&lt;li&gt;构造函数 &lt;code&gt;Person&lt;/code&gt; 执行时，相应的参数传入，同时上下文被指定为这个新建的对象。&lt;/li&gt;
&lt;li&gt;如果构造函数返回了一个对象，那么这个对象会取代 &lt;code&gt;new&lt;/code&gt; 的结果。如果构造函数返回的不是对象，则会忽略这个返回值。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;返回值不是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;person&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you 的值: Person &amp;#123;name: &quot;you&quot;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;返回值是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you的值: [1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果类的实例需要共享类的方法，那么就需要给构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性添加方法了。因为 &lt;code&gt;new&lt;/code&gt; 操作符创建的对象都继承自构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性。他们可以共享定义在类 &lt;code&gt;prototype&lt;/code&gt; 上的方法和属性。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayName: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;My name is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; me = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;me&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.sayName()   &lt;span class=&quot;comment&quot;&gt;// My name is you.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;me.sayName()    &lt;span class=&quot;comment&quot;&gt;// My name is me.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;继承的实现&quot;&gt;&lt;a href=&quot;#继承的实现&quot; class=&quot;headerlink&quot; title=&quot;继承的实现&quot;&gt;&lt;/a&gt;继承的实现&lt;/h1&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;JavaScript 中常用的继承方式是组合继承，也就是通过构造函数和原型链继承同时来模拟继承的实现。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Person 构造函数如上&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,clas&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name,age)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clas = clas;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(Person.prototype);        &lt;span class=&quot;comment&quot;&gt;// Mark 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.constructor = Student;      &lt;span class=&quot;comment&quot;&gt;//如果不指明，则 Student 会找不到 constructor&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype.study = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;I study in class&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clas)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Person    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Student   &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.sayName();       &lt;span class=&quot;comment&quot;&gt;// My name is liming&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.study();         &lt;span class=&quot;comment&quot;&gt;// I study in class 7&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码中 Mark 1 用到了 &lt;code&gt;Object.create&lt;/code&gt; 方法。这个是 ES5 中新增的方法，用来创建一个拥有指定原型的对象。如果环境不兼容，可以用下面这个 Polyfill 来实现（仅实现第一个参数）。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        F.prototype = obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实就是把 &lt;code&gt;obj&lt;/code&gt; 赋值给临时函数 &lt;code&gt;F&lt;/code&gt; ，然后返回一个 &lt;code&gt;F&lt;/code&gt; 的实例。这样通过代码 Mark 1 &lt;code&gt;Student&lt;/code&gt; 就得到了 &lt;code&gt;Person.prototype&lt;/code&gt; 上的所有属性。有人会问了，那么为什么不干脆把 &lt;code&gt;Person.prototype&lt;/code&gt; 直接赋值给 &lt;code&gt;Student.prototype&lt;/code&gt; 呢？&lt;/p&gt;
&lt;p&gt;是的，直接赋值是可以达到子类共享父类 &lt;code&gt;prototype&lt;/code&gt; 的目的，但是它破坏了原型链。即：子类和父类共用了同一个 &lt;code&gt;prototype&lt;/code&gt;,这样当某一个子类修改 &lt;code&gt;prototype&lt;/code&gt; 的时候，其实同时也修改了父类的 &lt;code&gt;prototype&lt;/code&gt;,那么就会影响到所有基于这个父类创建的子类，这并不是我们想要的结果。看例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Person 同上&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Student 同上&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype = Person.prototype;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;My name is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name,&lt;span class=&quot;string&quot;&gt;&#39;my class is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clas)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.sayName()        &lt;span class=&quot;comment&quot;&gt;//My name is liming,my class is 7;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//另一个子类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,salary&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.call(name,age);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.salary = salary;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Employee.prototype = Person.prototype;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; emp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Employee(&lt;span class=&quot;string&quot;&gt;&#39;emp&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emp.sayName()       &lt;span class=&quot;comment&quot;&gt;//Mark 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你们猜 Mark 2 会输出什么？&lt;/p&gt;
&lt;p&gt;我们期望的 Mark 2 应该会输出 “My name is emp”. 但实际上报错，为什么呢？因为我们改写 &lt;code&gt;Student.prototype&lt;/code&gt; 的时候，也同时修改了 &lt;code&gt;Person.prototype&lt;/code&gt;，最终导致 &lt;code&gt;emp&lt;/code&gt; 继承的 &lt;code&gt;prototype&lt;/code&gt; 是我们所不期望的，它的 sayName 方法是 &lt;code&gt;My name is&amp;#39;,this.name,&amp;#39;my class is&amp;#39;,this.clas&lt;/code&gt;，这样自然是会报错的。&lt;/p&gt;
&lt;h2 id=&quot;ES6-的继承&quot;&gt;&lt;a href=&quot;#ES6-的继承&quot; class=&quot;headerlink&quot; title=&quot;ES6 的继承&quot;&gt;&lt;/a&gt;ES6 的继承&lt;/h2&gt;&lt;p&gt;随着 ECMAScript 6 的发布，我们有了新的方法来实现继承。也就是通过 &lt;code&gt;class&lt;/code&gt; 关键字。&lt;/p&gt;
&lt;h3 id=&quot;类的实现-1&quot;&gt;&lt;a href=&quot;#类的实现-1&quot; class=&quot;headerlink&quot; title=&quot;类的实现&quot;&gt;&lt;/a&gt;类的实现&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayHello()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`My name is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.name&amp;#125;&lt;/span&gt;,i&#39;m &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.age&amp;#125;&lt;/span&gt; years old`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.sayHello()      &lt;span class=&quot;comment&quot;&gt;//My name is you,i&#39;m 23 years old.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;ES6 里面的继承也很方便，通过 &lt;code&gt;extends&lt;/code&gt; 关键字来实现。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age,cla)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name,age);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.class = cla;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    study()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`I&#39;m study in class &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.class&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.study()      &lt;span class=&quot;comment&quot;&gt;// I&#39;m study in class 7.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个继承相比上面的 ES5 里面实现的继承要方便了很多，但其实原理是一样的，提供的这些关键字方法只是语法糖而已，并没有改变 Js 是基于原型这么一个事实。不过 &lt;code&gt;extends&lt;/code&gt; 这样实现的继承有一个限制，就是不能定义属性，只能定义方法。要新添属性，还是得通过修改 &lt;code&gt;prototype&lt;/code&gt; 来达到目的。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype.teacher = &lt;span class=&quot;string&quot;&gt;&#39;Mr.Li&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hanmeimei = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;hanmeimei&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.teacher          &lt;span class=&quot;comment&quot;&gt;//Mr.Li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hanmeimei.teacher       &lt;span class=&quot;comment&quot;&gt;//Mr.Li&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;静态方法&quot;&gt;&lt;a href=&quot;#静态方法&quot; class=&quot;headerlink&quot; title=&quot;静态方法&quot;&gt;&lt;/a&gt;静态方法&lt;/h3&gt;&lt;p&gt;ES6 还提供了 &lt;code&gt;static&lt;/code&gt; 关键字，来实现静态方法。静态方法可以继承，但只能由类本身调用，不能被实例调用。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; say()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Static&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.say()        &lt;span class=&quot;comment&quot;&gt;// Static&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.say()       &lt;span class=&quot;comment&quot;&gt;// Static&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.say()           &lt;span class=&quot;comment&quot;&gt;// TypeError: liming.say is not a function&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在实例上调用的时候会直接报错。&lt;/p&gt;
&lt;h3 id=&quot;Super关键字&quot;&gt;&lt;a href=&quot;#Super关键字&quot; class=&quot;headerlink&quot; title=&quot;Super关键字&quot;&gt;&lt;/a&gt;Super关键字&lt;/h3&gt;&lt;p&gt;在子类中可以通过 &lt;code&gt;super&lt;/code&gt; 来调用父类，根据调用位置的不同，行为也不同。在 &lt;code&gt;constructor&lt;/code&gt; 中调用，相当于调用父类的 &lt;code&gt;constructor&lt;/code&gt; 方法，而在普通方法里面调用则相当与调用父类本身。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayHello()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`My name is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.name&amp;#125;&lt;/span&gt;,i&#39;m &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.age&amp;#125;&lt;/span&gt; years old`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age,cla)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name,age);        &lt;span class=&quot;comment&quot;&gt;// 必须在子类调用 this 前执行，调用了父类的 constructor&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.class = cla;       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayHello()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.sayHello;         &lt;span class=&quot;comment&quot;&gt;// 调用父类方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Student say&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.say()        &lt;span class=&quot;comment&quot;&gt;// My name is liming,i&#39;m 23 years old.\n Student say.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;至此，我们可以看到：在 ES6 发布以后，JavaScript 中实现继承有了一个标准的方法。虽然它们只是语法糖，背后的本质还是通过原型链以及构造函数实现的，不过在写法上更易于我们理解而且也更加清晰。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002440502#articleHeader7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript继承方式详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ruby-china.org/topics/27499&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 原型系统的变迁，以及 ES6 class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道 JavaScript 是一门基于原型的语言。当我们调用一个对象本身没有的属性时，JavaScript 就会从对象的原型对象上去找该属性，如果原型上也没有该属性，那就去找原型的原型，一直找原型链的末端也就是 &lt;code&gt;Object.prototype&lt;/code&gt; 的原型 &lt;code&gt;null&lt;/code&gt;。这种属性查找的方式我们称之为原型链。&lt;/p&gt;
&lt;h1 id=&quot;类的实现&quot;&gt;&lt;a href=&quot;#类的实现&quot; class=&quot;headerlink&quot; title=&quot;类的实现&quot;&gt;&lt;/a&gt;类的实现&lt;/h1&gt;&lt;p&gt;由于 JavaScript 本身是没有的类的感念的。所以我们如果要实现一个类，一般是通过构造函数来模拟类的实现：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;//实现一个类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//通过 new 来新建实例&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先新建一个 &lt;code&gt;Person&lt;/code&gt; 的构造函数，为了和一般的函数区别，我们会使用 CamelCase 方式来命名构造函数。&lt;br&gt;然后通过 &lt;code&gt;new&lt;/code&gt; 操作符来创建实例，&lt;code&gt;new&lt;/code&gt; 操作符其实干了这么几件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个继承自 &lt;code&gt;Person.prototype&lt;/code&gt; 的新对象&lt;/li&gt;
&lt;li&gt;构造函数 &lt;code&gt;Person&lt;/code&gt; 执行时，相应的参数传入，同时上下文被指定为这个新建的对象。&lt;/li&gt;
&lt;li&gt;如果构造函数返回了一个对象，那么这个对象会取代 &lt;code&gt;new&lt;/code&gt; 的结果。如果构造函数返回的不是对象，则会忽略这个返回值。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;返回值不是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;person&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you 的值: Person &amp;#123;name: &quot;you&quot;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;返回值是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you的值: [1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果类的实例需要共享类的方法，那么就需要给构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性添加方法了。因为 &lt;code&gt;new&lt;/code&gt; 操作符创建的对象都继承自构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性。他们可以共享定义在类 &lt;code&gt;prototype&lt;/code&gt; 上的方法和属性。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayName: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;My name is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; me = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;me&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.sayName()   &lt;span class=&quot;comment&quot;&gt;// My name is you.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;me.sayName()    &lt;span class=&quot;comment&quot;&gt;// My name is me.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;继承的实现&quot;&gt;&lt;a href=&quot;#继承的实现&quot; class=&quot;headerlink&quot; title=&quot;继承的实现&quot;&gt;&lt;/a&gt;继承的实现&lt;/h1&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="inherit" scheme="http://kisnows.com/tags/inherit/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署到VPS并启用HTTPS</title>
    <link href="http://kisnows.com/2016/03/10/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0VPS%E5%B9%B6%E5%90%AF%E7%94%A8HTTPS/"/>
    <id>http://kisnows.com/2016/03/10/Hexo部署到VPS并启用HTTPS/</id>
    <published>2016-03-10T13:12:49.000Z</published>
    <updated>2016-12-09T10:31:39.362Z</updated>
    
    <content type="html">&lt;p&gt;上周买了个 VPS 玩 ，从板瓦工买的，一年的 19 刀。性价比还算合适，这是配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;10 GB SSD RAID-10 Disk Space&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;256 MB RAM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500 GB Transfer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Gigabit port&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Multiple locations&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是&lt;a href=&quot;https://bandwagonhost.com/aff.php?aff=7249&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;购买链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;买过来，先是搭了个 SS 解决科学上网的问题。然后想想要不要把博客也迁移过去算了,一个 ss 又用不了多少流量。于是说干就干，一番搜索查询后，达成成就。&lt;/p&gt;
&lt;p&gt;简单的记录下操作的步骤：&lt;/p&gt;
&lt;h1 id=&quot;客户端：&quot;&gt;&lt;a href=&quot;#客户端：&quot; class=&quot;headerlink&quot; title=&quot;客户端：&quot;&gt;&lt;/a&gt;客户端：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;配置 ssh&lt;/li&gt;
&lt;li&gt;本地部署 hexo&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;服务器：&quot;&gt;&lt;a href=&quot;#服务器：&quot; class=&quot;headerlink&quot; title=&quot;服务器：&quot;&gt;&lt;/a&gt;服务器：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;安装所需软件&lt;br&gt; a. Git&lt;br&gt; b. Nginx&lt;/li&gt;
&lt;li&gt;为了安全与方便，新建专用与部署 hexo 的用户git，并给予相应权限。&lt;/li&gt;
&lt;li&gt;配置 ssh，与客户端达成通道&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置 git hooks，这样本地在 hexo 部署到服务器 git 用户的对应仓库后就不用在把它复制到用以访问的网站的文件夹了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GIT_REPO=/home/git/hexo.git &lt;span class=&quot;comment&quot;&gt;#git仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TMP_GIT_CLONE=/tmp/hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PUBLIC_WWW=/var/www/hexo &lt;span class=&quot;comment&quot;&gt;#网站目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;GIT_REPO&amp;#125;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;/* &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置nginx，并启动nginx服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;访问 vps 地址，直接显示403 forbidden，以为是权限问题，网上查了半天也没解决。最后发现用于网站的目录下是空的。&lt;/li&gt;
&lt;li&gt;由问题1推断出，Git hooks 压根没起作用。因为用于放网站文件夹下一直都是空的，于是手动试git hooks 下面的命令，执行到 rm -rf ${PUBLIC_WWW}的时候，系统提示操作被拒绝，发现是权限问题，赋予git用户用于放网站的 &lt;code&gt;www/hexo&lt;/code&gt; 的权限。&lt;/li&gt;
&lt;li&gt;ssh 在服务器重启后出现问题，多方排查后发现也是权限问题，赋予 git 用户.ssh 文件 700 权限&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输入 www.kisnows.com ，访问成功，哈哈，好开心。而且国内访问速度比原来快了一点点，虽然就那么一点点。&lt;/p&gt;
&lt;p&gt;想想也上个 SSL 吧，不然太落后了，毕竟最近电信劫持很严重。因为不想投入过大成本，就打算用 cloudFlare 提供的免费 SSL。虽然只是浏览器到 cloudFlare 之间是加密的，但是有总比没有强嘛。&lt;br&gt;于是把 DNS 服务从 DNSPod 切换到了cloudFlare，并借助 cloudFlare 全站启用了 HTTPS，同时将顶级域名重定向到了www 下的二级域名。方法如下：&lt;/p&gt;
&lt;h2 id=&quot;启用HTTPS&quot;&gt;&lt;a href=&quot;#启用HTTPS&quot; class=&quot;headerlink&quot; title=&quot;启用HTTPS&quot;&gt;&lt;/a&gt;启用HTTPS&lt;/h2&gt;&lt;p&gt;进入 cloudFlare 管理中心，Crypto下&lt;br&gt;&lt;img src=&quot;/imgs/Hexo部署到VPS并启用HTTPS/ssl.png&quot; alt=&quot;ssl&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;强制非HTTPS访问跳转到HTTPS&quot;&gt;&lt;a href=&quot;#强制非HTTPS访问跳转到HTTPS&quot; class=&quot;headerlink&quot; title=&quot;强制非HTTPS访问跳转到HTTPS&quot;&gt;&lt;/a&gt;强制非HTTPS访问跳转到HTTPS&lt;/h2&gt;&lt;p&gt;位于 Page Rules 模块下&lt;br&gt;&lt;img src=&quot;/imgs/Hexo部署到VPS并启用HTTPS/pagerules.png&quot; alt=&quot;ssl&quot;&gt;&lt;br&gt;上图1，选 always use https，然后如图第一条规则，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://*.kisnows.com/*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样所有匹配的所有访问，都会走 https 了。&lt;/p&gt;
&lt;h2 id=&quot;顶级域名重定向到带-www-的二级域名下&quot;&gt;&lt;a href=&quot;#顶级域名重定向到带-www-的二级域名下&quot; class=&quot;headerlink&quot; title=&quot;顶级域名重定向到带 www 的二级域名下&quot;&gt;&lt;/a&gt;顶级域名重定向到带 www 的二级域名下&lt;/h2&gt;&lt;p&gt;也是用 Page Rules，如上图2。选 Forwarding，然后匹配如下填写就OK了：&lt;br&gt;&lt;img src=&quot;/imgs/Hexo部署到VPS并启用HTTPS/redirect.png&quot; alt=&quot;redirect&quot;&gt;&lt;br&gt;Forwarding 中的 &lt;code&gt;$1&lt;/code&gt; 就是 &lt;code&gt;kisnows.com/*&lt;/code&gt; 中 &lt;code&gt;*&lt;/code&gt; 匹配到元素。&lt;/p&gt;
&lt;p&gt;至此，为期两天的折腾完毕，全站迁移到了 VPS，并全程启用 HTTPS。&lt;br&gt;真是生命不息，折腾不止啊！&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br&gt;&lt;a href=&quot;http://tiktoking.github.io/2016/01/26/hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tiktoking.github.io/2016/01/26/hexo/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.hansoncoder.com/2016/03/02/VPS%20building%20Hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hansoncoder.com/2016/03/02/VPS%20building%20Hexo/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://hejun.me/2015/01/05/deploy-hexo-on-cloud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hejun.me/2015/01/05/deploy-hexo-on-cloud/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上周买了个 VPS 玩 ，从板瓦工买的，一年的 19 刀。性价比还算合适，这是配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;10 GB SSD RAID-10 Disk Space&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;256 MB RAM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500 GB Transfer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Gigabit port&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Multiple locations&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是&lt;a href=&quot;https://bandwagonhost.com/aff.php?aff=7249&quot;&gt;购买链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;买过来，先是搭了个 SS 解决科学上网的问题。然后想想要不要把博客也迁移过去算了,一个 ss 又用不了多少流量。于是说干就干，一番搜索查询后，达成成就。&lt;/p&gt;
&lt;p&gt;简单的记录下操作的步骤：&lt;/p&gt;
&lt;h1 id=&quot;客户端：&quot;&gt;&lt;a href=&quot;#客户端：&quot; class=&quot;headerlink&quot; title=&quot;客户端：&quot;&gt;&lt;/a&gt;客户端：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;配置 ssh&lt;/li&gt;
&lt;li&gt;本地部署 hexo&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;服务器：&quot;&gt;&lt;a href=&quot;#服务器：&quot; class=&quot;headerlink&quot; title=&quot;服务器：&quot;&gt;&lt;/a&gt;服务器：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;安装所需软件&lt;br&gt; a. Git&lt;br&gt; b. Nginx&lt;/li&gt;
&lt;li&gt;为了安全与方便，新建专用与部署 hexo 的用户git，并给予相应权限。&lt;/li&gt;
&lt;li&gt;配置 ssh，与客户端达成通道&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置 git hooks，这样本地在 hexo 部署到服务器 git 用户的对应仓库后就不用在把它复制到用以访问的网站的文件夹了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GIT_REPO=/home/git/hexo.git &lt;span class=&quot;comment&quot;&gt;#git仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TMP_GIT_CLONE=/tmp/hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PUBLIC_WWW=/var/www/hexo &lt;span class=&quot;comment&quot;&gt;#网站目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;GIT_REPO&amp;#125;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;/* &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置nginx，并启动nginx服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h2&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网站建设" scheme="http://kisnows.com/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 缓存</title>
    <link href="http://kisnows.com/2016/03/07/http-cache/"/>
    <id>http://kisnows.com/2016/03/07/http-cache/</id>
    <published>2016-03-07T12:57:46.000Z</published>
    <updated>2016-04-27T14:32:17.809Z</updated>
    
    <content type="html">&lt;p&gt;下午意外的接到了阿里钉钉前端的面试，很是欣喜。&lt;br&gt;面试内容从做的项目，到使用的技术 Angular、React、Express 等，让我感觉到自己的理解还是不够深刻。&lt;br&gt;比如我说我喜欢 React，大项目中需要配合 Redux 来用处理数据，然后就问到 Redux 到底解决了哪些问题，我没能清楚的答上来。但是整体上，面试的前面部分，自我感觉还是很不错的。&lt;br&gt;但是到最后，面试官说问一个比较基础的问题：如何在HTTP协议中控制缓存？&lt;br&gt;我懵了，平时工作中根本接触不到。只能凭自己感觉说，从文件名的更改以及在 HTTP 的 header 中设置相应参数来设置，但具体怎样设置，设置的内容是什么，我完全答不上来。感觉肯定是要挂在这里。不过俗话说的好，人不能在同一个地方跌到两次，谨以此篇记录HTTP缓存的相应内容。&lt;/p&gt;
&lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt;HTTP 控制缓存主要有一下几种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expires&lt;/li&gt;
&lt;li&gt;Cache-Control&lt;/li&gt;
&lt;li&gt;Last-Modified/If-Modified-Since&lt;/li&gt;
&lt;li&gt;Etag/If-None-Match&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来，就一个一个来了解。&lt;/p&gt;
&lt;h2 id=&quot;Expires&quot;&gt;&lt;a href=&quot;#Expires&quot; class=&quot;headerlink&quot; title=&quot;Expires&quot;&gt;&lt;/a&gt;Expires&lt;/h2&gt;&lt;p&gt;过期时间，有点类似于 cookies 里面的 Expires。可以在 header 中设置一个具体的过期时间，在这个过期时间内，浏览器都不会向服务器请求这个文件，会直接存本地的缓存中读取。&lt;br&gt;&lt;img src=&quot;/imgs/http-cache/headers.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;上图是我博客中一个 js 文件的 HTTP header，可以看到其中红框1 Expires 设置为当前 Date 的4个小时后，也就是说正常情况这个文件在 Expires 这个时间点以前的请求都会直接使用本地缓存，而不用从服务端重新获取。&lt;br&gt;需要注意的是，Expires 是 HTTP 1.0 的东西，现在绝大多数浏览器都默认使用 HTTP 1.1，所以用 Expires 控制缓存不是首选的方法。&lt;/p&gt;
&lt;h2 id=&quot;Cache-control&quot;&gt;&lt;a href=&quot;#Cache-control&quot; class=&quot;headerlink&quot; title=&quot;Cache-control&quot;&gt;&lt;/a&gt;Cache-control&lt;/h2&gt;&lt;p&gt;Cache-control 与 Expires 作用基本相同，都是标志出当前资源的有效期，以此来控制浏览器是使用本地缓存还是从服务器重新获取资源。不过，不同的地方在于，Cache-control 能够控制的更加细致，当header中同时存在 Expires 时，Cache-control 的优先级要更高一些。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP协议头 Cache-Control 的值可以是 public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age&lt;br&gt;各个消息中的指令含义如下：&lt;br&gt;    Public      指示响应可被任何缓存区缓存。&lt;br&gt;    Private     指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。&lt;br&gt;    no-cache    指示请求或响应消息不能缓存&lt;br&gt;    no-store    用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。&lt;br&gt;    &lt;strong&gt;max-age&lt;/strong&gt;   &lt;strong&gt;指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。&lt;/strong&gt;&lt;br&gt;    min-fresh   指示客户机可以接收响应时间小于当前时间加上指定时间的响应。&lt;br&gt;    max-stale   指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/http-cache/headers.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;如图，红框2上面的 Cache-Control 这一栏，值为 public，max-age=14400. 就是说它的有效期是 14400s，也就是4h，和上面的 Expires 的过期时间是一样的，但是它不像 Expires 那样必须给一个类似 Mon，07 Mar 2016 17:14:33 GMT 这样具体的时间，只需要给定一个最大寿命的时间就可以了。这个应该是比较常用的方法。&lt;/p&gt;
&lt;h2 id=&quot;Last-Modified-If-Modified-Since&quot;&gt;&lt;a href=&quot;#Last-Modified-If-Modified-Since&quot; class=&quot;headerlink&quot; title=&quot;Last-Modified/If-Modified-Since&quot;&gt;&lt;/a&gt;Last-Modified/If-Modified-Since&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Last-Modified&lt;/strong&gt;         表示这个资源的最后修改时间，服务器在相应请求时，会告诉浏览器此资源的最后修改时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If-Modified-Since&lt;/strong&gt;     发送HTTP请求时，浏览器会把缓存资源的最后修改时间一起发送到服务器去，服务器会用这个时间与服务器上实际文件的最后修改事件进行对比。如果时间一致，则返回 HTTP 状态码 304，浏览器接收到后会直接显示缓存的文件。如果时间不一致，则返回 HTTP 状态码 200 和新的文件内容，浏览器拿到文件后会丢掉本地旧文件，缓存新文件并展示出来。要注意的是 Last-Modified/If-Modified-Since 需要配合 Cache-control 使用，只有当本地的资源过期时（即超过了max-age 定义的时间），才会向服务器发送相应的带有 If-Modified-Since 的请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Etag-If-None-Match&quot;&gt;&lt;a href=&quot;#Etag-If-None-Match&quot; class=&quot;headerlink&quot; title=&quot;Etag/If-None-Match&quot;&gt;&lt;/a&gt;Etag/If-None-Match&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Etag/If-None-Match&lt;/strong&gt;   同样需要配合 Cache-control 使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etag&lt;/strong&gt;     服务器相应浏览器请求时，会告诉浏览器当前资源在服务的唯一标识，标识规则有服务器决定。If-None-Match 当资源过期时（即超过了max-age 定义的时间），发现资源具有 Etag 声明，则在再次向服务器发送求情时带上 If-None-Match（即本地缓存资源的 Etag 值）。服务器收到请求后如果发现有 If-None-Match 则与服务端被请求资源的 Etag 进行比对，如果相同则说明资源无更改并返回 304，否则返回 200 和新的资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这四种方式的优先级可以通过一张图来说明：&lt;br&gt;&lt;img src=&quot;/imgs/http-cache/priority.png&quot; alt=&quot;3&quot;&gt;&lt;br&gt;&lt;a href=&quot;HTTP://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片来自&lt;/a&gt;&lt;br&gt;可以看到 Etag 的优先级是大于 Last-Modified 的。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br&gt;1.&lt;a href=&quot;HTTP://www.cnblogs.com/skynet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器缓存机制&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;HTTP://www.path8.net/tn/archives/2745&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器缓存相关的HTTP头介绍:Expires,Cache-Control,Last-Modified,ETag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;HTTP://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP的请求头标签 If-Modified-Since&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下午意外的接到了阿里钉钉前端的面试，很是欣喜。&lt;br&gt;面试内容从做的项目，到使用的技术 Angular、React、Express 等，让我感觉到自己的理解还是不够深刻。&lt;br&gt;比如我说我喜欢 React，大项目中需要配合 Redux 来用处理数据，然后就问到 Redux 到底解决了哪些问题，我没能清楚的答上来。但是整体上，面试的前面部分，自我感觉还是很不错的。&lt;br&gt;但是到最后，面试官说问一个比较基础的问题：如何在HTTP协议中控制缓存？&lt;br&gt;我懵了，平时工作中根本接触不到。只能凭自己感觉说，从文件名的更改以及在 HTTP 的 header 中设置相应参数来设置，但具体怎样设置，设置的内容是什么，我完全答不上来。感觉肯定是要挂在这里。不过俗话说的好，人不能在同一个地方跌到两次，谨以此篇记录HTTP缓存的相应内容。&lt;/p&gt;
&lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt;HTTP 控制缓存主要有一下几种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expires&lt;/li&gt;
&lt;li&gt;Cache-Control&lt;/li&gt;
&lt;li&gt;Last-Modified/If-Modified-Since&lt;/li&gt;
&lt;li&gt;Etag/If-None-Match&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来，就一个一个来了解。&lt;/p&gt;
&lt;h2 id=&quot;Expires&quot;&gt;&lt;a href=&quot;#Expires&quot; class=&quot;headerlink&quot; title=&quot;Expires&quot;&gt;&lt;/a&gt;Expires&lt;/h2&gt;&lt;p&gt;过期时间，有点类似于 cookies 里面的 Expires。可以在 header 中设置一个具体的过期时间，在这个过期时间内，浏览器都不会向服务器请求这个文件，会直接存本地的缓存中读取。&lt;br&gt;&lt;img src=&quot;/imgs/http-cache/headers.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;上图是我博客中一个 js 文件的 HTTP header，可以看到其中红框1 Expires 设置为当前 Date 的4个小时后，也就是说正常情况这个文件在 Expires 这个时间点以前的请求都会直接使用本地缓存，而不用从服务端重新获取。&lt;br&gt;需要注意的是，Expires 是 HTTP 1.0 的东西，现在绝大多数浏览器都默认使用 HTTP 1.1，所以用 Expires 控制缓存不是首选的方法。&lt;/p&gt;
&lt;h2 id=&quot;Cache-control&quot;&gt;&lt;a href=&quot;#Cache-control&quot; class=&quot;headerlink&quot; title=&quot;Cache-control&quot;&gt;&lt;/a&gt;Cache-control&lt;/h2&gt;&lt;p&gt;Cache-control 与 Expires 作用基本相同，都是标志出当前资源的有效期，以此来控制浏览器是使用本地缓存还是从服务器重新获取资源。不过，不同的地方在于，Cache-control 能够控制的更加细致，当header中同时存在 Expires 时，Cache-control 的优先级要更高一些。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTTP" scheme="http://kisnows.com/tags/http/"/>
    
      <category term="缓存" scheme="http://kisnows.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Postman 的简单使用</title>
    <link href="http://kisnows.com/2016/02/26/simple-use-of-postman/"/>
    <id>http://kisnows.com/2016/02/26/simple-use-of-postman/</id>
    <published>2016-02-26T13:51:47.000Z</published>
    <updated>2016-04-02T03:37:51.399Z</updated>
    
    <content type="html">&lt;p&gt;Postman 是一款用来测试 WEB 接口的工具，可以简单的发送 GET 、POST、PUT、DELETE 等请求，可以在 chrome 商店里面搜索安装。&lt;br&gt;为了介绍它的功能，首先本地起一个服务器：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; querystring = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;querystring&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;content-type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;text/json&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.method === &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; params = url.parse(req.url, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;).query;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.write(params.name + &lt;span class=&quot;string&quot;&gt;&#39; is &#39;&lt;/span&gt; + params.age + &lt;span class=&quot;string&quot;&gt;&#39; years old&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resDate = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    req&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        resDate.push(chunk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; params = querystring.parse(resDate.join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.write(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(params));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(e)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8088&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Server listen at localhost:8088&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用来监听 POST 和 GET 请求，并返回相应的数据。&lt;br&gt;接下来打开 Postman ，界面很简洁，所有的功能都在图上标注了出来&lt;br&gt;&lt;img src=&quot;/imgs/simple-use-of-postman.png&quot; alt=&quot;postman&quot;&gt;&lt;br&gt;上图是模拟 post 请求，填好要发送的参数，点击 send ，就可以看到返回了正确的结果&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;moqiao&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;23&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;GET 请求同理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Postman 是一款用来测试 WEB 接口的工具，可以简单的发送 GET 、POST、PUT、DELETE 等请求，可以在 chrome 商店里面搜索安装。&lt;br&gt;为了介绍它的功能，首先本地起一个服务器：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Postman" scheme="http://kisnows.com/tags/postman/"/>
    
      <category term="调试工具" scheme="http://kisnows.com/tags/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>用ES6重构fullPage</title>
    <link href="http://kisnows.com/2016/02/21/fullpage-js-es6/"/>
    <id>http://kisnows.com/2016/02/21/fullpage-js-es6/</id>
    <published>2016-02-21T14:18:09.000Z</published>
    <updated>2016-04-13T13:11:21.443Z</updated>
    
    <content type="html">&lt;p&gt;用 ES6 重写了 &lt;a href=&quot;https://github.com/kisnows/fullpage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullpage-light.js&lt;/a&gt;。&lt;br&gt;主要做了一下修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化：将整个文件问个成多个独立的模块，每个模块负责一个功能&lt;/li&gt;
&lt;li&gt;新语法：替换一些新的语法，比如变量声明的 let,const,Object.assign 等&lt;/li&gt;
&lt;li&gt;转码：因为目前浏览器还并不支持 ES2015,所以还需要用 Babel 做一下转码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;p&gt;根据功能，将整个文件分割成为了五个模块。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-bootstrap.js   //方法和功能&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-constant.js    //一些常量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-event.js       //绑定的事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-index.js       //入口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-utils.js       //工具函数&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样原来一个很大文件就被分割成为了五个独立的模块，每个模块只负责自己的功能就好，维护起来会方便很多。&lt;/p&gt;
&lt;h2 id=&quot;新语法&quot;&gt;&lt;a href=&quot;#新语法&quot; class=&quot;headerlink&quot; title=&quot;新语法&quot;&gt;&lt;/a&gt;新语法&lt;/h2&gt;&lt;p&gt;除了用了 let,const 这个声明变量的关键字外，最主要还用 Object.assign 这个方法替换了下面这个函数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 扩展 Option 对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Default 默认设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Customize 自定义设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @returns &amp;#123;Object&amp;#125; Default 扩展后的设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extendOption&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Default, Customize&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; Customize !== &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Customize = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Customize) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Default.hasOwnProperty(i)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Default[i] = Customize[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Default;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; options = extendOption(defaults, Customize);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;options = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, defaults, Customize);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;既然用到了Object.assign，就来说说它吧。参考MDN上的定义：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Object.assign() 方法可以把任意多个的源对象所拥有的自身可枚举属性拷贝给目标对象，然后返回目标对象。&lt;br&gt;Object.assign(target, …sources)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，它可以把…sources包含对象上所有可枚举的属性，复制到目标对象。这样浅拷贝一个对象就很容易了。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;a:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,b:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;,obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(copy);&lt;span class=&quot;comment&quot;&gt;//Object &amp;#123;a: 1, b: 2&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时也可以用来合并若干的对象&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123;a:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &amp;#123;b:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &amp;#123;c:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;,a,b,c)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;copy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt; &amp;#123;a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是需要注意的是继承属性和不可枚举属性是不能拷贝的，如果你尝试这么做，会发现虽然语句不会报错，但是继承属性和不可枚举的属性并没有拷贝成功。&lt;br&gt;兼容性上，目前 chrome 已经支持这个属性了，上面的例子都是在 chrome 控制台上实验过的。&lt;/p&gt;
&lt;h2 id=&quot;转码&quot;&gt;&lt;a href=&quot;#转码&quot; class=&quot;headerlink&quot; title=&quot;转码&quot;&gt;&lt;/a&gt;转码&lt;/h2&gt;&lt;p&gt;因为现在浏览器大多还不支持 ES2015 的语法，所以webpack+Babel 来将代码转换为 ES5 的语法。这样，就可以直接在现代浏览器里面使用了。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;ES6 带来了很大的改进。比如 let 和 const 的块级作用域可以避免一些坑，合理使用箭头函数也可提高代码的可读性，以及 class,promise,module 等新特性，可以大大提高编程的快感。&lt;br&gt;虽然目前兼容性上还是有很多问题，但是有 babel 转码器的存在，也算是可以逐步从 ES3 和 ES5 过渡到 ES2015 了，尤其是最近在尝试用 React，发现用 ES2015 简直爽的飞起。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;用 ES6 重写了 &lt;a href=&quot;https://github.com/kisnows/fullpage&quot;&gt;fullpage-light.js&lt;/a&gt;。&lt;br&gt;主要做了一下修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化：将整个文件问个成多个独立的模块，每个模块负责一个功能&lt;/li&gt;
&lt;li&gt;新语法：替换一些新的语法，比如变量声明的 let,const,Object.assign 等&lt;/li&gt;
&lt;li&gt;转码：因为目前浏览器还并不支持 ES2015,所以还需要用 Babel 做一下转码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;p&gt;根据功能，将整个文件分割成为了五个模块。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-bootstrap.js   //方法和功能&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-constant.js    //一些常量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-event.js       //绑定的事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-index.js       //入口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-utils.js       //工具函数&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样原来一个很大文件就被分割成为了五个独立的模块，每个模块只负责自己的功能就好，维护起来会方便很多。&lt;/p&gt;
&lt;h2 id=&quot;新语法&quot;&gt;&lt;a href=&quot;#新语法&quot; class=&quot;headerlink&quot; title=&quot;新语法&quot;&gt;&lt;/a&gt;新语法&lt;/h2&gt;&lt;p&gt;除了用了 let,const 这个声明变量的关键字外，最主要还用 Object.assign 这个方法替换了下面这个函数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 扩展 Option 对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Default 默认设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Customize 自定义设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @returns &amp;#123;Object&amp;#125; Default 扩展后的设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extendOption&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Default, Customize&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; Customize !== &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Customize = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Customize) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Default.hasOwnProperty(i)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Default[i] = Customize[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Default;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; options = extendOption(defaults, Customize);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;options = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, defaults, Customize);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;既然用到了Object.assign，就来说说它吧。参考MDN上的定义：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>手机上键盘弹出时的一些问题</title>
    <link href="http://kisnows.com/2016/01/12/%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98%E8%A6%86%E7%9B%96%E5%BC%B9%E7%AA%97%E9%97%AE%E9%A2%98/"/>
    <id>http://kisnows.com/2016/01/12/解决手机键盘覆盖弹窗问题/</id>
    <published>2016-01-12T12:27:52.000Z</published>
    <updated>2016-04-02T03:37:51.416Z</updated>
    
    <content type="html">&lt;p&gt;做手机商城接到一个需求。&lt;br&gt;具体大概是这样子的，要求用户点击购买按钮后，直接显示输入密码的弹窗并弹出键盘。&lt;br&gt;拿到需求一想，这挺简单的。&lt;br&gt;就麻利的写了个模拟的密码输入框，然后在用户点击购买按钮的时候让他弹出来，并且让焦点 focus 在 input 框上。&lt;br&gt;Chrome 上一试，完全没问题，觉得自己简直太棒了有没有。可是拿出自己的手机一试，oh no ~,键盘直接把页面给推了上去，导致完全看不到弹窗弹的是个什么东西。&lt;br&gt;&lt;img src=&quot;/imgs/2016-01-12-1.png&quot; alt=&quot;解决前&quot;&gt;&lt;br&gt;但是在 Android 上是没有任何问题的。观察了下是因为 Android 和 ios 上键盘弹出的行为是不一样的，Android 上键盘弹出来，直接覆盖在原来的页面上，而 ios 上键盘弹出来的时候会直接把整个页面推上去。&lt;br&gt;怎么解决呢？其实也挺好解决，就是针对不同系统 hack 一下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;购买页面这个弹窗的定位是这么定位的：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 后面的遮罩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.dialog-wrap&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: 100%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 100%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: rgba(0,0,0,.7);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 密码输入框&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.password-dialog&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    top: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    left: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bottom: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    right: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    margin: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在弹窗弹出的时候，判断当前设备是 Android 还是 ios ，如果是 ios 设备，调整一下密码输入框定位就 OK 了。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$$(&lt;span class=&quot;string&quot;&gt;&#39;.go-buy&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    showPassword();     &lt;span class=&quot;comment&quot;&gt;//调出弹窗&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!device.android)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  如果不是安卓，那就调整定位&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $$(&lt;span class=&quot;string&quot;&gt;&#39;.password-dialog&#39;&lt;/span&gt;).css(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;top&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;initial&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;bottom&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;20px&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终就达到了目标，&lt;br&gt;&lt;img src=&quot;/imgs/2016-01-12-2.png&quot; alt=&quot;解决后&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前也遇到过类似的问题，比如页面上有一个输入框，在 Android 上点击输入框调出键盘的时候，因为键盘不会把页面推上去，导致如果这个输入框在当前页面比较靠下的位置，就可能被弹出的键盘覆盖掉，看不到当前选中的输入框，影响用户体验。解决方法其实也很简单，就是当点击输入框弹出键盘的时候，调整页面 scrollTop 值，让页面的可视区域刚好滚动到输入框这一块，也就解决了这个问题。&lt;/p&gt;
&lt;p&gt;这些坑，在事后看起来都很简单，然而当刚遇到的时候就是不知道怎么解决。比如密码输入框那个，当时总是在想怎么才能让键盘不把页面推上去，如果从这个角度去想解决办法那恐怕很难想出办法来，因为手机操作系统在实现的时候人家就那么规定了，你总不能用 js 去改这个键盘弹出方式吧，除非你写个模拟键盘，但那就是舍近求远了。但是如果换个角度，从调整页面上元素定位来解决，那就很简单了。&lt;br&gt;所以碰到问题，一定要从多种角度去想解决办法，这样才能更容易的找到问题的解决办法。一定要放开眼界，放开眼界啊！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;做手机商城接到一个需求。&lt;br&gt;具体大概是这样子的，要求用户点击购买按钮后，直接显示输入密码的弹窗并弹出键盘。&lt;br&gt;拿到需求一想，这挺简单的。&lt;br&gt;就麻利的写了个模拟的密码输入框，然后在用户点击购买按钮的时候让他弹出来，并且让焦点 focus 在 input 框上。&lt;br&gt;Chrome 上一试，完全没问题，觉得自己简直太棒了有没有。可是拿出自己的手机一试，oh no ~,键盘直接把页面给推了上去，导致完全看不到弹窗弹的是个什么东西。&lt;br&gt;&lt;img src=&quot;/imgs/2016-01-12-1.png&quot; alt=&quot;解决前&quot;&gt;&lt;br&gt;但是在 Android 上是没有任何问题的。观察了下是因为 Android 和 ios 上键盘弹出的行为是不一样的，Android 上键盘弹出来，直接覆盖在原来的页面上，而 ios 上键盘弹出来的时候会直接把整个页面推上去。&lt;br&gt;怎么解决呢？其实也挺好解决，就是针对不同系统 hack 一下。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="手机开发" scheme="http://kisnows.com/tags/%E6%89%8B%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    
      <category term="ios" scheme="http://kisnows.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>2015年终总结</title>
    <link href="http://kisnows.com/2015/12/30/2015-year-end-summary/"/>
    <id>http://kisnows.com/2015/12/30/2015-year-end-summary/</id>
    <published>2015-12-30T15:49:23.000Z</published>
    <updated>2016-04-13T13:04:26.281Z</updated>
    
    <content type="html">&lt;h1 id=&quot;来到杭州&quot;&gt;&lt;a href=&quot;#来到杭州&quot; class=&quot;headerlink&quot; title=&quot;来到杭州&quot;&gt;&lt;/a&gt;来到杭州&lt;/h1&gt;&lt;p&gt;回想一下二月二十八号怀着忐忑的心来到杭州。&lt;/p&gt;
&lt;p&gt;那天天还下着大雨，我从机场出来一路大巴加地铁到滨江区。出了地铁站，站口一个三轮师傅一看我拉一个行李箱，明显外地人，隔老远就吆喝，走不走！想想我怎么也是有导航的人，怎么能让你们坑。然后就跟着导航找酒店，结果怎么找也找不到，就在目的地旁边转来转去，问路人也没人听过酒店名，我一度认为是不是订的酒店有问题。最后无奈，又跑回地铁口，掏了二十块上了三轮，结果五分钟就开到了，其实那酒店距离地铁口也就不到一公里，因为下雨视线不好所以我一直找不到。到了酒店，收拾了一下发现行李箱都被雨水打湿了，赶紧打开看了一下，还好，只有基本放在外面的书有点潮，衣服什么的还是干的。洗了个澡，就出去感受这个被誉为人间天堂的陌生城市了。不得不说，杭州城市真的很干净，而且绿化也很好，但是雨真的真的太多了&lt;/p&gt;
&lt;h1 id=&quot;找房子&quot;&gt;&lt;a href=&quot;#找房子&quot; class=&quot;headerlink&quot; title=&quot;找房子&quot;&gt;&lt;/a&gt;找房子&lt;/h1&gt;&lt;p&gt;到一个新的城市工作，首要的事情就是找房子。说道找房子，不得不说这是一个非常痛苦的过程。&lt;/p&gt;
&lt;p&gt;从好友三月初来到杭州开始找房子，找了差不多一星期的时间，最后还是在没办法，两个人第二天都要上班的情况随便找了一个两居室租了下来。这房间说好也还行，说不好那就是太吵了，尤其是天气很冷或者很热人们需要开空调的时候，那噪音，晚上不戴耳塞是没法睡觉的。睡眠质量不好大大影响我了日常工作和生活，可是由于种种原因，暂时又不能搬家，所以也就在各种噪音中度过了小一年时间。&lt;/p&gt;
&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;本来是拿到余杭区一家公司offer的，三月一号要去报到的。但是被我们现在的老大提前一天拉去面试，发的offer虽然薪水没给到位，甚至还不如另一家公司给的多情况，依然选择了现在的公司。为什么呢？也许我傻吧，至少现在看来当时我确实是傻。一个公司给你薪水的多少，也就是对你能力的认可有多少。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;整个工作内容，我还是可以轻松 hold 住的，从 PC 到 Mobile，大大小小也有成十个项目，虽然有时会有些棘手的问题，但是在老大的指点下还是轻松解决了。总体上来看，工作内容难度不大，非要说有难度，那也只有工作量上的难度，对这一点我已经无力吐槽了。公司也不知道是因为要上市还是什么原因，整体上都比较浮躁，以至于会出现说让三天搞完一个手机商城这种奇葩的事情。&lt;br&gt;不过工作归工作，不能因为工作难度不大，就忘了提升自己的技能。这一年时间里，大半的业余时间都用在给自己充电上了 。其实是因为周末只有自己一个人，完全不知道该干嘛，除了偶尔一个人去西湖边走走，也就只能写写代码，聊以慰藉了。&lt;/p&gt;
&lt;h1 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h1&gt;&lt;p&gt;年初凑了套厨具，像模像样的炒了几次菜，然后基本就再也没有进过厨房；&lt;/p&gt;
&lt;p&gt;六月份我投奔的好友因为网易加班过于严重离开了杭州，启程去了武汉，好友的离去伴随的是换了一个新的室友，爱养花养鱼，有时还会顿饭给我吃；&lt;/p&gt;
&lt;p&gt;一个人去游泳，泳池玩了一会出去上了个厕所，回来忘了带泳镜直接跳到深水区，然后睁眼一片浑浊，水性不好的我当时吓得连呛几口水，强行稳定情绪后努力游到了对岸。事后想想真是后怕，深水区那么多人，如果当时没能稳定紧张的情绪恰好安全员又没看到我，那我基本上 GG 了，以后一个人还是不要去深水区了；&lt;/p&gt;
&lt;p&gt;陪伴了自己四年的电脑突然散热风扇不转了，淘宝买了风扇装上，风扇是好了，结果屏幕不亮了，换了跟屏线依然没有什么用，只能剁手买了个23寸的显示器外接，不过屏大真心爽；&lt;/p&gt;
&lt;p&gt;下雨天早上上班时为了帮一个的哥推抛了锚的车而错过了公交，不过还好的哥免费把我送到了上班的地方；&lt;/p&gt;
&lt;p&gt;一个人跑去看电影，结果看的自己眼泪唰唰的，果然是随着年龄的增长，人也变得越来越感性了；&lt;/p&gt;
&lt;h1 id=&quot;展望2016&quot;&gt;&lt;a href=&quot;#展望2016&quot; class=&quot;headerlink&quot; title=&quot;展望2016&quot;&gt;&lt;/a&gt;展望2016&lt;/h1&gt;&lt;p&gt;2015年做为自己转行后的第一年，整体上对自己还是比较满意的，但是不能懈怠，要继续保持技术能力的增长，但同时也要提高自己的生活质量，毕竟工作是为了更好的生活嘛。&lt;/p&gt;
&lt;p&gt;在此给明年订个简单的规定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个月至少写一篇博客&lt;/li&gt;
&lt;li&gt;至少每两周看一次电影&lt;/li&gt;
&lt;li&gt;每两个月看一本书&lt;/li&gt;
&lt;li&gt;加强身体锻炼&lt;/li&gt;
&lt;li&gt;该追的美剧不能落下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然这些计划并不会执行，o(∩_∩)o 哈哈&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;来到杭州&quot;&gt;&lt;a href=&quot;#来到杭州&quot; class=&quot;headerlink&quot; title=&quot;来到杭州&quot;&gt;&lt;/a&gt;来到杭州&lt;/h1&gt;&lt;p&gt;回想一下二月二十八号怀着忐忑的心来到杭州。&lt;/p&gt;
&lt;p&gt;那天天还下着大雨，我从机场出来一路大巴加地铁到滨江区。出了地铁站，站口一个三轮师傅一看我拉一个行李箱，明显外地人，隔老远就吆喝，走不走！想想我怎么也是有导航的人，怎么能让你们坑。然后就跟着导航找酒店，结果怎么找也找不到，就在目的地旁边转来转去，问路人也没人听过酒店名，我一度认为是不是订的酒店有问题。最后无奈，又跑回地铁口，掏了二十块上了三轮，结果五分钟就开到了，其实那酒店距离地铁口也就不到一公里，因为下雨视线不好所以我一直找不到。到了酒店，收拾了一下发现行李箱都被雨水打湿了，赶紧打开看了一下，还好，只有基本放在外面的书有点潮，衣服什么的还是干的。洗了个澡，就出去感受这个被誉为人间天堂的陌生城市了。不得不说，杭州城市真的很干净，而且绿化也很好，但是雨真的真的太多了&lt;/p&gt;
&lt;h1 id=&quot;找房子&quot;&gt;&lt;a href=&quot;#找房子&quot; class=&quot;headerlink&quot; title=&quot;找房子&quot;&gt;&lt;/a&gt;找房子&lt;/h1&gt;&lt;p&gt;到一个新的城市工作，首要的事情就是找房子。说道找房子，不得不说这是一个非常痛苦的过程。&lt;/p&gt;
&lt;p&gt;从好友三月初来到杭州开始找房子，找了差不多一星期的时间，最后还是在没办法，两个人第二天都要上班的情况随便找了一个两居室租了下来。这房间说好也还行，说不好那就是太吵了，尤其是天气很冷或者很热人们需要开空调的时候，那噪音，晚上不戴耳塞是没法睡觉的。睡眠质量不好大大影响我了日常工作和生活，可是由于种种原因，暂时又不能搬家，所以也就在各种噪音中度过了小一年时间。&lt;/p&gt;
&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;本来是拿到余杭区一家公司offer的，三月一号要去报到的。但是被我们现在的老大提前一天拉去面试，发的offer虽然薪水没给到位，甚至还不如另一家公司给的多情况，依然选择了现在的公司。为什么呢？也许我傻吧，至少现在看来当时我确实是傻。一个公司给你薪水的多少，也就是对你能力的认可有多少。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://kisnows.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="年终总结" scheme="http://kisnows.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>react-v2ex</title>
    <link href="http://kisnows.com/2015/12/26/react-v2ex/"/>
    <id>http://kisnows.com/2015/12/26/react-v2ex/</id>
    <published>2015-12-25T16:11:25.000Z</published>
    <updated>2016-04-13T13:15:47.634Z</updated>
    
    <content type="html">&lt;p&gt;为了练手，用 react 写了个 v2ex 的首页：&lt;br&gt;&lt;a href=&quot;http://kisnows.com/react-v2ex/&quot;&gt;页面地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/kisnows/react-v2ex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个项目基础 &lt;code&gt;react&lt;/code&gt; 搭建，样式本来打算用 inlineStyle 来写的，但是发现写起来太累，于是还是用回到 &lt;code&gt;sass&lt;/code&gt;，最后用 &lt;code&gt;webpack&lt;/code&gt;来编译。本来想着看能不能直接调用 V 站的 API 来做一个纯前端的首页，所有的数据都用 ajax 来调，但是发现因为跨域的问题，前端无法拿到数据，也就放弃了，最终也只能是一个静态页面。&lt;/p&gt;
&lt;p&gt;说一下写代码中遇到的一些问题吧，首先整个项目的文件结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;│  .babelrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .editorconfig&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .eslintrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .gitignore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  package.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  readme.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  server.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  tree.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      hot.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      latest.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      bundle.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      CommunityStatus.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Footer.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Header.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Main.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      SearchInput.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      TopicsHot.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserLink.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserPanel.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─containers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      App.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─sass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _config.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _global.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _normalize.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _page.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _CommunityStatus.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Footer.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Header.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _TopicHot.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _UserPanel.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─static&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─images&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          qbar_light@2x.png&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└─utils&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getData.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;先说说用 react 写的优点，它火起来不是没有道理的，确实是有很多优点的，我这里只说实际码代码中的优点，不涉及 virtualDom 带来的性能提升之类的。&lt;/p&gt;
&lt;h3 id=&quot;结构清晰&quot;&gt;&lt;a href=&quot;#结构清晰&quot; class=&quot;headerlink&quot; title=&quot;结构清晰&quot;&gt;&lt;/a&gt;结构清晰&lt;/h3&gt;&lt;p&gt;因为 react 本身就是组件化的，所以整个页面按结构被分为几个组件，每个组件自己管理自己的展示和行为，最后通过容器组合起来，结构非常清晰。&lt;br&gt;组件的状态都是通过 state 或者 props 来控制，而我认为大多数组件只需要 props 就行了，只在顶层组件上控制 state，这样可以更加清晰的管理 state。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;易于维护&quot;&gt;&lt;a href=&quot;#易于维护&quot; class=&quot;headerlink&quot; title=&quot;易于维护&quot;&gt;&lt;/a&gt;易于维护&lt;/h3&gt;&lt;p&gt;因为结构清晰，所以可以预想到，这样是易于维护的。比如头部要改结构和样式，那就只改 Hearker.js 和对应 _Header.scss 就行了，或者要改逻辑，那只要修改 Hearker.js 中和 props 或者 state 相关的代码就行了，不用像以前那样在整个页面的逻辑里面去找这块的代码。&lt;br&gt;这根我目前维护的一些老项目来比，维护性上简直是天壤之别，再也不用愁找不到代码在哪改了，也不用吐槽那一串串的不知道干什么的 jquery 代码了。&lt;/p&gt;
&lt;h3 id=&quot;省去了模版引擎&quot;&gt;&lt;a href=&quot;#省去了模版引擎&quot; class=&quot;headerlink&quot; title=&quot;省去了模版引擎&quot;&gt;&lt;/a&gt;省去了模版引擎&lt;/h3&gt;&lt;p&gt;因为 react 可以说是自带了模版引擎，类似的 jade 或者 ejs 之类的模版引擎也就不需要了，类似这样拿到数据直接渲染就行了。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;Hot.map((topic, index) =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TopicsHotItem&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;...topic&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;index&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  )&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h2&gt;&lt;h3 id=&quot;组件划分大小的疑惑&quot;&gt;&lt;a href=&quot;#组件划分大小的疑惑&quot; class=&quot;headerlink&quot; title=&quot;组件划分大小的疑惑&quot;&gt;&lt;/a&gt;组件划分大小的疑惑&lt;/h3&gt;&lt;p&gt;一个页面到底要划分成几个部分？根据逻辑分还是根据页面布局分？组件分到那个层级？像V站的这个头部，是划分成一个组件还是三个？&lt;br&gt;&lt;img src=&quot;/imgs/react-v2ex-header.png&quot; alt=&quot;头部&quot;&gt;&lt;br&gt;当然这个可能不能算是缺点，可能是因为我经验不足以至于无法确定该如何化分。&lt;/p&gt;
&lt;h3 id=&quot;报错不友好&quot;&gt;&lt;a href=&quot;#报错不友好&quot; class=&quot;headerlink&quot; title=&quot;报错不友好&quot;&gt;&lt;/a&gt;报错不友好&lt;/h3&gt;&lt;p&gt;比如我 className 习惯性的写成了 class，然而console里面只是报了个 Did you mean className 的错，但是报不出来错在哪个文件，更不用指望报错在哪行了？只能自己去找，当项目大起来的时候，这个肯定很坑爹。&lt;br&gt;&lt;img src=&quot;/imgs/react-v2ex-error.png&quot; alt=&quot;报错&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;整体来说， react 写起来还是很爽的，而且有点也很明确，组件化·单向数据流·函数式编程，虽然有一些不成熟的问题，但是优点还是突出，如果可以的话，在一些小型项目里实际试水一下应该还是不错的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;为了练手，用 react 写了个 v2ex 的首页：&lt;br&gt;&lt;a href=&quot;http://kisnows.com/react-v2ex/&quot;&gt;页面地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/kisnows/react-v2ex&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个项目基础 &lt;code&gt;react&lt;/code&gt; 搭建，样式本来打算用 inlineStyle 来写的，但是发现写起来太累，于是还是用回到 &lt;code&gt;sass&lt;/code&gt;，最后用 &lt;code&gt;webpack&lt;/code&gt;来编译。本来想着看能不能直接调用 V 站的 API 来做一个纯前端的首页，所有的数据都用 ajax 来调，但是发现因为跨域的问题，前端无法拿到数据，也就放弃了，最终也只能是一个静态页面。&lt;/p&gt;
&lt;p&gt;说一下写代码中遇到的一些问题吧，首先整个项目的文件结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;│  .babelrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .editorconfig&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .eslintrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .gitignore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  package.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  readme.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  server.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  tree.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      hot.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      latest.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      bundle.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      CommunityStatus.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Footer.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Header.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Main.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      SearchInput.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      TopicsHot.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserLink.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserPanel.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─containers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      App.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─sass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _config.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _global.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _normalize.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _page.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _CommunityStatus.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Footer.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Header.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _TopicHot.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _UserPanel.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─static&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─images&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          qbar_light@2x.png&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└─utils&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getData.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;先说说用 react 写的优点，它火起来不是没有道理的，确实是有很多优点的，我这里只说实际码代码中的优点，不涉及 virtualDom 带来的性能提升之类的。&lt;/p&gt;
&lt;h3 id=&quot;结构清晰&quot;&gt;&lt;a href=&quot;#结构清晰&quot; class=&quot;headerlink&quot; title=&quot;结构清晰&quot;&gt;&lt;/a&gt;结构清晰&lt;/h3&gt;&lt;p&gt;因为 react 本身就是组件化的，所以整个页面按结构被分为几个组件，每个组件自己管理自己的展示和行为，最后通过容器组合起来，结构非常清晰。&lt;br&gt;组件的状态都是通过 state 或者 props 来控制，而我认为大多数组件只需要 props 就行了，只在顶层组件上控制 state，这样可以更加清晰的管理 state。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="React" scheme="http://kisnows.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>基于 Express+Gulp+BrowserSync 搭建高性能的前端开发环境</title>
    <link href="http://kisnows.com/2015/11/02/dev-environment-Express-Gulp-BrowserSync/"/>
    <id>http://kisnows.com/2015/11/02/dev-environment-Express-Gulp-BrowserSync/</id>
    <published>2015-11-02T12:45:23.000Z</published>
    <updated>2016-04-27T14:33:17.457Z</updated>
    
    <content type="html">&lt;p&gt;原文发布于&lt;a href=&quot;/2015/11/02/dev-environment-Express-Gulp-BrowserSync/&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么要搭这么一套框架&quot;&gt;&lt;a href=&quot;#为什么要搭这么一套框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭这么一套框架&quot;&gt;&lt;/a&gt;为什么要搭这么一套框架&lt;/h1&gt;&lt;p&gt;公司 Pc 端以前遗留的项目，都是基于jekyll+ruby-sass这一套比较老的技术搭建的。不过 jekyll 的模版继承加上 sass 强大预处理能力，同时配合 Grunt 做任务管理，一切还是很得心应手的。&lt;/p&gt;
&lt;p&gt;然而随着项目规模的急剧增大，这一套东西的速度是在是太慢了，一至于后来一旦这个项目有需要求要改我就头疼，倒不是说头疼需求怎么改，而是你随便改一个文件，从 jekyll 检测到改动到编译完 sass 到浏览器自动刷新，基本需要 40+ s，这完全不能接受。&lt;/p&gt;
&lt;p&gt;于是一直就打算新搭一套开发环境，刚好前段时间有个新项目，我就拿来操刀动手了，目前已经用它做了俩个项目下来，在原有基础上做了一些修改之后，已经完全可以替代原来那一套懂了。&lt;/p&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;得益于 node-sass 对 ruby-sass 在编译速度上的碾压以及被 jade 完爆的 jekyll。现在项目中从文件变动=&amp;gt;编译完成=&amp;gt;浏览器自动刷新，整个过程在 1s 左右，可以说速度提升了几十倍。&lt;br&gt;而且整个过程都是全自动的，无论你修改了 js,css 还是 html 文件，浏览器都会在重新编译完成后自动刷新。&lt;br&gt;&lt;img src=&quot;/imgs/dev-environment/compile-time.png&quot; alt=&quot;编译时间&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构&quot;&gt;&lt;/a&gt;文件结构&lt;/h2&gt;&lt;p&gt;这是项目开发时的文件结构：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/dev-environment/structure.png&quot; alt=&quot;文件结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中 public,router,views 都是 express 默认的文件结构，这里就不做介绍了。&lt;br&gt;submodule 是我们不同项目中公用的代码库，这样可以少写很多公共代码。&lt;/p&gt;
&lt;h1 id=&quot;技术细节&quot;&gt;&lt;a href=&quot;#技术细节&quot; class=&quot;headerlink&quot; title=&quot;技术细节&quot;&gt;&lt;/a&gt;技术细节&lt;/h1&gt;&lt;p&gt;整个项目的技术栈是 jade+node-sass+js，实现全自动开发。&lt;br&gt;首先在 views 下面，定义好 jade 模版文件，然后开始新加页面&lt;/p&gt;
&lt;h2 id=&quot;关系依赖&quot;&gt;&lt;a href=&quot;#关系依赖&quot; class=&quot;headerlink&quot; title=&quot;关系依赖&quot;&gt;&lt;/a&gt;关系依赖&lt;/h2&gt;&lt;p&gt;这个环境，主要基于 Express,Gulp 以及一系列的Gulp插件搭建，这个是开发环境的依赖关系：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;body-parser&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.13.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cookie-parser&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.3.5&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;debug&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~2.2.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~4.13.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;jade&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.11.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;morgan&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.6.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;serve-favicon&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~2.3.0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;browser-sync&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.9.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;del&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.0.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.9.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-autoprefixer&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.0.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-jade&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.1.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-nodemon&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.0.4&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.0.4&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-sourcemaps&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.5.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;jade&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.11.0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，express 主要用来渲染 jade 模版引擎以及提供路由功能，同时起一个本地的服务器。有人说，渲染jade 模版，我直接用 gulp 也可以啊。是的，gulp 是可以直接渲染 jade 模版，但是有一个问题，就是如果你本地只修改了一个 jade 文件时候，gulp 也需要把所有的 jade 文件全部渲染一遍，这明显会浪费很多时间。&lt;/p&gt;
&lt;p&gt;所以我引入了 express，只会按需渲染 jade，节省了很多时间。同时一个高效的开发环境必须有浏览器自动刷新，但是 express 没有这个功能。所以我引入了 browser-sync，用它来代理 express 启动的本地服务，然后来监测本地文件的变动，来做到浏览器自动刷新。&lt;/p&gt;
&lt;p&gt;有同学可能会问了，如果我改了 express 相应的 js 文件怎么办，或者 jade 文件编译出错了怎么办。因为这些时候 express 服务器都会 crash 掉，需要重启。所以我引入了 nodemon，来做 express 服务器的自动重启功能。&lt;/p&gt;
&lt;p&gt;在这个环境下面，我在开发中所能碰到的所有 jade，scss，js 文件的改动都会被检测到并作出相应的动作，而且速度还非常快。让我可以花更多时间在业务代码的开发上，而不是不断重启服务和刷新浏览器。&lt;/p&gt;
&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;这个东西被我放到 Github上了，&lt;a href=&quot;https://github.com/kisnows/Express-Gulp-BrowserSync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址在这。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同时附上 gulpfile 全文，以供参考：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; browserSync = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;browser-sync&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reload = browserSync.reload;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sass = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prefix = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-autoprefixer&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nodemon = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-nodemon&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sourcemaps = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-sourcemaps&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jade = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-jade&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stylus = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-stylus&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rename = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; del = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;del&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//dev task start&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//DONE can not compile the sass or less file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;./sass/personal.scss&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(sourcemaps.init())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(sass(&amp;#123;errLogToConsole: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, sass.logError))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(prefix(&lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;gt; 1%&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ie 8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Android 2&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(sourcemaps.write())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public/css&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(reload(&amp;#123;stream: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;browser-sync&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;nodemon&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  browserSync.init(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    proxy: &lt;span class=&quot;string&quot;&gt;&#39;http://localhost:3000&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    files: [&lt;span class=&quot;string&quot;&gt;&#39;public/**/*.*&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;views/**/*.*&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;submodule/**/*.*&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    browser: &lt;span class=&quot;string&quot;&gt;&#39;google chrome&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    notify: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    port: &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;movesub&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;./submodule/images/**/*.*&#39;&lt;/span&gt;], &amp;#123;base: &lt;span class=&quot;string&quot;&gt;&#39;./submodule&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;stylus&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;submodule/stylus/public.styl&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(stylus())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(rename(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      extname: &lt;span class=&quot;string&quot;&gt;&#39;.scss&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;submodule/stylus/&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;nodemon&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  del([&lt;span class=&quot;string&quot;&gt;&#39;./public/*.html&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; called = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nodemon(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    script: &lt;span class=&quot;string&quot;&gt;&#39;bin/www&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;start&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!called) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      cb();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      called = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//dev task end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  del([&lt;span class=&quot;string&quot;&gt;&#39;./dist/*&#39;&lt;/span&gt;], cb)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;copy&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/css/**/*&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/images/**/*&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/js/**/*&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/pageScripts/**/*&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ], &amp;#123;base: &lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//build task start&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//DONE add build task&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;jade&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;views/**/*.jade&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;!views/layout/**/*.jade&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;!views/includes/**/*.jade&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(jade(&amp;#123;pretty: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//build task end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;copy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;jade&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;browser-sync&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;movesub&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  gulp.watch([&lt;span class=&quot;string&quot;&gt;&#39;sass/**/*.*&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.submodule/stylus/**/*.*&#39;&lt;/span&gt;], [&lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;原文发布于&lt;a href=&quot;/2015/11/02/dev-environment-Express-Gulp-BrowserSync/&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么要搭这么一套框架&quot;&gt;&lt;a href=&quot;#为什么要搭这么一套框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭这么一套框架&quot;&gt;&lt;/a&gt;为什么要搭这么一套框架&lt;/h1&gt;&lt;p&gt;公司 Pc 端以前遗留的项目，都是基于jekyll+ruby-sass这一套比较老的技术搭建的。不过 jekyll 的模版继承加上 sass 强大预处理能力，同时配合 Grunt 做任务管理，一切还是很得心应手的。&lt;/p&gt;
&lt;p&gt;然而随着项目规模的急剧增大，这一套东西的速度是在是太慢了，一至于后来一旦这个项目有需要求要改我就头疼，倒不是说头疼需求怎么改，而是你随便改一个文件，从 jekyll 检测到改动到编译完 sass 到浏览器自动刷新，基本需要 40+ s，这完全不能接受。&lt;/p&gt;
&lt;p&gt;于是一直就打算新搭一套开发环境，刚好前段时间有个新项目，我就拿来操刀动手了，目前已经用它做了俩个项目下来，在原有基础上做了一些修改之后，已经完全可以替代原来那一套懂了。&lt;/p&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;得益于 node-sass 对 ruby-sass 在编译速度上的碾压以及被 jade 完爆的 jekyll。现在项目中从文件变动=&amp;gt;编译完成=&amp;gt;浏览器自动刷新，整个过程在 1s 左右，可以说速度提升了几十倍。&lt;br&gt;而且整个过程都是全自动的，无论你修改了 js,css 还是 html 文件，浏览器都会在重新编译完成后自动刷新。&lt;br&gt;&lt;img src=&quot;/imgs/dev-environment/compile-time.png&quot; alt=&quot;编译时间&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构&quot;&gt;&lt;/a&gt;文件结构&lt;/h2&gt;&lt;p&gt;这是项目开发时的文件结构：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="Express" scheme="http://kisnows.com/tags/express/"/>
    
      <category term="开发环境" scheme="http://kisnows.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Canvas 基础</title>
    <link href="http://kisnows.com/2015/10/19/first-contact-of-canvas/"/>
    <id>http://kisnows.com/2015/10/19/first-contact-of-canvas/</id>
    <published>2015-10-19T14:41:38.000Z</published>
    <updated>2016-04-02T03:37:51.339Z</updated>
    
    <content type="html">&lt;p&gt;首先引用 &lt;code&gt;MDN&lt;/code&gt; 上对于 &lt;code&gt;canvas&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 是 HTML5 新增的元素，可使用JavaScript脚本来绘制图形。例如：画图，合成照片，创建动画甚至实时视频处理与渲染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说这是浏览器提供给我们的一个画布和丰富的接口，可以用来制作各种复杂的效果。&lt;br&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 元素创造了一个固定大小的画布，它公开了一个或多个渲染上下文。其可以用来绘制和处理被现实的页面。&lt;br&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/224/Canvas_default_grid.png&quot; alt=&quot;Canvas坐标&quot;&gt;&lt;br&gt;这是 canvas 2d 的坐标，可以看到左上角为原点，横轴为x轴，纵轴为y轴。我们所有的canvas2d的功能实现都是在这个坐标系中。&lt;/p&gt;
&lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;p&gt;本文只简单介绍一下矩形、线段和圆弧的画法。&lt;/p&gt;
&lt;h2 id=&quot;矩形&quot;&gt;&lt;a href=&quot;#矩形&quot; class=&quot;headerlink&quot; title=&quot;矩形&quot;&gt;&lt;/a&gt;矩形&lt;/h2&gt;&lt;p&gt;通过一个简单的例子来了解一下基本的API： &lt;/p&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML:&quot;&gt;&lt;/a&gt;HTML:&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;height:100%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   当前浏览器不支持Canvas，请更换浏览器后再试&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript:&quot;&gt;&lt;/a&gt;JavaScript:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var canvas = document.getElementById(&amp;apos;canvas&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ctx = canvas.getContext(&amp;apos;2d&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_WIDTH = window.screen.availWidth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_HEIGHT = window.screen.availHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;#000&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(10, 10, 55, 50);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;rgba(0,0,200,0.5)&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(30, 30, 55, 50);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;页面上会如下显示：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/v5Lhnf8k/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;首先获取到 canvas 元素，并通过 getContext(‘2d’) 获取到它的渲染上下文。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;clearRect-x-y-width-height&quot;&gt;&lt;a href=&quot;#clearRect-x-y-width-height&quot; class=&quot;headerlink&quot; title=&quot;clearRect(x, y, width, height)&quot;&gt;&lt;/a&gt;clearRect(x, y, width, height)&lt;/h3&gt;&lt;p&gt;清空指定区域，如果需要做动画的话，每次重新渲染前都需要调用这个函数来清除前一帧的内容。&lt;/p&gt;
&lt;h3 id=&quot;beginPath&quot;&gt;&lt;a href=&quot;#beginPath&quot; class=&quot;headerlink&quot; title=&quot;beginPath()&quot;&gt;&lt;/a&gt;beginPath()&lt;/h3&gt;&lt;p&gt;新建一条路径&lt;/p&gt;
&lt;h3 id=&quot;fillStyle&quot;&gt;&lt;a href=&quot;#fillStyle&quot; class=&quot;headerlink&quot; title=&quot;fillStyle&quot;&gt;&lt;/a&gt;fillStyle&lt;/h3&gt;&lt;p&gt;用来设置要填充的颜色&lt;/p&gt;
&lt;h3 id=&quot;ctx-fillRect-10-10-55-50&quot;&gt;&lt;a href=&quot;#ctx-fillRect-10-10-55-50&quot; class=&quot;headerlink&quot; title=&quot;ctx.fillRect(10, 10, 55, 50);&quot;&gt;&lt;/a&gt;ctx.fillRect(10, 10, 55, 50);&lt;/h3&gt;&lt;p&gt;以x轴等于10，y轴等于10为起点，绘制一个宽55高50的矩形。&lt;/p&gt;
&lt;h3 id=&quot;strokeRect-x-y-width-height&quot;&gt;&lt;a href=&quot;#strokeRect-x-y-width-height&quot; class=&quot;headerlink&quot; title=&quot;strokeRect(x,y,width,height)&quot;&gt;&lt;/a&gt;strokeRect(x,y,width,height)&lt;/h3&gt;&lt;p&gt;跟fillRect不同的地方在于，strokeRect会绘制一个矩形的边框，如下：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/87jtz89q/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;线段&quot;&gt;&lt;a href=&quot;#线段&quot; class=&quot;headerlink&quot; title=&quot;线段&quot;&gt;&lt;/a&gt;线段&lt;/h2&gt;&lt;p&gt;绘制一个三角形&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.moveTo(&lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.lineTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.lineTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.closePath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.stroke();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/6n0emmf3/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;moveTo-x-y&quot;&gt;&lt;a href=&quot;#moveTo-x-y&quot; class=&quot;headerlink&quot; title=&quot;moveTo(x,y)&quot;&gt;&lt;/a&gt;moveTo(x,y)&lt;/h3&gt;&lt;p&gt;定义一个起点，从这个点开始绘制&lt;/p&gt;
&lt;h3 id=&quot;lineTo-x-y&quot;&gt;&lt;a href=&quot;#lineTo-x-y&quot; class=&quot;headerlink&quot; title=&quot;lineTo(x,y)&quot;&gt;&lt;/a&gt;lineTo(x,y)&lt;/h3&gt;&lt;p&gt;绘制一条从当前位置到指定x以及y位置的直线&lt;/p&gt;
&lt;h3 id=&quot;closePath&quot;&gt;&lt;a href=&quot;#closePath&quot; class=&quot;headerlink&quot; title=&quot;closePath()&quot;&gt;&lt;/a&gt;closePath()&lt;/h3&gt;&lt;p&gt;闭合当前路径，也可以用lineTo到起点来代替&lt;/p&gt;
&lt;h3 id=&quot;storke&quot;&gt;&lt;a href=&quot;#storke&quot; class=&quot;headerlink&quot; title=&quot;storke()&quot;&gt;&lt;/a&gt;storke()&lt;/h3&gt;&lt;p&gt;根据已有路径的来绘制线段，也就是说如果不执行stroke(),那么画布上什么都没有。&lt;/p&gt;
&lt;h2 id=&quot;圆弧&quot;&gt;&lt;a href=&quot;#圆弧&quot; class=&quot;headerlink&quot; title=&quot;圆弧&quot;&gt;&lt;/a&gt;圆弧&lt;/h2&gt;&lt;h3 id=&quot;arc-x-y-radius-startAngle-endAngle-anticlockwise&quot;&gt;&lt;a href=&quot;#arc-x-y-radius-startAngle-endAngle-anticlockwise&quot; class=&quot;headerlink&quot; title=&quot;arc(x, y, radius, startAngle, endAngle, anticlockwise)&quot;&gt;&lt;/a&gt;arc(x, y, radius, startAngle, endAngle, anticlockwise)&lt;/h3&gt;&lt;p&gt;该方法有五个参数： x,y为绘制圆弧所在圆上的圆心坐标。radius为半径。startAngle以及endAngle参数用弧度定义了开始以及结束的弧度。这些都是以x轴为基准。参数anticlockwise 为一个布尔值。为true时，是逆时针方向，否则顺时针方向。&lt;br&gt;看个直观的例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.moveTo(&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.moveTo(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.moveTo(&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.stroke();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.clearRect(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetrue&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; j++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruectx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; + j * &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; + i * &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; radisu = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startAngle = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; endAngle = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI + (&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * j) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; anticlockwise = i % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruectx.arc(x, y, radisu, startAngle, endAngle, anticlockwise);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruetruectx.fill();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruetruectx.stroke();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetrue&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/z6ywoj8g/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;br&gt;通过这个例子可以看清楚的看到 fill 和 stroke 这个两个函数的区别，前者渲染边框，后者填充整个指定区域。同时可以区分，anticlockwise 分别 true 和 false 时渲染的机制，前者为逆时针，后者为顺时针。&lt;br&gt;&lt;br&gt;# 总结&lt;br&gt;仅仅通过这三个基础的用法，就可以制作出很多漂亮的动画了。我这里做了一个简单运动的小球，同时做了边界判定。&lt;br&gt;&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/kisnows/jkLgatsm/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN-Canvas&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先引用 &lt;code&gt;MDN&lt;/code&gt; 上对于 &lt;code&gt;canvas&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 是 HTML5 新增的元素，可使用JavaScript脚本来绘制图形。例如：画图，合成照片，创建动画甚至实时视频处理与渲染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说这是浏览器提供给我们的一个画布和丰富的接口，可以用来制作各种复杂的效果。&lt;br&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 元素创造了一个固定大小的画布，它公开了一个或多个渲染上下文。其可以用来绘制和处理被现实的页面。&lt;br&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/224/Canvas_default_grid.png&quot; alt=&quot;Canvas坐标&quot;&gt;&lt;br&gt;这是 canvas 2d 的坐标，可以看到左上角为原点，横轴为x轴，纵轴为y轴。我们所有的canvas2d的功能实现都是在这个坐标系中。&lt;/p&gt;
&lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;p&gt;本文只简单介绍一下矩形、线段和圆弧的画法。&lt;/p&gt;
&lt;h2 id=&quot;矩形&quot;&gt;&lt;a href=&quot;#矩形&quot; class=&quot;headerlink&quot; title=&quot;矩形&quot;&gt;&lt;/a&gt;矩形&lt;/h2&gt;&lt;p&gt;通过一个简单的例子来了解一下基本的API： &lt;/p&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML:&quot;&gt;&lt;/a&gt;HTML:&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;height:100%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   当前浏览器不支持Canvas，请更换浏览器后再试&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript:&quot;&gt;&lt;/a&gt;JavaScript:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var canvas = document.getElementById(&amp;apos;canvas&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ctx = canvas.getContext(&amp;apos;2d&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_WIDTH = window.screen.availWidth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_HEIGHT = window.screen.availHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;#000&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(10, 10, 55, 50);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;rgba(0,0,200,0.5)&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(30, 30, 55, 50);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;页面上会如下显示：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/v5Lhnf8k/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;首先获取到 canvas 元素，并通过 getContext(‘2d’) 获取到它的渲染上下文。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
