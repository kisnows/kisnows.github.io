<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>抹桥杂货店</title>
  <subtitle>Seize the day.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kisnows.com/"/>
  <updated>2016-12-11T12:19:37.776Z</updated>
  <id>http://kisnows.com/</id>
  
  <author>
    <name>抹桥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016年终总结</title>
    <link href="http://kisnows.com/2016/12/09/2016-year-end-summary/"/>
    <id>http://kisnows.com/2016/12/09/2016-year-end-summary/</id>
    <published>2016-12-09T14:03:10.000Z</published>
    <updated>2016-12-11T12:19:37.776Z</updated>
    
    <content type="html">&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;时间也真是快，从 15 年到现在算来我做前端开发也将近两年了，没想到这一路走过来这么顺利，运气真是挺好的。&lt;/p&gt;
&lt;p&gt;当初自学三个月，然后投简历面试，就拿到了好几个 offer，一切都太顺利了。然后去了一家做互联网金融的公司，老大对我很好，然而待了一年多还是在今年五月份选择了离职。原因很简单，公司的开发模式过于保守，一直待下去真的不会有任何长进了， 整天干的活都像是美工干的活，公司很不重视前端，而且前后端不分离，同一份文件前后端两个人一起改，想想真是痛苦。&lt;/p&gt;
&lt;p&gt;那离职了就要找工作，不得不说，找工作的经历真有意思。&lt;/p&gt;
&lt;h2 id=&quot;找工作&quot;&gt;&lt;a href=&quot;#找工作&quot; class=&quot;headerlink&quot; title=&quot;找工作&quot;&gt;&lt;/a&gt;找工作&lt;/h2&gt;&lt;p&gt;有一家创业公司，人家对我还比较满意，但就是薪资没谈妥，就算了，谁知道后来我都拿到另一家公司的 offer 了又说那个薪资可以接受了。&lt;/p&gt;
&lt;p&gt;有一家外企，面试的时候对他们的工作环境非常满意，然而面试发挥太差，连 sass 的循环都写不出来，结果可想而知。面试官还很和蔼，说回去等消息吧，然后我出门不到五分钟就收到了短信，‘您不适合本公司的要求’，嗯，效率真高，挺喜欢这点。&lt;/p&gt;
&lt;p&gt;有一家在滨江的大公司，面试通过了，薪资都谈妥了， Hr 说回去等 offer 吧，一般三天内就会发出来。我很高兴，第二天回原公司就提了离职。结果等了一星期还没收到 offer ，就打电话问，对方很不好意思的回答说，部门公司架构重组，我面试的那个事业部已经没了,,ԾㅂԾ,,，我也不好说什么了。&lt;/p&gt;
&lt;p&gt;中途还有一堆不靠谱的公司，当然也有我能力不足没通过面试的。&lt;/p&gt;
&lt;p&gt;有一个最直接就是蘑菇街的人问你能接受加班吗，我说偶尔可以，经常不行，然后人家来了一句，那不行，我们这边加班还是很严重的，几乎每天11点。然后，就没有然后了。后来小伙伴给内推了阿里，面天猫挂在了三面，又面了滨江的 B2B 部门。&lt;/p&gt;
&lt;p&gt;到二面的时候，接到了网易的面试，面网易的时候谈的很高兴，双方都很满意，最后 hr 问说有没有在面其他公司，我说当然， 比如阿里也在面，现在已经到了二面。然后就有了下面的对话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hr ：“那如果阿里和网易同时给你发 offer 你去哪个？“
我当时随口一说，“哪个先发 offer 就去哪个”
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后当天晚上就电话通知我面试通过了，第二天就发了 offer。现在想想，我真是机智啊，O(∩_∩)O&lt;/p&gt;
&lt;h2 id=&quot;网易&quot;&gt;&lt;a href=&quot;#网易&quot; class=&quot;headerlink&quot; title=&quot;网易&quot;&gt;&lt;/a&gt;网易&lt;/h2&gt;&lt;p&gt;找工作的事情就告一段落，来到网易。首先网易给我的第一印象就是，食堂真好（虽然已经吃腻了），仿佛回到了大学时候一样，然后妹子真多，嗯，真的。&lt;/p&gt;
&lt;p&gt;不得不说大公司跟小公司还是有很多差别的。首先，流程上就很规范，不会出现说之前公司那种产品经理过来一会要这样一会要那样的事情，但同时也有弊端，就是会议太多。想想那些会议有没有必要开，还是有必要的，但是会议的整体效率，真是低啊。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;一开始去网易除了业务上的需求，还自发奋勇接了几个前端技术部的非业务工作，可能这一点让老大觉得我积极性比较强，就又比较看好我。中途本来还要做个前端监控系统的，可惜刚搞好前期工作，负责人就离职了，项目也就搁置了。想想也是挺可惜的。&lt;/p&gt;
&lt;p&gt;都说进了网易会长胖，然而短短半年时间，我竟瘦了七八斤。不得不说，工作还是挺忙的，每天都得八九点多才能下班。想想以前六点下班，下班后看两小时书，打俩小时游戏，然后躺床睡觉，劳逸结合，简直完美。现在一下班就跟死猪一样了，什么都不想干，游戏都懒得打，就刷刷微博、A、B站然后就睡了。看书很少了，偶尔也看看一些前端相关的博客和文章。所以感觉这半年，除了工作经验上的积累，个人知识拓展上几乎是停滞的，长期这样下去肯定是不行的。&lt;/p&gt;
&lt;p&gt;而且我们那条业务线负责人离职后，老大让我顶大梁。虽然这对我来说是个锻炼，但确实亚历山大，每天除了业务需求，还有一堆杂七杂八的事情要处理，搞得焦头烂额。&lt;/p&gt;
&lt;p&gt;不过，还好。公司的同事都挺有意思的，上班整体也挺开心，这到挺好的。&lt;/p&gt;
&lt;h1 id=&quot;生活&quot;&gt;&lt;a href=&quot;#生活&quot; class=&quot;headerlink&quot; title=&quot;生活&quot;&gt;&lt;/a&gt;生活&lt;/h1&gt;&lt;p&gt;翻了一下去年的日记，哦，不对，应该叫月记。看来日常生活上还是那个样子，跟去年没什么大的区别。&lt;/p&gt;
&lt;h2 id=&quot;找房子&quot;&gt;&lt;a href=&quot;#找房子&quot; class=&quot;headerlink&quot; title=&quot;找房子&quot;&gt;&lt;/a&gt;找房子&lt;/h2&gt;&lt;p&gt;一开年就又是找房子，原来的房东直接涨价 500 块，真心不能接受。就只能开始又一次找房子的旅程了，跑了很多小区，最后在原来房子附近的小区找到一个还行的，不过价格也真是高。这种每年都要找房子的感觉真是不爽。&lt;/p&gt;
&lt;p&gt;找到的房子是个三室一厅的，就拉了个前同事入伙，开始三人合租的日子。&lt;/p&gt;
&lt;p&gt;新室友养了只猫，挺可爱的， 就是那猫实在掉毛掉的厉害，猫主人又很少打扫，这里让人不太愉快。不过还好，大家关系都不错，周末一起看个电影吃个饭，偶尔也去西湖、九溪等地方逛逛，挺好的。&lt;/p&gt;
&lt;h2 id=&quot;方向&quot;&gt;&lt;a href=&quot;#方向&quot; class=&quot;headerlink&quot; title=&quot;方向&quot;&gt;&lt;/a&gt;方向&lt;/h2&gt;&lt;p&gt;到现在都还是有点迷茫，还是不知道自己到底是个怎样的人，想要成为什么样的人。有点找不到方向的感觉 。&lt;/p&gt;
&lt;p&gt;年初和同学聊天，聊到想在哪里发展。他说不太想待杭州，又不想回去，比较想去上海。然而年中就结婚并定居杭州了。我呢，是想回去又不想回去，跟所有出来工作的人一样，纠结。&lt;/p&gt;
&lt;p&gt;总想活的潇洒一点，可又给自己画了很多条条框框，画地为牢，把自己困在原地。&lt;/p&gt;
&lt;p&gt;果然，一个人想要改变自己还是挺难的。&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;先看看去年给自己定的目标吧：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在此给明年订个简单的规定：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 每个月至少写一篇博客
2. 至少每两周看一次电影
3. 每两个月看一本书
4. 加强身体锻炼
5. 该追的美剧不能落下
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;除了 2，5 其他的一个都没完成，果然这执行力还是不行啊。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博客自从进了网易就没有更新过；&lt;/li&gt;
&lt;li&gt;书，一年下来就看了四本，好多书买回来，连封皮都没撕；&lt;/li&gt;
&lt;li&gt;锻炼身体，买了瑜伽毯，买了新的咏具，但锻炼总是断断续续的，一直没能坚持下来；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以今年的计划就简单一点吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个月至少一篇博客&lt;/li&gt;
&lt;li&gt;每个月都要出去走走，哪怕一个人&lt;/li&gt;
&lt;li&gt;书还是要看的，那就三个月一本书吧&lt;/li&gt;
&lt;li&gt;身体还是要锻炼的，心里有这个事情就行&lt;/li&gt;
&lt;li&gt;写一个个人项目，并发布出来，无论项目多水&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;感情&quot;&gt;&lt;a href=&quot;#感情&quot; class=&quot;headerlink&quot; title=&quot;感情&quot;&gt;&lt;/a&gt;感情&lt;/h2&gt;&lt;div style=&quot;opacity:0&quot;&gt;→←&lt;/div&gt;

&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;整体的感觉，就是这一年过的真快呀！转眼毕业都两年多了，有时都觉得挺可怕的，必须得再次告诫自己：&lt;br&gt;&lt;strong&gt;&lt;em&gt;Seize the day.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;时间也真是快，从 15 年到现在算来我做前端开发也将近两年了，没想到这一路走过来这么顺利，运气真是挺好的。&lt;/p&gt;
&lt;p&gt;当初自学三个月，然后投简历面试，就拿到了好几个 offer，一切都太顺利了。然后去了一家做互联网金融的公司，老大对我很好，然而待了一年多还是在今年五月份选择了离职。原因很简单，公司的开发模式过于保守，一直待下去真的不会有任何长进了， 整天干的活都像是美工干的活，公司很不重视前端，而且前后端不分离，同一份文件前后端两个人一起改，想想真是痛苦。&lt;/p&gt;
&lt;p&gt;那离职了就要找工作，不得不说，找工作的经历真有意思。&lt;/p&gt;
&lt;h2 id=&quot;找工作&quot;&gt;&lt;a href=&quot;#找工作&quot; class=&quot;headerlink&quot; title=&quot;找工作&quot;&gt;&lt;/a&gt;找工作&lt;/h2&gt;&lt;p&gt;有一家创业公司，人家对我还比较满意，但就是薪资没谈妥，就算了，谁知道后来我都拿到另一家公司的 offer 了又说那个薪资可以接受了。&lt;/p&gt;
&lt;p&gt;有一家外企，面试的时候对他们的工作环境非常满意，然而面试发挥太差，连 sass 的循环都写不出来，结果可想而知。面试官还很和蔼，说回去等消息吧，然后我出门不到五分钟就收到了短信，‘您不适合本公司的要求’，嗯，效率真高，挺喜欢这点。&lt;/p&gt;
&lt;p&gt;有一家在滨江的大公司，面试通过了，薪资都谈妥了， Hr 说回去等 offer 吧，一般三天内就会发出来。我很高兴，第二天回原公司就提了离职。结果等了一星期还没收到 offer ，就打电话问，对方很不好意思的回答说，部门公司架构重组，我面试的那个事业部已经没了,,ԾㅂԾ,,，我也不好说什么了。&lt;/p&gt;
&lt;p&gt;中途还有一堆不靠谱的公司，当然也有我能力不足没通过面试的。&lt;/p&gt;
&lt;p&gt;有一个最直接就是蘑菇街的人问你能接受加班吗，我说偶尔可以，经常不行，然后人家来了一句，那不行，我们这边加班还是很严重的，几乎每天11点。然后，就没有然后了。后来小伙伴给内推了阿里，面天猫挂在了三面，又面了滨江的 B2B 部门。&lt;/p&gt;
&lt;p&gt;到二面的时候，接到了网易的面试，面网易的时候谈的很高兴，双方都很满意，最后 hr 问说有没有在面其他公司，我说当然， 比如阿里也在面，现在已经到了二面。然后就有了下面的对话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hr ：“那如果阿里和网易同时给你发 offer 你去哪个？“
我当时随口一说，“哪个先发 offer 就去哪个”
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后当天晚上就电话通知我面试通过了，第二天就发了 offer。现在想想，我真是机智啊，O(∩_∩)O&lt;/p&gt;
&lt;h2 id=&quot;网易&quot;&gt;&lt;a href=&quot;#网易&quot; class=&quot;headerlink&quot; title=&quot;网易&quot;&gt;&lt;/a&gt;网易&lt;/h2&gt;&lt;p&gt;找工作的事情就告一段落，来到网易。首先网易给我的第一印象就是，食堂真好（虽然已经吃腻了），仿佛回到了大学时候一样，然后妹子真多，嗯，真的。&lt;/p&gt;
&lt;p&gt;不得不说大公司跟小公司还是有很多差别的。首先，流程上就很规范，不会出现说之前公司那种产品经理过来一会要这样一会要那样的事情，但同时也有弊端，就是会议太多。想想那些会议有没有必要开，还是有必要的，但是会议的整体效率，真是低啊。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://kisnows.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="年终总结" scheme="http://kisnows.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】走进 Redux 之高级篇</title>
    <link href="http://kisnows.com/2016/05/21/step-to-redux-3/"/>
    <id>http://kisnows.com/2016/05/21/step-to-redux-3/</id>
    <published>2016-05-21T12:14:46.000Z</published>
    <updated>2016-07-15T13:02:46.601Z</updated>
    
    <content type="html">&lt;h1 id=&quot;异步的-Actions&quot;&gt;&lt;a href=&quot;#异步的-Actions&quot; class=&quot;headerlink&quot; title=&quot;异步的 Actions&quot;&gt;&lt;/a&gt;异步的 Actions&lt;/h1&gt;&lt;p&gt;前几篇的教程里面，我们搭建了一个 todo 应用。这是一个完全同步的，每次一个 action 被 dispatched, state 都会即时更新。&lt;br&gt;解析来，我们要搭建一个不同的，异步的应用。它使用 Reddit API 来展示一个选中栏目的头条。&lt;/p&gt;
&lt;h2 id=&quot;Actions&quot;&gt;&lt;a href=&quot;#Actions&quot; class=&quot;headerlink&quot; title=&quot;Actions&quot;&gt;&lt;/a&gt;Actions&lt;/h2&gt;&lt;p&gt;当你调用一个异步的 API 时，有两个至关重要的时刻：你开始调用的时刻，和你收到答复的时刻。&lt;/p&gt;
&lt;p&gt;这两个时刻通常都会需要对应用的 state 做出变化；为此，你需要 dispatch 普通的将会被 reducers 同步处理的 actions. 通常，对于任意 API 请求，你将需要 dispatch 至少三次不同的 actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个通知 reducers 请求开始的 action&lt;br&gt;  reducers 可能通过切换一个 state 中的 &lt;code&gt;isFetching&lt;/code&gt; flag 来处理这个 action.  用来告诉 UI 是时候显示一个等待标识了。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求已经成功完成的 action&lt;br&gt;  reducers 可能通过把新数据合并到它控制的 state 中并重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. UI 会隐藏等待标识，并展示获取到的数据。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求失败的 action&lt;br&gt;  reducers 可能通过重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. 另外，有些 reducers 可能想要存储这个错误信息，这样可以让 UI 展示出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能需要在 actions 添加一个专用的 &lt;code&gt;status&lt;/code&gt; 字段：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;, status: &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, error: &lt;span class=&quot;string&quot;&gt;&#39;Oops&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;typs: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS&#39;&lt;/span&gt;, status: &lt;span class=&quot;string&quot;&gt;&#39;success&#39;&lt;/span&gt;, response: &amp;#123; ... &amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者为它们定义单独的 types：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS_REQUEST&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS_FAILURE&#39;&lt;/span&gt;, error: &lt;span class=&quot;string&quot;&gt;&#39;Oops&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_POSTS_SUCCESS&#39;&lt;/span&gt;, response: &amp;#123; ... &amp;#125; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;选择一个拥有 flags 的单独的 action type, 或者多个 actions types, 这都取决与你。多个 types 会有更少的犯错空间，但这不是一个问题，如果你使用 &lt;a href=&quot;https://github.com/acdlite/redux-actions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-actions&lt;/a&gt; 这样的辅助库来生成 action creator 和 reducers 的话。&lt;/p&gt;
&lt;h1 id=&quot;异步的数据流&quot;&gt;&lt;a href=&quot;#异步的数据流&quot; class=&quot;headerlink&quot; title=&quot;异步的数据流&quot;&gt;&lt;/a&gt;异步的数据流&lt;/h1&gt;&lt;p&gt;不使用 middlerware, Redux store 只提供同步的数据流。这是你通过 createStore() 得到的默认结果。&lt;/p&gt;
&lt;p&gt;可以使用 applyMiddleware() 来增强 createStore(). 这不是必须的，但它可以让你通过一个便利的方法描述异步的 action 。&lt;/p&gt;
&lt;p&gt;异步的 middleware 比如 redux-thunk 或 redux-promise 都包装了 store 的 dispatch() 方法，允许你 dispatch 除了 action 以外的内容，比如函数或者 Promise。你所使用的 middleware 可以以自己的方式解析你 dispatch 的任何内容，并继续传递 actions 给下一个 middleware。比如，支持 Promise 的 middleware 能够拦截 Promise，然后为每个 Promise 异步地 dispatch 一对 begin/end actions。&lt;/p&gt;
&lt;p&gt;当数据流上最后一个 middleware dispatches 一个 actions 时，它必须是一个普通的对象。这是同步的 Redux 数据流开始的地方。&lt;/p&gt;
&lt;h1 id=&quot;中间件（Middleware）&quot;&gt;&lt;a href=&quot;#中间件（Middleware）&quot; class=&quot;headerlink&quot; title=&quot;中间件（Middleware）&quot;&gt;&lt;/a&gt;中间件（Middleware）&lt;/h1&gt;&lt;p&gt;中间件提供一个第三方的扩展点，在 dispatching 一个 action 和 它到达 reducer 的中间时刻。人们使用中间件来打印日志，记录崩溃报告，调用一个异步的 API, 路由……&lt;br&gt;这里有&lt;a href=&quot;http://redux.js.org/docs/advanced/Middleware.html#seven-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一些例子&lt;/a&gt;来展示中间件的强大作用&lt;/p&gt;
&lt;h2 id=&quot;理解中间件&quot;&gt;&lt;a href=&quot;#理解中间件&quot; class=&quot;headerlink&quot; title=&quot;理解中间件&quot;&gt;&lt;/a&gt;理解中间件&lt;/h2&gt;&lt;p&gt;中间件可以做很多事情，理解它是从哪来的非常重要。我们通过使用 logging 和 crash reporting 这俩个例子来展示一个使用中间件的思维过程。&lt;/p&gt;
&lt;h3 id=&quot;问题-日志记录&quot;&gt;&lt;a href=&quot;#问题-日志记录&quot; class=&quot;headerlink&quot; title=&quot;问题: 日志记录&quot;&gt;&lt;/a&gt;问题: 日志记录&lt;/h3&gt;&lt;h4 id=&quot;尝试-1：手动记录&quot;&gt;&lt;a href=&quot;#尝试-1：手动记录&quot; class=&quot;headerlink&quot; title=&quot;尝试#1：手动记录&quot;&gt;&lt;/a&gt;尝试#1：手动记录&lt;/h4&gt;&lt;p&gt;最原始的解决方案就是每次在调用 &lt;code&gt;store.dispatch(action)&lt;/code&gt; 时记录 action 和 下一个 state. 代码可能就是下面的样子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; action = addTodo(&lt;span class=&quot;string&quot;&gt;&#39;Use Redux&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;dispatching&#39;&lt;/span&gt;,action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;store.dispatch(action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;next state&#39;&lt;/span&gt;, store.getState())&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这真的是一种很搓的办法。&lt;/p&gt;
&lt;h4 id=&quot;尝试-2：包装-Dispatch&quot;&gt;&lt;a href=&quot;#尝试-2：包装-Dispatch&quot; class=&quot;headerlink&quot; title=&quot;尝试#2：包装 Dispatch&quot;&gt;&lt;/a&gt;尝试#2：包装 Dispatch&lt;/h4&gt;&lt;p&gt;把 logging 提取到一个函数里面：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatchAndLog&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;store,action&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;dispatching&#39;&lt;/span&gt;,action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    store.dispatch(action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;next state&#39;&lt;/span&gt;,store.getState())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样每次调用的时候通过使用这个函数来替换 &lt;code&gt;store.dispatch()&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dispatchAndLog(store,addTOdo(&lt;span class=&quot;string&quot;&gt;&#39;USe Redux&#39;&lt;/span&gt;))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样已经能解问题了，但是这样并不优雅。&lt;/p&gt;
&lt;h4 id=&quot;尝试-3：-Monkeypatching-Dispatch&quot;&gt;&lt;a href=&quot;#尝试-3：-Monkeypatching-Dispatch&quot; class=&quot;headerlink&quot; title=&quot;尝试#3： Monkeypatching Dispatch&quot;&gt;&lt;/a&gt;尝试#3： Monkeypatching Dispatch&lt;/h4&gt;&lt;p&gt;如果我们只在 store 里面替换 &lt;code&gt;dispatch&lt;/code&gt; 函数呢？ Redux 的 store 只是一个拥有几个方法的普通对象，所以我们可以改写 &lt;code&gt;dispatch&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; next = store.dispatch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;store.dispath = fucntion dispatchAndLog (action)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;dispatching&#39;&lt;/span&gt;,action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = next(action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;next state&#39;&lt;/span&gt;,soter.getState())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reslut&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样基本上已经达到了我们的妖要求，不论你在哪里 dispatch 一个 action, 它都保证会被记录下来。虽然我们通过 Monkeypatching 改写了 store 内部的方法，但暂时先这样。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异步的-Actions&quot;&gt;&lt;a href=&quot;#异步的-Actions&quot; class=&quot;headerlink&quot; title=&quot;异步的 Actions&quot;&gt;&lt;/a&gt;异步的 Actions&lt;/h1&gt;&lt;p&gt;前几篇的教程里面，我们搭建了一个 todo 应用。这是一个完全同步的，每次一个 action 被 dispatched, state 都会即时更新。&lt;br&gt;解析来，我们要搭建一个不同的，异步的应用。它使用 Reddit API 来展示一个选中栏目的头条。&lt;/p&gt;
&lt;h2 id=&quot;Actions&quot;&gt;&lt;a href=&quot;#Actions&quot; class=&quot;headerlink&quot; title=&quot;Actions&quot;&gt;&lt;/a&gt;Actions&lt;/h2&gt;&lt;p&gt;当你调用一个异步的 API 时，有两个至关重要的时刻：你开始调用的时刻，和你收到答复的时刻。&lt;/p&gt;
&lt;p&gt;这两个时刻通常都会需要对应用的 state 做出变化；为此，你需要 dispatch 普通的将会被 reducers 同步处理的 actions. 通常，对于任意 API 请求，你将需要 dispatch 至少三次不同的 actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个通知 reducers 请求开始的 action&lt;br&gt;  reducers 可能通过切换一个 state 中的 &lt;code&gt;isFetching&lt;/code&gt; flag 来处理这个 action.  用来告诉 UI 是时候显示一个等待标识了。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求已经成功完成的 action&lt;br&gt;  reducers 可能通过把新数据合并到它控制的 state 中并重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. UI 会隐藏等待标识，并展示获取到的数据。&lt;/li&gt;
&lt;li&gt;一个通知 reducers 请求失败的 action&lt;br&gt;  reducers 可能通过重置 &lt;code&gt;isFetching&lt;/code&gt; 来处理这个 action. 另外，有些 reducers 可能想要存储这个错误信息，这样可以让 UI 展示出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能需要在 actions 添加一个专用的 &lt;code&gt;status&lt;/code&gt; 字段：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Flex 布局</title>
    <link href="http://kisnows.com/2016/05/04/step-to-flexbox/"/>
    <id>http://kisnows.com/2016/05/04/step-to-flexbox/</id>
    <published>2016-05-04T08:10:43.000Z</published>
    <updated>2016-07-15T14:04:25.907Z</updated>
    
    <content type="html">&lt;p&gt;第一次接触 flex 是在去年，当时是我第一次做手机项目，结果却因为兼容性问题给掉坑了。查了 can I use 发现它只支持到安卓 4.1, 然而我们的要求是要兼容到 4.0 才行的。&lt;br&gt;所以之后一直都没敢用，昨天听到有人说 flex 是可以支持到安卓 2.1 以上的。我不信，难道是我当时看错了？！&lt;br&gt;今天又去查了一下，发现确实是 4.1 啊。盯着屏幕想了半天，突然发现 Can I Use 上一个浏览器浏览器使用率，想着该不会直接把使用率低的浏览器给忽略掉了吧。打开设置一看，果真如此，于是把数据源改成中国，浏览器最小使用率 0.03% 果真 2.3 出来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/step-to-flexbox/can-i-use.png&quot; alt=&quot;Can I USE&quot;&gt;&lt;/p&gt;
&lt;p&gt;既然如此，说明 flex 还是可以在生产环境中使用了。那么就好好在过一下它的用法吧。&lt;br&gt;Flex 就是弹性布局，任何一个元素都可以设置为 flex 布局，当一个元素被设置为 flex 布局后，它的子元素上 float, vertical-align 都会失效。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png&quot; alt=&quot;base&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片出自&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就是说一个 flex 容器有两个轴，一个主轴一个交叉轴。每个轴都有自己对应的起始位置，主轴的起始分别为 main start 和 main end, 交叉轴的起始分别为 cross start 和 cross end.&lt;br&gt;容器内的项目会默认沿着主轴排列，从 main start 到 main end .&lt;/p&gt;
&lt;h1 id=&quot;felx-容器&quot;&gt;&lt;a href=&quot;#felx-容器&quot; class=&quot;headerlink&quot; title=&quot;felx 容器&quot;&gt;&lt;/a&gt;felx 容器&lt;/h1&gt;&lt;p&gt;容器上可以 6 个属性，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-direction&lt;/li&gt;
&lt;li&gt;flex-wrap&lt;/li&gt;
&lt;li&gt;flex-flow&lt;/li&gt;
&lt;li&gt;justify-content&lt;/li&gt;
&lt;li&gt;align-items&lt;/li&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;flex-direction&quot;&gt;&lt;a href=&quot;#flex-direction&quot; class=&quot;headerlink&quot; title=&quot;flex-direction&quot;&gt;&lt;/a&gt;flex-direction&lt;/h2&gt;&lt;p&gt;决定主轴方向，也就是项目的排列方向。&lt;/p&gt;
&lt;h3 id=&quot;MDN-上的语法解释：&quot;&gt;&lt;a href=&quot;#MDN-上的语法解释：&quot; class=&quot;headerlink&quot; title=&quot;MDN 上的语法解释：&quot;&gt;&lt;/a&gt;MDN 上的语法解释：&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* The direction text is laid out in a line */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Like &amp;lt;row&amp;gt;, but reversed */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* The direction in which lines of text are stacked */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Like &amp;lt;column&amp;gt;, but reversed */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Global values */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;inherit&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;initial&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-direction&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;unset&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;下面从左到右分别是 row, row-reverse, colum, colum-reverse. 可以明显的看出他们之间的区别。&lt;/p&gt;
&lt;div&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/1ryjp43c/embed/result,html,css/&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;h2 id=&quot;flex-wrap&quot;&gt;&lt;a href=&quot;#flex-wrap&quot; class=&quot;headerlink&quot; title=&quot;flex-wrap&quot;&gt;&lt;/a&gt;flex-wrap&lt;/h2&gt;&lt;p&gt;flex-wrap 定义内部的 item 是排列在一行还是说当超出时可以换行的属性。如果允许换行，这个属性也能让你控制堆叠的方向。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;nowrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-wrap&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例：&quot;&gt;&lt;a href=&quot;#实例：&quot; class=&quot;headerlink&quot; title=&quot;实例：&quot;&gt;&lt;/a&gt;实例：&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/3f7odnc6/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;flex-flow&quot;&gt;&lt;a href=&quot;#flex-flow&quot; class=&quot;headerlink&quot; title=&quot;flex-flow&quot;&gt;&lt;/a&gt;flex-flow&lt;/h2&gt;&lt;p&gt;flex-flow 是 flex-direction 和 flex-wrap 的简写。&lt;br&gt;初始值： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-directoin: row&lt;/li&gt;
&lt;li&gt;flex-wrap: nowrap&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;语法：&quot;&gt;&lt;a href=&quot;#语法：&quot; class=&quot;headerlink&quot; title=&quot;语法：&quot;&gt;&lt;/a&gt;语法：&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* flex-flow: &amp;lt;&#39;flex-direction&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* flex-flow: &amp;lt;&#39;flex-wrap&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;nowrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;wrap-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* flex-flow: &amp;lt;&#39;flex-direction&#39;&amp;gt; and &amp;lt;&#39;flex-wrap&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;nowrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;wrap&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-flow&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;column-reverse&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;wrap-reverse&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;justify-content&quot;&gt;&lt;a href=&quot;#justify-content&quot; class=&quot;headerlink&quot; title=&quot;justify-content&quot;&gt;&lt;/a&gt;justify-content&lt;/h2&gt;&lt;p&gt;justify-content 用来定义浏览器如何计算主轴上 (main-axis) flex 内部的 item 之间的空隙。&lt;br&gt;对齐的过程会在长度和自动外编剧计算后进行，也就是说只要有一个设置了 flex-grow 不为 0 的弹性 (flexible) 元素，那么 justify-content 就不会起作用了。初始值为 flex-start.&lt;/p&gt;
&lt;h3 id=&quot;语法：-1&quot;&gt;&lt;a href=&quot;#语法：-1&quot; class=&quot;headerlink&quot; title=&quot;语法：&quot;&gt;&lt;/a&gt;语法：&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack flex items from the start */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-start&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack items from the end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack items around the center */&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute items evenly&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The first item at the start, the last at the end */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-between&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute items evenly&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Items have equal space around them */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;justify-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-around&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例：-1&quot;&gt;&lt;a href=&quot;#实例：-1&quot; class=&quot;headerlink&quot; title=&quot;实例：&quot;&gt;&lt;/a&gt;实例：&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/2etbfr66/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;align-item&quot;&gt;&lt;a href=&quot;#align-item&quot; class=&quot;headerlink&quot; title=&quot;align-item&quot;&gt;&lt;/a&gt;align-item&lt;/h2&gt;&lt;p&gt;align-item 属性用来对齐当前 flex line 上的 flex 元素，和 justify-content 一样，不过是是在主轴的垂直方向上作用。初始值为 stretch.&lt;/p&gt;
&lt;h3 id=&quot;语法-1&quot;&gt;&lt;a href=&quot;#语法-1&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Align to cross-start */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-start&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Align to cross-end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Center items in the cross-axis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Align the items&#39; baselines */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;baseline&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Stretch the items to fit */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-items&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;stretch&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;###　实例&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/kisnows/jxbgepc2/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;align-content&quot;&gt;&lt;a href=&quot;#align-content&quot; class=&quot;headerlink&quot; title=&quot;align-content&quot;&gt;&lt;/a&gt;align-content&lt;/h2&gt;&lt;p&gt;align-content 属性定义当交叉轴上有空间时，flex 元素在交叉轴上的对齐方式。对于单行的flex 元素，这个属性没有作用。默认值为： stretch.&lt;/p&gt;
&lt;h3 id=&quot;语法-2&quot;&gt;&lt;a href=&quot;#语法-2&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack lines from the cross-axis start */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-start&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack lines to the cross-axis end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;flex-end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Pack lines around the cross-axis center */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;center&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute lines along the cross-axis, start to end */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-between&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Distribute lines along the cross-axis, equally spaced */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;space-around&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Stretch lines to occupy the whole cross-axis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;align-content&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;stretch&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例-1&quot;&gt;&lt;a href=&quot;#实例-1&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/dhjrbm1o/1/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;flex-项目（子元素）&quot;&gt;&lt;a href=&quot;#flex-项目（子元素）&quot; class=&quot;headerlink&quot; title=&quot;flex 项目（子元素）&quot;&gt;&lt;/a&gt;flex 项目（子元素）&lt;/h1&gt;&lt;p&gt;flex 项目上同样可以设置 6 个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order&lt;/li&gt;
&lt;li&gt;flex-grow&lt;/li&gt;
&lt;li&gt;flex-shrink&lt;/li&gt;
&lt;li&gt;flex-basis&lt;/li&gt;
&lt;li&gt;align-self&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;order&quot;&gt;&lt;a href=&quot;#order&quot; class=&quot;headerlink&quot; title=&quot;order&quot;&gt;&lt;/a&gt;order&lt;/h2&gt;&lt;p&gt;定义项目在主轴上的优先级，越小越靠前。默认为 0.&lt;/p&gt;
&lt;h2 id=&quot;flex-grow&quot;&gt;&lt;a href=&quot;#flex-grow&quot; class=&quot;headerlink&quot; title=&quot;flex-grow&quot;&gt;&lt;/a&gt;flex-grow&lt;/h2&gt;&lt;p&gt;定义项目的拉伸因子，就是计算这个项目如何来占据剩余的空间。默认为 1.&lt;/p&gt;
&lt;h2 id=&quot;flex-shrink&quot;&gt;&lt;a href=&quot;#flex-shrink&quot; class=&quot;headerlink&quot; title=&quot;flex-shrink&quot;&gt;&lt;/a&gt;flex-shrink&lt;/h2&gt;&lt;p&gt;定义项目的因子。默认为 1.&lt;/p&gt;
&lt;h3 id=&quot;order-flex-grow-flex-shrink-实例&quot;&gt;&lt;a href=&quot;#order-flex-grow-flex-shrink-实例&quot; class=&quot;headerlink&quot; title=&quot;order,flex-grow,flex-shrink 实例&quot;&gt;&lt;/a&gt;order,flex-grow,flex-shrink 实例&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/Lxz9wj7n/4/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;flex-basis&quot;&gt;&lt;a href=&quot;#flex-basis&quot; class=&quot;headerlink&quot; title=&quot;flex-basis&quot;&gt;&lt;/a&gt;flex-basis&lt;/h2&gt;&lt;p&gt;flex-basis 定义在初试阶段 flex 占据主轴空间的基础。这个属性决定了 content-box 的尺寸，除非你修改了 box-sizing. 初始值为 auto.&lt;/p&gt;
&lt;h3 id=&quot;语法-3&quot;&gt;&lt;a href=&quot;#语法-3&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Specify &amp;lt;&#39;width&#39;&amp;gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: 3&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;auto&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Intrinsic sizing keywords */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;fill&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;max-content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;min-content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;fit-content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Automatically size based on the flex item’s content */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例-2&quot;&gt;&lt;a href=&quot;#实例-2&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/3zmppe13/embed/result,html,css/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;flex&quot;&gt;&lt;a href=&quot;#flex&quot; class=&quot;headerlink&quot; title=&quot;flex&quot;&gt;&lt;/a&gt;flex&lt;/h2&gt;&lt;p&gt;flex 是一个定义项目改变尺寸能力的一个缩写属性。&lt;br&gt;默认值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-grow: 0&lt;/li&gt;
&lt;li&gt;flex-shrink: 1 &lt;/li&gt;
&lt;li&gt;flex-basis: auto&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;语法-4&quot;&gt;&lt;a href=&quot;#语法-4&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 0 0 auto */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;none&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* One value, unitless number: flex-grow */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* One value, width/height: flex-basis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;auto&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;content&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Two values: flex-grow | flex-basis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 1 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Two values: flex-grow | flex-shrink */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 2 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Three values: flex-grow | flex-shrink | flex-basis */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;flex&lt;/span&gt;: 2 2 10%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;align-self&quot;&gt;&lt;a href=&quot;#align-self&quot; class=&quot;headerlink&quot; title=&quot;align-self&quot;&gt;&lt;/a&gt;align-self&lt;/h2&gt;&lt;p&gt;定义项目的对齐方式，会覆盖 align-items 属性。如果只要有一个项目的交叉轴外边距设置为 auto, 那么 align-self 就会被忽略。默认值为 auto.&lt;/p&gt;
&lt;h3 id=&quot;语法-5&quot;&gt;&lt;a href=&quot;#语法-5&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;和 align-items 相同&lt;/p&gt;
&lt;h3 id=&quot;实例-3&quot;&gt;&lt;a href=&quot;#实例-3&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;&lt;script async src=&quot;https://jsfiddle.net/kisnows/raagzpbz/embed/result,html,css/&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;style&gt;
    iframe {
        min-height: 300px;
    }
&lt;/style&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;第一次接触 flex 是在去年，当时是我第一次做手机项目，结果却因为兼容性问题给掉坑了。查了 can I use 发现它只支持到安卓 4.1, 然而我们的要求是要兼容到 4.0 才行的。&lt;br&gt;所以之后一直都没敢用，昨天听到有人说 flex 是可以支持到安卓 2.1 以上的。我不信，难道是我当时看错了？！&lt;br&gt;今天又去查了一下，发现确实是 4.1 啊。盯着屏幕想了半天，突然发现 Can I Use 上一个浏览器浏览器使用率，想着该不会直接把使用率低的浏览器给忽略掉了吧。打开设置一看，果真如此，于是把数据源改成中国，浏览器最小使用率 0.03% 果真 2.3 出来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/step-to-flexbox/can-i-use.png&quot; alt=&quot;Can I USE&quot;&gt;&lt;/p&gt;
&lt;p&gt;既然如此，说明 flex 还是可以在生产环境中使用了。那么就好好在过一下它的用法吧。&lt;br&gt;Flex 就是弹性布局，任何一个元素都可以设置为 flex 布局，当一个元素被设置为 flex 布局后，它的子元素上 float, vertical-align 都会失效。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png&quot; alt=&quot;base&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="flexbox" scheme="http://kisnows.com/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】走进 Redux 之基础篇(二)</title>
    <link href="http://kisnows.com/2016/05/03/step-to-redux-2/"/>
    <id>http://kisnows.com/2016/05/03/step-to-redux-2/</id>
    <published>2016-05-03T02:02:50.000Z</published>
    <updated>2016-07-15T13:02:46.634Z</updated>
    
    <content type="html">&lt;p&gt;紧接上一篇&lt;a href=&quot;https://www.kisnows.com/2016/04/26/step-to-redux-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;走进 Redux 之基础篇(一)&lt;/a&gt;,接下来会跟着文档从下面三个点开始。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据流&lt;/li&gt;
&lt;li&gt;与 React 配合&lt;/li&gt;
&lt;li&gt;实例：TodoList&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据流&quot;&gt;&lt;a href=&quot;#数据流&quot; class=&quot;headerlink&quot; title=&quot;数据流&quot;&gt;&lt;/a&gt;数据流&lt;/h1&gt;&lt;p&gt;Redux 的架构围绕与如何搭建一个&lt;strong&gt;严格的单向数据流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这意味着所有的数据都有遵循一个同样的生命周期模式，可以让整个应用变得可预测也更加易于理解。在 Redux 应用中，所有的数据生命周期分为如下四个步骤：&lt;/p&gt;
&lt;h2 id=&quot;1-你主动调用-store-dispatch-action&quot;&gt;&lt;a href=&quot;#1-你主动调用-store-dispatch-action&quot; class=&quot;headerlink&quot; title=&quot;1 你主动调用 store.dispatch(action)&quot;&gt;&lt;/a&gt;1 你主动调用 &lt;code&gt;store.dispatch(action)&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Action 是一个用来描述发生了事情的对象。比如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type:&lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;,text:&lt;span class=&quot;string&quot;&gt;&#39;todo\&#39;s content&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_USER_SUCCESS&#39;&lt;/span&gt;, response: &amp;#123;id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;Mary&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以认为 action 是一个事件的简短片段描述。你可以在任何地方调用  &lt;code&gt;store.dispatch(action)&lt;/code&gt;  ，包括组件和 XHR 中，甚至可以在定时器中调用。&lt;/p&gt;
&lt;h2 id=&quot;2-Redux-store-调用你提供的-reducer-函数&quot;&gt;&lt;a href=&quot;#2-Redux-store-调用你提供的-reducer-函数&quot; class=&quot;headerlink&quot; title=&quot;2 Redux store 调用你提供的 reducer 函数&quot;&gt;&lt;/a&gt;2 Redux store 调用你提供的 reducer 函数&lt;/h2&gt;&lt;p&gt;store 会传递俩个参数给 reducer：当前的 state 和 action. 比如，在一个 todo 应用中，根 reducer 会收到类似下面这样的参数：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; previousState = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    visibleTodoFilter: &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ALL&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todos: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        text: &lt;span class=&quot;string&quot;&gt;&#39;Read the docs&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        complete: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; action = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type:  &lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text:  &lt;span class=&quot;string&quot;&gt;&#39;Understand the flow&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// nextState 由 todoApp 这个根 reducer 来生成&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextState = todoApp(previousState, action)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是 reducer 是一个纯函数，没有副作用的，仅仅是计算下一个 state . 他应该是可以完全预测的，对于同样的参数，无论调用多少次都应该返回一个同样值。类似于 API 调用或者路由的变化都应该&lt;strong&gt;在 action 被 dispatch 之前&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;3-根-reducer-可以合并多个子-reducer-的输出来生成一个单一的-state-树。&quot;&gt;&lt;a href=&quot;#3-根-reducer-可以合并多个子-reducer-的输出来生成一个单一的-state-树。&quot; class=&quot;headerlink&quot; title=&quot;3 根 reducer 可以合并多个子 reducer 的输出来生成一个单一的 state 树。&quot;&gt;&lt;/a&gt;3 根 reducer 可以合并多个子 reducer 的输出来生成一个单一的 state 树。&lt;/h2&gt;&lt;p&gt;如何组合根 reducer 完全由你来决定。 Redux 提供了 combineRedux() 这个帮助函数，在把根 reducer 分离成独立的函数去管理整个 state 树的一个分支时很有帮助。&lt;br&gt;我们来看一下 combineRedusers() 这个函数怎么工作。假设你有俩个 reducer ， 一个用来管理 todo 列表，另一个用来管理当前选中的过滤状态：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; function todos(state = [], action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function visibleTodoFilter(state = &amp;apos;SHOW_ALL&amp;apos;, action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let todoApp = combineReducers(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当触发一个 action 的时候， 通过 &lt;code&gt;combineRedusers&lt;/code&gt; 返回的 &lt;code&gt;todoApp&lt;/code&gt; 将会调用&lt;strong&gt;所有&lt;/strong&gt; reducer：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let nextTodos = todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let nextVisibleTodoFilter = visibleTodoFilter(state.visibleTodoFilter, action)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它会把每个 reducer 返回的 state 合并成一个单独的 state 树&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;return &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos: nextTodos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter: nextVisibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以选择不用 &lt;code&gt;combineRedusers&lt;/code&gt; ，毕竟他只是好用的辅助工具，你可以自己来实现你的跟 reducer.&lt;/p&gt;
&lt;h2 id=&quot;4-Redux-store-会保存由根-reducer-返回的整个-state-树&quot;&gt;&lt;a href=&quot;#4-Redux-store-会保存由根-reducer-返回的整个-state-树&quot; class=&quot;headerlink&quot; title=&quot;4 Redux store 会保存由根 reducer 返回的整个 state 树&quot;&gt;&lt;/a&gt;4 Redux store 会保存由根 reducer 返回的整个 state 树&lt;/h2&gt;&lt;p&gt;现在这个新的 state 树就是当前应用的下一个 state 。所有通过 &lt;code&gt;store.subscribe(listener)&lt;/code&gt; 注册了监听事件的监听函数都会被调用； 监听对象可能会调用 &lt;code&gt;store.getState()&lt;/code&gt; 来获取当前的 state .&lt;br&gt;现在，整个视图都可以通过新的 state 来更新。如果你使用 React Redux 做为视图绑定工具，那么这就是 component.setState(newState) 调用的节点。&lt;/p&gt;
&lt;h1 id=&quot;和-React-配合使用&quot;&gt;&lt;a href=&quot;#和-React-配合使用&quot; class=&quot;headerlink&quot; title=&quot;和 React 配合使用&quot;&gt;&lt;/a&gt;和 React 配合使用&lt;/h1&gt;&lt;p&gt;虽然 Redux 和 React 之间没有联系，但是 Redux 确实和类似于 React 和 Deku 这类可以用数据状态俩描述 UI 的框架配合的很好。我们将会使用 React 来搭建一个简单的 Todo 应用。&lt;/p&gt;
&lt;h2 id=&quot;安装-React-Redux&quot;&gt;&lt;a href=&quot;#安装-React-Redux&quot; class=&quot;headerlink&quot; title=&quot;安装 React Redux&quot;&gt;&lt;/a&gt;安装 React Redux&lt;/h2&gt;&lt;p&gt;React bindings 并没有默认包括在 Redux 中，我们需要单独的安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install --save react-redux&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;展示型组件-Presentational-Components-和容器型组件-Container-Components&quot;&gt;&lt;a href=&quot;#展示型组件-Presentational-Components-和容器型组件-Container-Components&quot; class=&quot;headerlink&quot; title=&quot;展示型组件 (Presentational Components) 和容器型组件 (Container Components)&quot;&gt;&lt;/a&gt;展示型组件 (Presentational Components) 和容器型组件 (Container Components)&lt;/h2&gt;&lt;p&gt;Redux 的 React bindings 信奉 &lt;strong&gt;展示型组件和容器型组件分离&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;—&lt;/th&gt;
&lt;th&gt;展示型组件&lt;/th&gt;
&lt;th&gt;容器型组件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;目的&lt;/td&gt;
&lt;td&gt;界面看起来的样子（标记，样式）&lt;/td&gt;
&lt;td&gt;事情是怎样工作的（数据获取，状态更新）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;意识到 Redux&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读取数据&lt;/td&gt;
&lt;td&gt;从父 props 中读取&lt;/td&gt;
&lt;td&gt;顶 Redux state 中订阅获取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修改数据&lt;/td&gt;
&lt;td&gt;从 props  中调用回调函数&lt;/td&gt;
&lt;td&gt;分发 (dispatch) Redux actions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Are written&lt;/td&gt;
&lt;td&gt;手写&lt;/td&gt;
&lt;td&gt;通常由 React Redux 生成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大多数组件都应该被写成展示型组件，但是我们也需要生成一些容器型组件类把它们和 Redux store 连接起来。&lt;/p&gt;
&lt;p&gt;技术上说，你可一通过使用 &lt;code&gt;store.subscribe()&lt;/code&gt; 来手写容器型组件。但是我们不建议这样做，因为 React Redux 做了很多你很难直接手写出来的性能优化。所以，比起手写容器型组件，我们更建议通过 React Redux 提供的 &lt;code&gt;connetc()&lt;/code&gt; 函数来生成它。&lt;/p&gt;
&lt;h2 id=&quot;设计组件层级&quot;&gt;&lt;a href=&quot;#设计组件层级&quot; class=&quot;headerlink&quot; title=&quot;设计组件层级&quot;&gt;&lt;/a&gt;设计组件层级&lt;/h2&gt;&lt;p&gt;我们的设计很简单。我们想要展示一个 todo 内容列表。一个按钮，用来标记一个 todo 内容是否完成。一个用来添加新 todo 的地方。在页脚部，我们需要一个切换键来展示所有的、完成的或者未完成的 todos.&lt;/p&gt;
&lt;h3 id=&quot;展示型组件&quot;&gt;&lt;a href=&quot;#展示型组件&quot; class=&quot;headerlink&quot; title=&quot;展示型组件&quot;&gt;&lt;/a&gt;展示型组件&lt;/h3&gt;&lt;p&gt;通过下面这些展示型组件，我们可以概括出一个 props 层级。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TodoList&lt;/code&gt;  是一个用来展示可用 Todos 的列表&lt;ul&gt;
&lt;li&gt;&lt;code&gt;todos: Array&lt;/code&gt; 一个内容为 { id, text, completed } 样子的列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onTodoClick(id: number)&lt;/code&gt; 一个回调函数，当一个 todo 被点击的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Todo&lt;/code&gt; 一个单独的 todo 项目&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text: string&lt;/code&gt; 要展示的文字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completed: boolean&lt;/code&gt; todo 是否被完成的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onClick&lt;/code&gt;  一个回调函数，当一个 todo 被点击时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Link&lt;/code&gt; 一个用回调的链接&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onClick&lt;/code&gt; 这个链接被点击时的回调&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Footer&lt;/code&gt; 用来改变当前显示 todo 内容的地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;App&lt;/code&gt; 跟组件，用来渲染所有其它的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们描述这个应用看起来的样子，但是不知道数据从哪里来，也不知道如何改变他们。只是渲染我们给它的数据。如果你要从 Redux 迁移到其它框架，这些组件几乎都是可以不用改动的。它们和 Redux 之间没有联系。&lt;/p&gt;
&lt;h3 id=&quot;容器型组件&quot;&gt;&lt;a href=&quot;#容器型组件&quot; class=&quot;headerlink&quot; title=&quot;容器型组件&quot;&gt;&lt;/a&gt;容器型组件&lt;/h3&gt;&lt;p&gt;我们同样需要一些容器型组件来把展示型组件连接到 Redux. 比如，&lt;code&gt;TodoList&lt;/code&gt; 组件需要一个容器 &lt;code&gt;VisibleTodoList&lt;/code&gt; 用来从 Redux 去订阅数据来知道如何使用当前的可视性筛选条件 (visibility filter). 为了更改可视性筛选条件，我们提供一个 &lt;code&gt;FilterLink&lt;/code&gt; 容器来渲染 &lt;code&gt;Link&lt;/code&gt; 用来 dispatches 一个合适的 action 在点击的时候：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VisibleTodoList&lt;/code&gt; 通过当前的可视性筛选条件来过滤要展示的内容并渲染一个 &lt;code&gt;TodoList&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FilterLink&lt;/code&gt; 获得当前的可视性筛选条件并渲染 &lt;code&gt;Link&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter: string&lt;/code&gt; 表示一个可视性筛选条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;其它组件&quot;&gt;&lt;a href=&quot;#其它组件&quot; class=&quot;headerlink&quot; title=&quot;其它组件&quot;&gt;&lt;/a&gt;其它组件&lt;/h3&gt;&lt;p&gt;有时，我们难以去区分一个组件是展示型还是容器型的。比如，有时表单和函数是互相依赖的， 就像这个小型的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AddTodo&lt;/code&gt; 一个有 ‘添加’ 按钮的输入框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术上说，我没呢可以把它分离成俩个组件，但是这样明显太繁琐了。当项目变得负责和庞大的时候，我们可以把它分离开，但是现在的话，就这样让他们混合在一起吧。&lt;/p&gt;
&lt;h3 id=&quot;实现组件&quot;&gt;&lt;a href=&quot;#实现组件&quot; class=&quot;headerlink&quot; title=&quot;实现组件&quot;&gt;&lt;/a&gt;实现组件&lt;/h3&gt;&lt;h4 id=&quot;展示型组件-1&quot;&gt;&lt;a href=&quot;#展示型组件-1&quot; class=&quot;headerlink&quot; title=&quot;展示型组件&quot;&gt;&lt;/a&gt;展示型组件&lt;/h4&gt;&lt;p&gt;就是普通的 React 组件，就不详细介绍了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;TodoList.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123; PropTypes &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Todo &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./Todo&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TodoList = (&amp;#123; todos, onTodoClick &amp;#125;) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;todos.map(todo =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Todo&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;todo.id&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;span class=&quot;attr&quot;&gt;...todo&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;()&lt;/span&gt; =&amp;gt; onTodoClick(todo.id)&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TodoList.propTypes = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  todos: PropTypes.arrayOf(PropTypes.shape(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    id: PropTypes.number.isRequired,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    completed: PropTypes.bool.isRequired,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text: PropTypes.string.isRequired&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;).isRequired).isRequired,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  onTodoClick: PropTypes.func.isRequired&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export default TodoList&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;容器型组件-1&quot;&gt;&lt;a href=&quot;#容器型组件-1&quot; class=&quot;headerlink&quot; title=&quot;容器型组件&quot;&gt;&lt;/a&gt;容器型组件&lt;/h4&gt;&lt;p&gt;接下来我们通过生成容器型组件来把展示型组件和 Redux 链接起来。技术上说，一个容器型组件只是一个 React 组件，通过使用 &lt;code&gt;store.subscribe()&lt;/code&gt; 来读取一部分 Redux state tree 并且提供 props 给一个展示型组件用来渲染。你可以手写这个组件，但是我们建议使用 Redux 提供的 &lt;code&gt;connect()&lt;/code&gt; 函数来生成这些容器型组件，它提供了很多有用的优化去阻止一些不必要重新渲染。&lt;/p&gt;
&lt;p&gt;为了使用它 &lt;code&gt;connect()&lt;/code&gt; , 你需要顶一个叫做 &lt;code&gt;mapStateToProps&lt;/code&gt;  的特殊函数，用来指明如何转换当前的 Redux store state 成为你想要传递给展示型组件的 props. 比如， &lt;code&gt;VisibleTodoList&lt;/code&gt; 需要去计算 &lt;code&gt;todos&lt;/code&gt; 来传递给 &lt;code&gt;TodoList&lt;/code&gt;, 所以我们定义一个函数通过 &lt;code&gt;state.visibilityFilter&lt;/code&gt; 用来过滤 &lt;code&gt;state.todos&lt;/code&gt;,  并且在 &lt;code&gt;mapStateToProps&lt;/code&gt; 中使用它：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getVisibleTodos = (todos, filter) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (filter) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ALL&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todos&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;SHOW_COMPLETED&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todos.filter(t =&amp;gt; t.completed)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ACTIVE&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todos.filter(t =&amp;gt; !t.completed)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mapStateToProps = (state) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todos: getVisibleTodos(state.todos, state.visibilityFilter)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了读取 state 之外， 容器型组件可以 dispatch actions.  通过同样的方式，你可以定义一个名为 &lt;code&gt;mapDispatchToProps()&lt;/code&gt;  的函数去接收 &lt;code&gt;dispatch()&lt;/code&gt; 方法，并返回一个回调 props 用来注入到你想要的展示型组件中。比如，我们想要 &lt;code&gt;VisibleTodoList&lt;/code&gt; 去注入一个名为 &lt;code&gt;onTodoClisk&lt;/code&gt; 的 prop 到 &lt;code&gt;TodoList&lt;/code&gt; 组件中，而且我们想要 &lt;code&gt;onTodoClick&lt;/code&gt; 去 dispatch 一个 `TOGGLE_TODO’ action:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mapDispatchToProps = (dispatch) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onTodoClick: (id) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      dispatch(toggleTodo(id))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们通过调用 &lt;code&gt;connect()&lt;/code&gt; 来生成一个 &lt;code&gt;VisibleTodoList&lt;/code&gt;  并传递这两个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; connect &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; VisibleTodoList = connect(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mapStateToProps,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mapDispatchToProps&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)(TodoList)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; VisibleTodoList&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些都是 React Redux  的基础 API, 但是这有一些快捷方式和强大的选项，所以我们鼓励你去仔细查看 &lt;a href=&quot;https://github.com/reactjs/react-redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个文档&lt;/a&gt;. 如果你担心 &lt;code&gt;mapStateToProps&lt;/code&gt; 创建新对象的过程，你可能需要去了解 &lt;a href=&quot;http://redux.js.org/docs/recipes/ComputingDerivedData.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;computing derived data&lt;/a&gt; with &lt;a href=&quot;https://github.com/rackt/reselect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reselect&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;传递到-Store&quot;&gt;&lt;a href=&quot;#传递到-Store&quot; class=&quot;headerlink&quot; title=&quot;传递到 Store&quot;&gt;&lt;/a&gt;传递到 Store&lt;/h4&gt;&lt;p&gt;所有的容器型组件需要连接到 Redux store 这样它们才能订阅它。一个方式是把它做为一个 prop 传递给每一个容器型组件。然而那样过于繁琐，&lt;br&gt;我们推荐的方式是通过使用特定的 React Redux 组件 &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; 去黑魔法般的使 store 可用给应用中的所有容器型组件而不用专门去传递它。你只需要在渲染跟组件的时候调用它一次。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Index.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; render &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Provider &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; todoApp &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./reducers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./components/App&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; store = createStore(todoApp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;store&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;store&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;App&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;实例：TodoList&quot;&gt;&lt;a href=&quot;#实例：TodoList&quot; class=&quot;headerlink&quot; title=&quot;实例：TodoList&quot;&gt;&lt;/a&gt;实例：TodoList&lt;/h1&gt;&lt;p&gt;直接看文档，虽然了解到很多专有名次和方法，但还是看不出个所以然来。所以还是得看代码，这里是官方的 &lt;a href=&quot;http://redux.js.org/docs/basics/ExampleTodoList.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TodoList&lt;/a&gt; 源码，结合这两篇文章应该就能很好的理解了。&lt;br&gt;我在这里遇到了几个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;webpack 一直报错找不到入口文件 ‘./index’ , 最后发现 babel 的坑。 Babel 升级到 6.0 以后需要在 .babelrc 这个文件中指明要编译 js 的文件类型，否则编译会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面渲染出来后，点击添加什么都是可以正常运行的。但是点击筛选的时候老师报错，而且报的错莫名其妙。于是一步一步打断点来看，最后发现是 &lt;code&gt;Footer.js&lt;/code&gt; 里面 filter 对应的 action 拼写错误导致后面的组件找不到对应的 action &lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; FilterLink &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../containers/FilterLink&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Footer = () =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Show:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&quot; &quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filter&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;SHOW_ALL&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    All&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&quot;, &quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filter&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;SHOW_ACTIVE&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Active&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&quot;, &quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;filter&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;SHOW_COMPLETED&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Completed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;FilterLink&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Footer&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 可见应用的 action 还是需要专门单独维护一个文件，将所有的 action 都定义为变量然后暴露出来，这样如果后面有拼写错误的话，那么在编译阶段就可以发现问题了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basics|Redux&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;紧接上一篇&lt;a href=&quot;https://www.kisnows.com/2016/04/26/step-to-redux-1/&quot;&gt;走进 Redux 之基础篇(一)&lt;/a&gt;,接下来会跟着文档从下面三个点开始。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据流&lt;/li&gt;
&lt;li&gt;与 React 配合&lt;/li&gt;
&lt;li&gt;实例：TodoList&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据流&quot;&gt;&lt;a href=&quot;#数据流&quot; class=&quot;headerlink&quot; title=&quot;数据流&quot;&gt;&lt;/a&gt;数据流&lt;/h1&gt;&lt;p&gt;Redux 的架构围绕与如何搭建一个&lt;strong&gt;严格的单向数据流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这意味着所有的数据都有遵循一个同样的生命周期模式，可以让整个应用变得可预测也更加易于理解。在 Redux 应用中，所有的数据生命周期分为如下四个步骤：&lt;/p&gt;
&lt;h2 id=&quot;1-你主动调用-store-dispatch-action&quot;&gt;&lt;a href=&quot;#1-你主动调用-store-dispatch-action&quot; class=&quot;headerlink&quot; title=&quot;1 你主动调用 store.dispatch(action)&quot;&gt;&lt;/a&gt;1 你主动调用 &lt;code&gt;store.dispatch(action)&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Action 是一个用来描述发生了事情的对象。比如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type:&lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;,text:&lt;span class=&quot;string&quot;&gt;&#39;todo\&#39;s content&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;FETCH_USER_SUCCESS&#39;&lt;/span&gt;, response: &amp;#123;id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;Mary&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以认为 action 是一个事件的简短片段描述。你可以在任何地方调用  &lt;code&gt;store.dispatch(action)&lt;/code&gt;  ，包括组件和 XHR 中，甚至可以在定时器中调用。&lt;/p&gt;
&lt;h2 id=&quot;2-Redux-store-调用你提供的-reducer-函数&quot;&gt;&lt;a href=&quot;#2-Redux-store-调用你提供的-reducer-函数&quot; class=&quot;headerlink&quot; title=&quot;2 Redux store 调用你提供的 reducer 函数&quot;&gt;&lt;/a&gt;2 Redux store 调用你提供的 reducer 函数&lt;/h2&gt;&lt;p&gt;store 会传递俩个参数给 reducer：当前的 state 和 action. 比如，在一个 todo 应用中，根 reducer 会收到类似下面这样的参数：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redux" scheme="http://kisnows.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>【翻译向】走进 Redux 之基础篇(一)</title>
    <link href="http://kisnows.com/2016/04/26/step-to-redux-1/"/>
    <id>http://kisnows.com/2016/04/26/step-to-redux-1/</id>
    <published>2016-04-26T14:17:16.000Z</published>
    <updated>2016-07-15T13:02:34.422Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Redux-的三个原则&quot;&gt;&lt;a href=&quot;#Redux-的三个原则&quot; class=&quot;headerlink&quot; title=&quot;Redux 的三个原则&quot;&gt;&lt;/a&gt;Redux 的三个原则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;整个应用的状态都以一个对象树的形式保存在一个单一的 store 中&lt;/li&gt;
&lt;li&gt;唯一去改变这个对象树的方法就是通过去触发 action,一个用来描述发生了什么事情的对象&lt;/li&gt;
&lt;li&gt;通过编写纯函数 reducers，去描述这个 action 如何改变了整个对象树&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h1&gt;&lt;p&gt;Action 就是承载了要从你的应用传送给 store 的信息。它们只是 store 的信息数据来源。可以通过 &lt;code&gt;store.dispatch()&lt;/code&gt; 来传递 action.&lt;br&gt;action 可能长这个样子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ADD_TODO = &lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text: &lt;span class=&quot;string&quot;&gt;&#39;Bulid my first Redux App&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Actions 就是普通的 JavaScript 对象，但是必须有 &lt;code&gt;type&lt;/code&gt; 属性，用来指定是发生了哪种类型的操作。 Types 应该被定义为字符串常量。当你的项目变的庞大起来时，你可能需要把它们移动到一个单独隔离的模块里面。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; ADD_TODO, REMOVE_TODO &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../actionTypes&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;type&lt;/code&gt; 不同的是，整个 action 的结构完全由你来决定。不过可以参考 &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux Standard Action&lt;/a&gt; 里面的指南来了解如何更好的组织 action 的结构。&lt;/p&gt;
&lt;h2 id=&quot;Action-Creators&quot;&gt;&lt;a href=&quot;#Action-Creators&quot; class=&quot;headerlink&quot; title=&quot;Action Creators&quot;&gt;&lt;/a&gt;Action Creators&lt;/h2&gt;&lt;p&gt;Action Creators 就是用来生成 action 的函数。&lt;br&gt;在 Redux 中 action creators 简单的返回一个 action 对象就可以了：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTodo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        text: &lt;span class=&quot;string&quot;&gt;&#39;Some text&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样可以更加容易的创建一类 action, 而且更易于测试。&lt;/p&gt;
&lt;h2 id=&quot;Dispatch&quot;&gt;&lt;a href=&quot;#Dispatch&quot; class=&quot;headerlink&quot; title=&quot;Dispatch&quot;&gt;&lt;/a&gt;Dispatch&lt;/h2&gt;&lt;p&gt;实际的初始化一个 dispatch 可以通过把结果传递给 &lt;code&gt;diapatch()&lt;/code&gt; 函数：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;store.dispatch(addTodo(text))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;或者，你可以通过创建个一个被的绑定 action creator 用来自动 dispatches：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;`&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;javascript&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; boundAddTodo = (text) =&amp;gt; dispatch(addTodo(text))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你能够直接调用它们了：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;boundAddTodo(text)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatch()&lt;/code&gt; 函数可以直接访问 store 通过 &lt;code&gt;store.dispatch()&lt;/code&gt;，但你可能更喜欢通过使用一个像 react-redux 的 &lt;code&gt;connect()&lt;/code&gt; 这样辅助函数来访问。可以通过 &lt;code&gt;bindActionCreators()&lt;/code&gt; 来自动绑定很多 action creators 到 &lt;code&gt;dispatch()&lt;/code&gt; 函数上。&lt;/p&gt;
&lt;h1 id=&quot;Reducers&quot;&gt;&lt;a href=&quot;#Reducers&quot; class=&quot;headerlink&quot; title=&quot;Reducers&quot;&gt;&lt;/a&gt;Reducers&lt;/h1&gt;&lt;p&gt;Actions 描述一个发生了什么事情的事实，但是没有指定如何去改变应用的 state. 这个就是 reducer 要做的。&lt;/p&gt;
&lt;h2 id=&quot;设计-State-结构&quot;&gt;&lt;a href=&quot;#设计-State-结构&quot; class=&quot;headerlink&quot; title=&quot;设计 State 结构&quot;&gt;&lt;/a&gt;设计 State 结构&lt;/h2&gt;&lt;p&gt;在 Redux 里面，应用的所有状态都被存储在一个单一的对象中。所以在写代码之前考虑一下如何设计 state 是很重要的。如何用最简单的方法来把应用状态描述为一个对象。&lt;br&gt;对于一个 todo 应用来说，我们想要存储俩个不同的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前选中的显示过滤条件&lt;/li&gt;
&lt;li&gt;实际的 todos 列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单的 state 就是下面这个样子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibilityFilter: &lt;span class=&quot;string&quot;&gt;&#39;SHOW_ALL&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           text: &lt;span class=&quot;string&quot;&gt;&#39;Consider using Redux&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           completed: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           text: &lt;span class=&quot;string&quot;&gt;&#39;Keep all state in a single tree&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;处理-Actions&quot;&gt;&lt;a href=&quot;#处理-Actions&quot; class=&quot;headerlink&quot; title=&quot;处理 Actions&quot;&gt;&lt;/a&gt;处理 Actions&lt;/h2&gt;&lt;p&gt;Reducer 是一个纯函数，接受之前的 state 和 action 做为参数，返回下一个 state.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(previousState, action) =&amp;gt; newState&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之所以叫做 reducer 是因为它要被传递给 &lt;code&gt;Array.prototype.reduce(reducer,?initialValue)&lt;/code&gt; 这个函数。所以保持 reduce 的纯净非常重要。永远不要在 reducer 里面做下面的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转换它的函数参数&lt;/li&gt;
&lt;li&gt;做一些带有副作用的操作，比如 API 的调用和路由的跳转&lt;/li&gt;
&lt;li&gt;调用不纯净的函数，比如 &lt;code&gt;Date.now()&lt;/code&gt; 和 &lt;code&gt;Math.random()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了这些以后，我们来开始 reducer 函数。通过指明初始 state 来开始。 Redux 将会在第一次调用 reducer 时传递一个 &lt;code&gt;undefined&lt;/code&gt; state. 这时我们需要返回一个初始化的 state：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; VisibilityFilters &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./actions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initialState = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    visibilityFilter: VisibilityFilters.SHOW_ALL,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todo: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//采用 ES2015 写法，当 state 传递为 undefined 时，会被赋值为 initialState&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来处理 &lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt;. 需要做的就是在 state 上改变 &lt;code&gt;visibilityFilter&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SET_VISIBILITY_FILTER:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, state, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                visibilityFilter: action.SET_VISIBILITY_FILTER&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们不修改原有的 state. 通过 &lt;code&gt;Object.assign()&lt;/code&gt; 创建一个原有 state 和 要改变内容合并后的副本。&lt;/li&gt;
&lt;li&gt;当找不到状况也就是 default 时，必须返回之前的 state&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;处理更多的-Actions&quot;&gt;&lt;a href=&quot;#处理更多的-Actions&quot; class=&quot;headerlink&quot; title=&quot;处理更多的 Actions&quot;&gt;&lt;/a&gt;处理更多的 Actions&lt;/h2&gt;&lt;p&gt;还有一些 action 需要去处理，我们也都一一加上。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SET_VISIBILITY_FILTER:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, state, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            visibilityFilter: action.filter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ADD_TODO:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, state, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                todos: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ...state.todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        text: action.text,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;)    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过分离 reducer 函数来使它更加容易理解，毕竟把 todos 相关的处理逻辑和 visibilityFilter 的处理逻辑放在一块不是很清晰。分离 reducer 也是很简单的。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todos&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state=[], action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ADD_TODO:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ...state,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    text: action.text,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    completed: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;visibilityFilter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = SHOW_ALL, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SET_VISIBILITY_FILTER:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; action.filter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = &amp;#123;&amp;#125;, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        visibilityFilter: visibilityFilter(state.visibilityFilter, action),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        todos: todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，每个 reducer 都管理着整个 state 中属于自己的部分。每个 reducer 的 &lt;code&gt;state&lt;/code&gt; 参数都不同，分别对应他们自己管理部分的 state.&lt;br&gt;当应用变得庞大时，我们可以把 reducer 分离到多个不同的文件中，保持独立性并管理不同的数据源。&lt;br&gt;最后，Redux 提供了一个 &lt;code&gt;combineReducers()&lt;/code&gt; 函数来做和上面 todoApp 同样逻辑的事情，合并多个 reducer, 这样可以省略很多样板代码。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; combineReducers &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; todoApp = combineReducers(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    visibilityFilter,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    todos&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; todoApp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它和下面的写法是完全等价的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;todoApp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = &amp;#123;&amp;#125;, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        visibilityFilter: visibilityFilter(state.visibilityFilter, action),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        todos: todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;combineReducers()&lt;/code&gt; 所做的就是生成一个函数，并给每个 reducer 函数并传入对应的 state，并把它们合并成一个单独的对象。这并不是&lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑魔法&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;combineReducers-原理&quot;&gt;&lt;a href=&quot;#combineReducers-原理&quot; class=&quot;headerlink&quot; title=&quot;combineReducers 原理&quot;&gt;&lt;/a&gt;combineReducers 原理&lt;/h3&gt;&lt;p&gt;15 年看 Redux 时，没有读文档，这里一直没能理解，不知道 &lt;code&gt;combineReducers()&lt;/code&gt; 到底是怎么做的，以为他就是个黑魔法。而且还能通过 &lt;code&gt;combineReducers()&lt;/code&gt; 后的函数生成初始化的 store.&lt;/p&gt;
&lt;p&gt;今天重新读了文档和 &lt;a href=&quot;https://github.com/reactjs/redux/issues/428#issuecomment-129223274&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑魔法&lt;/a&gt; 这个 issue 后理解了。&lt;br&gt;其实 &lt;code&gt;combineReducers()&lt;/code&gt; 是这样工作的。假设你有俩个 reducer ， 一个用来管理 todo 列表，另一个用来管理当前选中的过滤状态：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; function todos(state = [], action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function visibleTodoFilter(state = &amp;apos;SHOW_ALL&amp;apos;, action) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Somehow calculate it...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return nextState&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let todoApp = combineReducers(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，每个 reducer 中都定义了默认的 state:&lt;br&gt;&lt;code&gt;todos&lt;/code&gt; 中为 &lt;code&gt;[]&lt;/code&gt;, 而 &lt;code&gt;visibleTodoFilter&lt;/code&gt; 中为 &lt;code&gt;SHOW_ALL&lt;/code&gt;。&lt;br&gt;当触发一个 action 的时候， 通过 combineReduser 返回的 todoApp 将会调用&lt;strong&gt;整个&lt;/strong&gt; reducer：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextTodos = todos(state.todos, action)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextVisibleTodoFilter = visibleTodoFilter(state.visibleTodoFilter, action)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终它会把每个 reducer 返回的 state 合并成一个单独的 state 树&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   todos: nextTodos,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   visibleTodoFilter: nextVisibleTodoFilter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就可以理解 combineReducer 的工作原理了。当然你也可以选择不用 combineReduser ，毕竟他只是一个官方提供的辅助工具，你可以自己来实现你的根 reducer.&lt;/p&gt;
&lt;h1 id=&quot;Store&quot;&gt;&lt;a href=&quot;#Store&quot; class=&quot;headerlink&quot; title=&quot;Store&quot;&gt;&lt;/a&gt;Store&lt;/h1&gt;&lt;p&gt;Store 是一个对象，用来把它们联系起来。Store 的职责如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存整个应用的 state&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;getState()&lt;/code&gt; 来获取 state&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;dispatch(action)&lt;/code&gt; 来更新 state&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;subscribe(listener)&lt;/code&gt; 来注册监听器&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;subscribe(listener)&lt;/code&gt; 返回的值来处理没有注册的监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的只能有一个 store 在 Redux 应用中。当你想要分离数据逻辑时，你可以通过创建更多的 reducer 来代替更多的 store.&lt;br&gt;当你拥有一个 reducer 时，创建 store 是很容易的。我们可以通过 &lt;code&gt;combineReducers()&lt;/code&gt; 后创建的根 reducer 来创建 store.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; todoApp &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./reducers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; store = createStore(todoApp)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以通过传递可选参数来初始化 state. 当你开发一个通过应用时着很有用，可以把服务端传来的 state 做为客户端初始化 state.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; store = createStore(todoApp, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.STATE_FROM_SERVER)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;理解了这些内容，就大概可以知道 Redux 是怎么运作的了。可见读文档还是很有用的，不像去年直接去看官方例子里的源码，结果看的一愣一愣的，最后也不明白是个怎么回事。&lt;br&gt;接下来，要继续学习数据流以及和 React 的配合，并动手写一个 TodoList 实例来加深理解。&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://redux.js.org/docs/basics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basics|Redux&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-的三个原则&quot;&gt;&lt;a href=&quot;#Redux-的三个原则&quot; class=&quot;headerlink&quot; title=&quot;Redux 的三个原则&quot;&gt;&lt;/a&gt;Redux 的三个原则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;整个应用的状态都以一个对象树的形式保存在一个单一的 store 中&lt;/li&gt;
&lt;li&gt;唯一去改变这个对象树的方法就是通过去触发 action,一个用来描述发生了什么事情的对象&lt;/li&gt;
&lt;li&gt;通过编写纯函数 reducers，去描述这个 action 如何改变了整个对象树&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h1&gt;&lt;p&gt;Action 就是承载了要从你的应用传送给 store 的信息。它们只是 store 的信息数据来源。可以通过 &lt;code&gt;store.dispatch()&lt;/code&gt; 来传递 action.&lt;br&gt;action 可能长这个样子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ADD_TODO = &lt;span class=&quot;string&quot;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text: &lt;span class=&quot;string&quot;&gt;&#39;Bulid my first Redux App&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Actions 就是普通的 JavaScript 对象，但是必须有 &lt;code&gt;type&lt;/code&gt; 属性，用来指定是发生了哪种类型的操作。 Types 应该被定义为字符串常量。当你的项目变的庞大起来时，你可能需要把它们移动到一个单独隔离的模块里面。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; ADD_TODO, REMOVE_TODO &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../actionTypes&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;type&lt;/code&gt; 不同的是，整个 action 的结构完全由你来决定。不过可以参考 &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; 里面的指南来了解如何更好的组织 action 的结构。&lt;/p&gt;
&lt;h2 id=&quot;Action-Creators&quot;&gt;&lt;a href=&quot;#Action-Creators&quot; class=&quot;headerlink&quot; title=&quot;Action Creators&quot;&gt;&lt;/a&gt;Action Creators&lt;/h2&gt;&lt;p&gt;Action Creators 就是用来生成 action 的函数。&lt;br&gt;在 Redux 中 action creators 简单的返回一个 action 对象就可以了：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addTodo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type: ADD_TODO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        text: &lt;span class=&quot;string&quot;&gt;&#39;Some text&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样可以更加容易的创建一类 action, 而且更易于测试。&lt;/p&gt;
&lt;h2 id=&quot;Dispatch&quot;&gt;&lt;a href=&quot;#Dispatch&quot; class=&quot;headerlink&quot; title=&quot;Dispatch&quot;&gt;&lt;/a&gt;Dispatch&lt;/h2&gt;&lt;p&gt;实际的初始化一个 dispatch 可以通过把结果传递给 &lt;code&gt;diapatch()&lt;/code&gt; 函数：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redux" scheme="http://kisnows.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的类和继承</title>
    <link href="http://kisnows.com/2016/03/21/class%20and%20inherit%20in%20JavaScript/"/>
    <id>http://kisnows.com/2016/03/21/class and inherit in JavaScript/</id>
    <published>2016-03-21T11:38:13.000Z</published>
    <updated>2016-04-13T13:05:16.446Z</updated>
    
    <content type="html">&lt;p&gt;我们都知道 JavaScript 是一门基于原型的语言。当我们调用一个对象本身没有的属性时，JavaScript 就会从对象的原型对象上去找该属性，如果原型上也没有该属性，那就去找原型的原型，一直找原型链的末端也就是 &lt;code&gt;Object.prototype&lt;/code&gt; 的原型 &lt;code&gt;null&lt;/code&gt;。这种属性查找的方式我们称之为原型链。&lt;/p&gt;
&lt;h1 id=&quot;类的实现&quot;&gt;&lt;a href=&quot;#类的实现&quot; class=&quot;headerlink&quot; title=&quot;类的实现&quot;&gt;&lt;/a&gt;类的实现&lt;/h1&gt;&lt;p&gt;由于 JavaScript 本身是没有的类的感念的。所以我们如果要实现一个类，一般是通过构造函数来模拟类的实现：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;//实现一个类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//通过 new 来新建实例&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先新建一个 &lt;code&gt;Person&lt;/code&gt; 的构造函数，为了和一般的函数区别，我们会使用 CamelCase 方式来命名构造函数。&lt;br&gt;然后通过 &lt;code&gt;new&lt;/code&gt; 操作符来创建实例，&lt;code&gt;new&lt;/code&gt; 操作符其实干了这么几件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个继承自 &lt;code&gt;Person.prototype&lt;/code&gt; 的新对象&lt;/li&gt;
&lt;li&gt;构造函数 &lt;code&gt;Person&lt;/code&gt; 执行时，相应的参数传入，同时上下文被指定为这个新建的对象。&lt;/li&gt;
&lt;li&gt;如果构造函数返回了一个对象，那么这个对象会取代 &lt;code&gt;new&lt;/code&gt; 的结果。如果构造函数返回的不是对象，则会忽略这个返回值。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;返回值不是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;person&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you 的值: Person &amp;#123;name: &quot;you&quot;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;返回值是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you的值: [1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果类的实例需要共享类的方法，那么就需要给构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性添加方法了。因为 &lt;code&gt;new&lt;/code&gt; 操作符创建的对象都继承自构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性。他们可以共享定义在类 &lt;code&gt;prototype&lt;/code&gt; 上的方法和属性。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayName: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;My name is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; me = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;me&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.sayName()   &lt;span class=&quot;comment&quot;&gt;// My name is you.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;me.sayName()    &lt;span class=&quot;comment&quot;&gt;// My name is me.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;继承的实现&quot;&gt;&lt;a href=&quot;#继承的实现&quot; class=&quot;headerlink&quot; title=&quot;继承的实现&quot;&gt;&lt;/a&gt;继承的实现&lt;/h1&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;JavaScript 中常用的继承方式是组合继承，也就是通过构造函数和原型链继承同时来模拟继承的实现。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Person 构造函数如上&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,clas&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name,age)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clas = clas;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(Person.prototype);        &lt;span class=&quot;comment&quot;&gt;// Mark 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.constructor = Student;      &lt;span class=&quot;comment&quot;&gt;//如果不指明，则 Student 会找不到 constructor&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype.study = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;I study in class&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clas)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Person    &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Student   &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.sayName();       &lt;span class=&quot;comment&quot;&gt;// My name is liming&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.study();         &lt;span class=&quot;comment&quot;&gt;// I study in class 7&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码中 Mark 1 用到了 &lt;code&gt;Object.create&lt;/code&gt; 方法。这个是 ES5 中新增的方法，用来创建一个拥有指定原型的对象。如果环境不兼容，可以用下面这个 Polyfill 来实现（仅实现第一个参数）。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        F.prototype = obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实就是把 &lt;code&gt;obj&lt;/code&gt; 赋值给临时函数 &lt;code&gt;F&lt;/code&gt; ，然后返回一个 &lt;code&gt;F&lt;/code&gt; 的实例。这样通过代码 Mark 1 &lt;code&gt;Student&lt;/code&gt; 就得到了 &lt;code&gt;Person.prototype&lt;/code&gt; 上的所有属性。有人会问了，那么为什么不干脆把 &lt;code&gt;Person.prototype&lt;/code&gt; 直接赋值给 &lt;code&gt;Student.prototype&lt;/code&gt; 呢？&lt;/p&gt;
&lt;p&gt;是的，直接赋值是可以达到子类共享父类 &lt;code&gt;prototype&lt;/code&gt; 的目的，但是它破坏了原型链。即：子类和父类共用了同一个 &lt;code&gt;prototype&lt;/code&gt;,这样当某一个子类修改 &lt;code&gt;prototype&lt;/code&gt; 的时候，其实同时也修改了父类的 &lt;code&gt;prototype&lt;/code&gt;,那么就会影响到所有基于这个父类创建的子类，这并不是我们想要的结果。看例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Person 同上&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Student 同上&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype = Person.prototype;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;My name is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name,&lt;span class=&quot;string&quot;&gt;&#39;my class is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clas)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.sayName()        &lt;span class=&quot;comment&quot;&gt;//My name is liming,my class is 7;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//另一个子类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,salary&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.call(name,age);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.salary = salary;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Employee.prototype = Person.prototype;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; emp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Employee(&lt;span class=&quot;string&quot;&gt;&#39;emp&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emp.sayName()       &lt;span class=&quot;comment&quot;&gt;//Mark 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你们猜 Mark 2 会输出什么？&lt;/p&gt;
&lt;p&gt;我们期望的 Mark 2 应该会输出 “My name is emp”. 但实际上报错，为什么呢？因为我们改写 &lt;code&gt;Student.prototype&lt;/code&gt; 的时候，也同时修改了 &lt;code&gt;Person.prototype&lt;/code&gt;，最终导致 &lt;code&gt;emp&lt;/code&gt; 继承的 &lt;code&gt;prototype&lt;/code&gt; 是我们所不期望的，它的 sayName 方法是 &lt;code&gt;My name is&amp;#39;,this.name,&amp;#39;my class is&amp;#39;,this.clas&lt;/code&gt;，这样自然是会报错的。&lt;/p&gt;
&lt;h2 id=&quot;ES6-的继承&quot;&gt;&lt;a href=&quot;#ES6-的继承&quot; class=&quot;headerlink&quot; title=&quot;ES6 的继承&quot;&gt;&lt;/a&gt;ES6 的继承&lt;/h2&gt;&lt;p&gt;随着 ECMAScript 6 的发布，我们有了新的方法来实现继承。也就是通过 &lt;code&gt;class&lt;/code&gt; 关键字。&lt;/p&gt;
&lt;h3 id=&quot;类的实现-1&quot;&gt;&lt;a href=&quot;#类的实现-1&quot; class=&quot;headerlink&quot; title=&quot;类的实现&quot;&gt;&lt;/a&gt;类的实现&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayHello()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`My name is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.name&amp;#125;&lt;/span&gt;,i&#39;m &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.age&amp;#125;&lt;/span&gt; years old`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.sayHello()      &lt;span class=&quot;comment&quot;&gt;//My name is you,i&#39;m 23 years old.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;ES6 里面的继承也很方便，通过 &lt;code&gt;extends&lt;/code&gt; 关键字来实现。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age,cla)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name,age);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.class = cla;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    study()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`I&#39;m study in class &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.class&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.study()      &lt;span class=&quot;comment&quot;&gt;// I&#39;m study in class 7.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个继承相比上面的 ES5 里面实现的继承要方便了很多，但其实原理是一样的，提供的这些关键字方法只是语法糖而已，并没有改变 Js 是基于原型这么一个事实。不过 &lt;code&gt;extends&lt;/code&gt; 这样实现的继承有一个限制，就是不能定义属性，只能定义方法。要新添属性，还是得通过修改 &lt;code&gt;prototype&lt;/code&gt; 来达到目的。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Student.prototype.teacher = &lt;span class=&quot;string&quot;&gt;&#39;Mr.Li&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hanmeimei = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;hanmeimei&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.teacher          &lt;span class=&quot;comment&quot;&gt;//Mr.Li&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hanmeimei.teacher       &lt;span class=&quot;comment&quot;&gt;//Mr.Li&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;静态方法&quot;&gt;&lt;a href=&quot;#静态方法&quot; class=&quot;headerlink&quot; title=&quot;静态方法&quot;&gt;&lt;/a&gt;静态方法&lt;/h3&gt;&lt;p&gt;ES6 还提供了 &lt;code&gt;static&lt;/code&gt; 关键字，来实现静态方法。静态方法可以继承，但只能由类本身调用，不能被实例调用。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; say()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Static&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.say()        &lt;span class=&quot;comment&quot;&gt;// Static&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Student.say()       &lt;span class=&quot;comment&quot;&gt;// Static&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.say()           &lt;span class=&quot;comment&quot;&gt;// TypeError: liming.say is not a function&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在实例上调用的时候会直接报错。&lt;/p&gt;
&lt;h3 id=&quot;Super关键字&quot;&gt;&lt;a href=&quot;#Super关键字&quot; class=&quot;headerlink&quot; title=&quot;Super关键字&quot;&gt;&lt;/a&gt;Super关键字&lt;/h3&gt;&lt;p&gt;在子类中可以通过 &lt;code&gt;super&lt;/code&gt; 来调用父类，根据调用位置的不同，行为也不同。在 &lt;code&gt;constructor&lt;/code&gt; 中调用，相当于调用父类的 &lt;code&gt;constructor&lt;/code&gt; 方法，而在普通方法里面调用则相当与调用父类本身。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayHello()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`My name is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.name&amp;#125;&lt;/span&gt;,i&#39;m &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.age&amp;#125;&lt;/span&gt; years old`&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name,age,cla)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name,age);        &lt;span class=&quot;comment&quot;&gt;// 必须在子类调用 this 前执行，调用了父类的 constructor&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.class = cla;       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayHello()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.sayHello;         &lt;span class=&quot;comment&quot;&gt;// 调用父类方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Student say&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; liming = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student(&lt;span class=&quot;string&quot;&gt;&#39;liming&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;liming.say()        &lt;span class=&quot;comment&quot;&gt;// My name is liming,i&#39;m 23 years old.\n Student say.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;至此，我们可以看到：在 ES6 发布以后，JavaScript 中实现继承有了一个标准的方法。虽然它们只是语法糖，背后的本质还是通过原型链以及构造函数实现的，不过在写法上更易于我们理解而且也更加清晰。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002440502#articleHeader7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript继承方式详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ruby-china.org/topics/27499&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 原型系统的变迁，以及 ES6 class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道 JavaScript 是一门基于原型的语言。当我们调用一个对象本身没有的属性时，JavaScript 就会从对象的原型对象上去找该属性，如果原型上也没有该属性，那就去找原型的原型，一直找原型链的末端也就是 &lt;code&gt;Object.prototype&lt;/code&gt; 的原型 &lt;code&gt;null&lt;/code&gt;。这种属性查找的方式我们称之为原型链。&lt;/p&gt;
&lt;h1 id=&quot;类的实现&quot;&gt;&lt;a href=&quot;#类的实现&quot; class=&quot;headerlink&quot; title=&quot;类的实现&quot;&gt;&lt;/a&gt;类的实现&lt;/h1&gt;&lt;p&gt;由于 JavaScript 本身是没有的类的感念的。所以我们如果要实现一个类，一般是通过构造函数来模拟类的实现：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;//实现一个类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//通过 new 来新建实例&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先新建一个 &lt;code&gt;Person&lt;/code&gt; 的构造函数，为了和一般的函数区别，我们会使用 CamelCase 方式来命名构造函数。&lt;br&gt;然后通过 &lt;code&gt;new&lt;/code&gt; 操作符来创建实例，&lt;code&gt;new&lt;/code&gt; 操作符其实干了这么几件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个继承自 &lt;code&gt;Person.prototype&lt;/code&gt; 的新对象&lt;/li&gt;
&lt;li&gt;构造函数 &lt;code&gt;Person&lt;/code&gt; 执行时，相应的参数传入，同时上下文被指定为这个新建的对象。&lt;/li&gt;
&lt;li&gt;如果构造函数返回了一个对象，那么这个对象会取代 &lt;code&gt;new&lt;/code&gt; 的结果。如果构造函数返回的不是对象，则会忽略这个返回值。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;返回值不是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;person&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you 的值: Person &amp;#123;name: &quot;you&quot;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;返回值是对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  you的值: [1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果类的实例需要共享类的方法，那么就需要给构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性添加方法了。因为 &lt;code&gt;new&lt;/code&gt; 操作符创建的对象都继承自构造函数的 &lt;code&gt;prototype&lt;/code&gt; 属性。他们可以共享定义在类 &lt;code&gt;prototype&lt;/code&gt; 上的方法和属性。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sayName: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;My name is&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;you&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; me = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;me&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you.sayName()   &lt;span class=&quot;comment&quot;&gt;// My name is you.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;me.sayName()    &lt;span class=&quot;comment&quot;&gt;// My name is me.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;继承的实现&quot;&gt;&lt;a href=&quot;#继承的实现&quot; class=&quot;headerlink&quot; title=&quot;继承的实现&quot;&gt;&lt;/a&gt;继承的实现&lt;/h1&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="inherit" scheme="http://kisnows.com/tags/inherit/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署到VPS并启用HTTPS</title>
    <link href="http://kisnows.com/2016/03/10/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0VPS%E5%B9%B6%E5%90%AF%E7%94%A8HTTPS/"/>
    <id>http://kisnows.com/2016/03/10/Hexo部署到VPS并启用HTTPS/</id>
    <published>2016-03-10T13:12:49.000Z</published>
    <updated>2016-12-09T10:31:39.362Z</updated>
    
    <content type="html">&lt;p&gt;上周买了个 VPS 玩 ，从板瓦工买的，一年的 19 刀。性价比还算合适，这是配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;10 GB SSD RAID-10 Disk Space&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;256 MB RAM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500 GB Transfer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Gigabit port&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Multiple locations&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是&lt;a href=&quot;https://bandwagonhost.com/aff.php?aff=7249&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;购买链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;买过来，先是搭了个 SS 解决科学上网的问题。然后想想要不要把博客也迁移过去算了,一个 ss 又用不了多少流量。于是说干就干，一番搜索查询后，达成成就。&lt;/p&gt;
&lt;p&gt;简单的记录下操作的步骤：&lt;/p&gt;
&lt;h1 id=&quot;客户端：&quot;&gt;&lt;a href=&quot;#客户端：&quot; class=&quot;headerlink&quot; title=&quot;客户端：&quot;&gt;&lt;/a&gt;客户端：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;配置 ssh&lt;/li&gt;
&lt;li&gt;本地部署 hexo&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;服务器：&quot;&gt;&lt;a href=&quot;#服务器：&quot; class=&quot;headerlink&quot; title=&quot;服务器：&quot;&gt;&lt;/a&gt;服务器：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;安装所需软件&lt;br&gt; a. Git&lt;br&gt; b. Nginx&lt;/li&gt;
&lt;li&gt;为了安全与方便，新建专用与部署 hexo 的用户git，并给予相应权限。&lt;/li&gt;
&lt;li&gt;配置 ssh，与客户端达成通道&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置 git hooks，这样本地在 hexo 部署到服务器 git 用户的对应仓库后就不用在把它复制到用以访问的网站的文件夹了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GIT_REPO=/home/git/hexo.git &lt;span class=&quot;comment&quot;&gt;#git仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TMP_GIT_CLONE=/tmp/hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PUBLIC_WWW=/var/www/hexo &lt;span class=&quot;comment&quot;&gt;#网站目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;GIT_REPO&amp;#125;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;/* &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置nginx，并启动nginx服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;访问 vps 地址，直接显示403 forbidden，以为是权限问题，网上查了半天也没解决。最后发现用于网站的目录下是空的。&lt;/li&gt;
&lt;li&gt;由问题1推断出，Git hooks 压根没起作用。因为用于放网站文件夹下一直都是空的，于是手动试git hooks 下面的命令，执行到 rm -rf ${PUBLIC_WWW}的时候，系统提示操作被拒绝，发现是权限问题，赋予git用户用于放网站的 &lt;code&gt;www/hexo&lt;/code&gt; 的权限。&lt;/li&gt;
&lt;li&gt;ssh 在服务器重启后出现问题，多方排查后发现也是权限问题，赋予 git 用户.ssh 文件 700 权限&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输入 www.kisnows.com ，访问成功，哈哈，好开心。而且国内访问速度比原来快了一点点，虽然就那么一点点。&lt;/p&gt;
&lt;p&gt;想想也上个 SSL 吧，不然太落后了，毕竟最近电信劫持很严重。因为不想投入过大成本，就打算用 cloudFlare 提供的免费 SSL。虽然只是浏览器到 cloudFlare 之间是加密的，但是有总比没有强嘛。&lt;br&gt;于是把 DNS 服务从 DNSPod 切换到了cloudFlare，并借助 cloudFlare 全站启用了 HTTPS，同时将顶级域名重定向到了www 下的二级域名。方法如下：&lt;/p&gt;
&lt;h2 id=&quot;启用HTTPS&quot;&gt;&lt;a href=&quot;#启用HTTPS&quot; class=&quot;headerlink&quot; title=&quot;启用HTTPS&quot;&gt;&lt;/a&gt;启用HTTPS&lt;/h2&gt;&lt;p&gt;进入 cloudFlare 管理中心，Crypto下&lt;br&gt;&lt;img src=&quot;/imgs/Hexo部署到VPS并启用HTTPS/ssl.png&quot; alt=&quot;ssl&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;强制非HTTPS访问跳转到HTTPS&quot;&gt;&lt;a href=&quot;#强制非HTTPS访问跳转到HTTPS&quot; class=&quot;headerlink&quot; title=&quot;强制非HTTPS访问跳转到HTTPS&quot;&gt;&lt;/a&gt;强制非HTTPS访问跳转到HTTPS&lt;/h2&gt;&lt;p&gt;位于 Page Rules 模块下&lt;br&gt;&lt;img src=&quot;/imgs/Hexo部署到VPS并启用HTTPS/pagerules.png&quot; alt=&quot;ssl&quot;&gt;&lt;br&gt;上图1，选 always use https，然后如图第一条规则，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://*.kisnows.com/*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样所有匹配的所有访问，都会走 https 了。&lt;/p&gt;
&lt;h2 id=&quot;顶级域名重定向到带-www-的二级域名下&quot;&gt;&lt;a href=&quot;#顶级域名重定向到带-www-的二级域名下&quot; class=&quot;headerlink&quot; title=&quot;顶级域名重定向到带 www 的二级域名下&quot;&gt;&lt;/a&gt;顶级域名重定向到带 www 的二级域名下&lt;/h2&gt;&lt;p&gt;也是用 Page Rules，如上图2。选 Forwarding，然后匹配如下填写就OK了：&lt;br&gt;&lt;img src=&quot;/imgs/Hexo部署到VPS并启用HTTPS/redirect.png&quot; alt=&quot;redirect&quot;&gt;&lt;br&gt;Forwarding 中的 &lt;code&gt;$1&lt;/code&gt; 就是 &lt;code&gt;kisnows.com/*&lt;/code&gt; 中 &lt;code&gt;*&lt;/code&gt; 匹配到元素。&lt;/p&gt;
&lt;p&gt;至此，为期两天的折腾完毕，全站迁移到了 VPS，并全程启用 HTTPS。&lt;br&gt;真是生命不息，折腾不止啊！&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br&gt;&lt;a href=&quot;http://tiktoking.github.io/2016/01/26/hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tiktoking.github.io/2016/01/26/hexo/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.hansoncoder.com/2016/03/02/VPS%20building%20Hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hansoncoder.com/2016/03/02/VPS%20building%20Hexo/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://hejun.me/2015/01/05/deploy-hexo-on-cloud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hejun.me/2015/01/05/deploy-hexo-on-cloud/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上周买了个 VPS 玩 ，从板瓦工买的，一年的 19 刀。性价比还算合适，这是配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;10 GB SSD RAID-10 Disk Space&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;256 MB RAM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;500 GB Transfer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Gigabit port&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Multiple locations&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是&lt;a href=&quot;https://bandwagonhost.com/aff.php?aff=7249&quot;&gt;购买链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;买过来，先是搭了个 SS 解决科学上网的问题。然后想想要不要把博客也迁移过去算了,一个 ss 又用不了多少流量。于是说干就干，一番搜索查询后，达成成就。&lt;/p&gt;
&lt;p&gt;简单的记录下操作的步骤：&lt;/p&gt;
&lt;h1 id=&quot;客户端：&quot;&gt;&lt;a href=&quot;#客户端：&quot; class=&quot;headerlink&quot; title=&quot;客户端：&quot;&gt;&lt;/a&gt;客户端：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;配置 ssh&lt;/li&gt;
&lt;li&gt;本地部署 hexo&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;服务器：&quot;&gt;&lt;a href=&quot;#服务器：&quot; class=&quot;headerlink&quot; title=&quot;服务器：&quot;&gt;&lt;/a&gt;服务器：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;安装所需软件&lt;br&gt; a. Git&lt;br&gt; b. Nginx&lt;/li&gt;
&lt;li&gt;为了安全与方便，新建专用与部署 hexo 的用户git，并给予相应权限。&lt;/li&gt;
&lt;li&gt;配置 ssh，与客户端达成通道&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置 git hooks，这样本地在 hexo 部署到服务器 git 用户的对应仓库后就不用在把它复制到用以访问的网站的文件夹了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GIT_REPO=/home/git/hexo.git &lt;span class=&quot;comment&quot;&gt;#git仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TMP_GIT_CLONE=/tmp/hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PUBLIC_WWW=/var/www/hexo &lt;span class=&quot;comment&quot;&gt;#网站目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;GIT_REPO&amp;#125;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp -rf &lt;span class=&quot;variable&quot;&gt;$&amp;#123;TMP_GIT_CLONE&amp;#125;&lt;/span&gt;/* &lt;span class=&quot;variable&quot;&gt;$&amp;#123;PUBLIC_WWW&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置nginx，并启动nginx服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h2&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网站建设" scheme="http://kisnows.com/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 缓存</title>
    <link href="http://kisnows.com/2016/03/07/http-cache/"/>
    <id>http://kisnows.com/2016/03/07/http-cache/</id>
    <published>2016-03-07T12:57:46.000Z</published>
    <updated>2016-04-27T14:32:17.809Z</updated>
    
    <content type="html">&lt;p&gt;下午意外的接到了阿里钉钉前端的面试，很是欣喜。&lt;br&gt;面试内容从做的项目，到使用的技术 Angular、React、Express 等，让我感觉到自己的理解还是不够深刻。&lt;br&gt;比如我说我喜欢 React，大项目中需要配合 Redux 来用处理数据，然后就问到 Redux 到底解决了哪些问题，我没能清楚的答上来。但是整体上，面试的前面部分，自我感觉还是很不错的。&lt;br&gt;但是到最后，面试官说问一个比较基础的问题：如何在HTTP协议中控制缓存？&lt;br&gt;我懵了，平时工作中根本接触不到。只能凭自己感觉说，从文件名的更改以及在 HTTP 的 header 中设置相应参数来设置，但具体怎样设置，设置的内容是什么，我完全答不上来。感觉肯定是要挂在这里。不过俗话说的好，人不能在同一个地方跌到两次，谨以此篇记录HTTP缓存的相应内容。&lt;/p&gt;
&lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt;HTTP 控制缓存主要有一下几种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expires&lt;/li&gt;
&lt;li&gt;Cache-Control&lt;/li&gt;
&lt;li&gt;Last-Modified/If-Modified-Since&lt;/li&gt;
&lt;li&gt;Etag/If-None-Match&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来，就一个一个来了解。&lt;/p&gt;
&lt;h2 id=&quot;Expires&quot;&gt;&lt;a href=&quot;#Expires&quot; class=&quot;headerlink&quot; title=&quot;Expires&quot;&gt;&lt;/a&gt;Expires&lt;/h2&gt;&lt;p&gt;过期时间，有点类似于 cookies 里面的 Expires。可以在 header 中设置一个具体的过期时间，在这个过期时间内，浏览器都不会向服务器请求这个文件，会直接存本地的缓存中读取。&lt;br&gt;&lt;img src=&quot;/imgs/http-cache/headers.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;上图是我博客中一个 js 文件的 HTTP header，可以看到其中红框1 Expires 设置为当前 Date 的4个小时后，也就是说正常情况这个文件在 Expires 这个时间点以前的请求都会直接使用本地缓存，而不用从服务端重新获取。&lt;br&gt;需要注意的是，Expires 是 HTTP 1.0 的东西，现在绝大多数浏览器都默认使用 HTTP 1.1，所以用 Expires 控制缓存不是首选的方法。&lt;/p&gt;
&lt;h2 id=&quot;Cache-control&quot;&gt;&lt;a href=&quot;#Cache-control&quot; class=&quot;headerlink&quot; title=&quot;Cache-control&quot;&gt;&lt;/a&gt;Cache-control&lt;/h2&gt;&lt;p&gt;Cache-control 与 Expires 作用基本相同，都是标志出当前资源的有效期，以此来控制浏览器是使用本地缓存还是从服务器重新获取资源。不过，不同的地方在于，Cache-control 能够控制的更加细致，当header中同时存在 Expires 时，Cache-control 的优先级要更高一些。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP协议头 Cache-Control 的值可以是 public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age&lt;br&gt;各个消息中的指令含义如下：&lt;br&gt;    Public      指示响应可被任何缓存区缓存。&lt;br&gt;    Private     指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。&lt;br&gt;    no-cache    指示请求或响应消息不能缓存&lt;br&gt;    no-store    用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。&lt;br&gt;    &lt;strong&gt;max-age&lt;/strong&gt;   &lt;strong&gt;指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。&lt;/strong&gt;&lt;br&gt;    min-fresh   指示客户机可以接收响应时间小于当前时间加上指定时间的响应。&lt;br&gt;    max-stale   指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/http-cache/headers.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;如图，红框2上面的 Cache-Control 这一栏，值为 public，max-age=14400. 就是说它的有效期是 14400s，也就是4h，和上面的 Expires 的过期时间是一样的，但是它不像 Expires 那样必须给一个类似 Mon，07 Mar 2016 17:14:33 GMT 这样具体的时间，只需要给定一个最大寿命的时间就可以了。这个应该是比较常用的方法。&lt;/p&gt;
&lt;h2 id=&quot;Last-Modified-If-Modified-Since&quot;&gt;&lt;a href=&quot;#Last-Modified-If-Modified-Since&quot; class=&quot;headerlink&quot; title=&quot;Last-Modified/If-Modified-Since&quot;&gt;&lt;/a&gt;Last-Modified/If-Modified-Since&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Last-Modified&lt;/strong&gt;         表示这个资源的最后修改时间，服务器在相应请求时，会告诉浏览器此资源的最后修改时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If-Modified-Since&lt;/strong&gt;     发送HTTP请求时，浏览器会把缓存资源的最后修改时间一起发送到服务器去，服务器会用这个时间与服务器上实际文件的最后修改事件进行对比。如果时间一致，则返回 HTTP 状态码 304，浏览器接收到后会直接显示缓存的文件。如果时间不一致，则返回 HTTP 状态码 200 和新的文件内容，浏览器拿到文件后会丢掉本地旧文件，缓存新文件并展示出来。要注意的是 Last-Modified/If-Modified-Since 需要配合 Cache-control 使用，只有当本地的资源过期时（即超过了max-age 定义的时间），才会向服务器发送相应的带有 If-Modified-Since 的请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Etag-If-None-Match&quot;&gt;&lt;a href=&quot;#Etag-If-None-Match&quot; class=&quot;headerlink&quot; title=&quot;Etag/If-None-Match&quot;&gt;&lt;/a&gt;Etag/If-None-Match&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Etag/If-None-Match&lt;/strong&gt;   同样需要配合 Cache-control 使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etag&lt;/strong&gt;     服务器相应浏览器请求时，会告诉浏览器当前资源在服务的唯一标识，标识规则有服务器决定。If-None-Match 当资源过期时（即超过了max-age 定义的时间），发现资源具有 Etag 声明，则在再次向服务器发送求情时带上 If-None-Match（即本地缓存资源的 Etag 值）。服务器收到请求后如果发现有 If-None-Match 则与服务端被请求资源的 Etag 进行比对，如果相同则说明资源无更改并返回 304，否则返回 200 和新的资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这四种方式的优先级可以通过一张图来说明：&lt;br&gt;&lt;img src=&quot;/imgs/http-cache/priority.png&quot; alt=&quot;3&quot;&gt;&lt;br&gt;&lt;a href=&quot;HTTP://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片来自&lt;/a&gt;&lt;br&gt;可以看到 Etag 的优先级是大于 Last-Modified 的。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;br&gt;1.&lt;a href=&quot;HTTP://www.cnblogs.com/skynet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器缓存机制&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;HTTP://www.path8.net/tn/archives/2745&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器缓存相关的HTTP头介绍:Expires,Cache-Control,Last-Modified,ETag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;HTTP://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP的请求头标签 If-Modified-Since&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下午意外的接到了阿里钉钉前端的面试，很是欣喜。&lt;br&gt;面试内容从做的项目，到使用的技术 Angular、React、Express 等，让我感觉到自己的理解还是不够深刻。&lt;br&gt;比如我说我喜欢 React，大项目中需要配合 Redux 来用处理数据，然后就问到 Redux 到底解决了哪些问题，我没能清楚的答上来。但是整体上，面试的前面部分，自我感觉还是很不错的。&lt;br&gt;但是到最后，面试官说问一个比较基础的问题：如何在HTTP协议中控制缓存？&lt;br&gt;我懵了，平时工作中根本接触不到。只能凭自己感觉说，从文件名的更改以及在 HTTP 的 header 中设置相应参数来设置，但具体怎样设置，设置的内容是什么，我完全答不上来。感觉肯定是要挂在这里。不过俗话说的好，人不能在同一个地方跌到两次，谨以此篇记录HTTP缓存的相应内容。&lt;/p&gt;
&lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt;HTTP 控制缓存主要有一下几种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expires&lt;/li&gt;
&lt;li&gt;Cache-Control&lt;/li&gt;
&lt;li&gt;Last-Modified/If-Modified-Since&lt;/li&gt;
&lt;li&gt;Etag/If-None-Match&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来，就一个一个来了解。&lt;/p&gt;
&lt;h2 id=&quot;Expires&quot;&gt;&lt;a href=&quot;#Expires&quot; class=&quot;headerlink&quot; title=&quot;Expires&quot;&gt;&lt;/a&gt;Expires&lt;/h2&gt;&lt;p&gt;过期时间，有点类似于 cookies 里面的 Expires。可以在 header 中设置一个具体的过期时间，在这个过期时间内，浏览器都不会向服务器请求这个文件，会直接存本地的缓存中读取。&lt;br&gt;&lt;img src=&quot;/imgs/http-cache/headers.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;上图是我博客中一个 js 文件的 HTTP header，可以看到其中红框1 Expires 设置为当前 Date 的4个小时后，也就是说正常情况这个文件在 Expires 这个时间点以前的请求都会直接使用本地缓存，而不用从服务端重新获取。&lt;br&gt;需要注意的是，Expires 是 HTTP 1.0 的东西，现在绝大多数浏览器都默认使用 HTTP 1.1，所以用 Expires 控制缓存不是首选的方法。&lt;/p&gt;
&lt;h2 id=&quot;Cache-control&quot;&gt;&lt;a href=&quot;#Cache-control&quot; class=&quot;headerlink&quot; title=&quot;Cache-control&quot;&gt;&lt;/a&gt;Cache-control&lt;/h2&gt;&lt;p&gt;Cache-control 与 Expires 作用基本相同，都是标志出当前资源的有效期，以此来控制浏览器是使用本地缓存还是从服务器重新获取资源。不过，不同的地方在于，Cache-control 能够控制的更加细致，当header中同时存在 Expires 时，Cache-control 的优先级要更高一些。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTTP" scheme="http://kisnows.com/tags/http/"/>
    
      <category term="缓存" scheme="http://kisnows.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Postman 的简单使用</title>
    <link href="http://kisnows.com/2016/02/26/simple-use-of-postman/"/>
    <id>http://kisnows.com/2016/02/26/simple-use-of-postman/</id>
    <published>2016-02-26T13:51:47.000Z</published>
    <updated>2016-04-02T03:37:51.399Z</updated>
    
    <content type="html">&lt;p&gt;Postman 是一款用来测试 WEB 接口的工具，可以简单的发送 GET 、POST、PUT、DELETE 等请求，可以在 chrome 商店里面搜索安装。&lt;br&gt;为了介绍它的功能，首先本地起一个服务器：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; querystring = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;querystring&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;content-type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;text/json&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.method === &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; params = url.parse(req.url, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;).query;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.write(params.name + &lt;span class=&quot;string&quot;&gt;&#39; is &#39;&lt;/span&gt; + params.age + &lt;span class=&quot;string&quot;&gt;&#39; years old&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resDate = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    req&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        resDate.push(chunk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; params = querystring.parse(resDate.join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.write(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(params));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(e)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8088&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Server listen at localhost:8088&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用来监听 POST 和 GET 请求，并返回相应的数据。&lt;br&gt;接下来打开 Postman ，界面很简洁，所有的功能都在图上标注了出来&lt;br&gt;&lt;img src=&quot;/imgs/simple-use-of-postman.png&quot; alt=&quot;postman&quot;&gt;&lt;br&gt;上图是模拟 post 请求，填好要发送的参数，点击 send ，就可以看到返回了正确的结果&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;moqiao&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;23&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;GET 请求同理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Postman 是一款用来测试 WEB 接口的工具，可以简单的发送 GET 、POST、PUT、DELETE 等请求，可以在 chrome 商店里面搜索安装。&lt;br&gt;为了介绍它的功能，首先本地起一个服务器：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Postman" scheme="http://kisnows.com/tags/postman/"/>
    
      <category term="调试工具" scheme="http://kisnows.com/tags/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>用ES6重构fullPage</title>
    <link href="http://kisnows.com/2016/02/21/fullpage-js-es6/"/>
    <id>http://kisnows.com/2016/02/21/fullpage-js-es6/</id>
    <published>2016-02-21T14:18:09.000Z</published>
    <updated>2016-04-13T13:11:21.443Z</updated>
    
    <content type="html">&lt;p&gt;用 ES6 重写了 &lt;a href=&quot;https://github.com/kisnows/fullpage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullpage-light.js&lt;/a&gt;。&lt;br&gt;主要做了一下修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化：将整个文件问个成多个独立的模块，每个模块负责一个功能&lt;/li&gt;
&lt;li&gt;新语法：替换一些新的语法，比如变量声明的 let,const,Object.assign 等&lt;/li&gt;
&lt;li&gt;转码：因为目前浏览器还并不支持 ES2015,所以还需要用 Babel 做一下转码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;p&gt;根据功能，将整个文件分割成为了五个模块。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-bootstrap.js   //方法和功能&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-constant.js    //一些常量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-event.js       //绑定的事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-index.js       //入口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-utils.js       //工具函数&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样原来一个很大文件就被分割成为了五个独立的模块，每个模块只负责自己的功能就好，维护起来会方便很多。&lt;/p&gt;
&lt;h2 id=&quot;新语法&quot;&gt;&lt;a href=&quot;#新语法&quot; class=&quot;headerlink&quot; title=&quot;新语法&quot;&gt;&lt;/a&gt;新语法&lt;/h2&gt;&lt;p&gt;除了用了 let,const 这个声明变量的关键字外，最主要还用 Object.assign 这个方法替换了下面这个函数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 扩展 Option 对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Default 默认设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Customize 自定义设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @returns &amp;#123;Object&amp;#125; Default 扩展后的设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extendOption&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Default, Customize&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; Customize !== &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Customize = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Customize) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Default.hasOwnProperty(i)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Default[i] = Customize[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Default;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; options = extendOption(defaults, Customize);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;options = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, defaults, Customize);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;既然用到了Object.assign，就来说说它吧。参考MDN上的定义：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Object.assign() 方法可以把任意多个的源对象所拥有的自身可枚举属性拷贝给目标对象，然后返回目标对象。&lt;br&gt;Object.assign(target, …sources)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，它可以把…sources包含对象上所有可枚举的属性，复制到目标对象。这样浅拷贝一个对象就很容易了。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;a:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,b:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;,obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(copy);&lt;span class=&quot;comment&quot;&gt;//Object &amp;#123;a: 1, b: 2&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时也可以用来合并若干的对象&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123;a:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &amp;#123;b:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &amp;#123;c:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;,a,b,c)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;copy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt; &amp;#123;a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是需要注意的是继承属性和不可枚举属性是不能拷贝的，如果你尝试这么做，会发现虽然语句不会报错，但是继承属性和不可枚举的属性并没有拷贝成功。&lt;br&gt;兼容性上，目前 chrome 已经支持这个属性了，上面的例子都是在 chrome 控制台上实验过的。&lt;/p&gt;
&lt;h2 id=&quot;转码&quot;&gt;&lt;a href=&quot;#转码&quot; class=&quot;headerlink&quot; title=&quot;转码&quot;&gt;&lt;/a&gt;转码&lt;/h2&gt;&lt;p&gt;因为现在浏览器大多还不支持 ES2015 的语法，所以webpack+Babel 来将代码转换为 ES5 的语法。这样，就可以直接在现代浏览器里面使用了。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;ES6 带来了很大的改进。比如 let 和 const 的块级作用域可以避免一些坑，合理使用箭头函数也可提高代码的可读性，以及 class,promise,module 等新特性，可以大大提高编程的快感。&lt;br&gt;虽然目前兼容性上还是有很多问题，但是有 babel 转码器的存在，也算是可以逐步从 ES3 和 ES5 过渡到 ES2015 了，尤其是最近在尝试用 React，发现用 ES2015 简直爽的飞起。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;用 ES6 重写了 &lt;a href=&quot;https://github.com/kisnows/fullpage&quot;&gt;fullpage-light.js&lt;/a&gt;。&lt;br&gt;主要做了一下修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化：将整个文件问个成多个独立的模块，每个模块负责一个功能&lt;/li&gt;
&lt;li&gt;新语法：替换一些新的语法，比如变量声明的 let,const,Object.assign 等&lt;/li&gt;
&lt;li&gt;转码：因为目前浏览器还并不支持 ES2015,所以还需要用 Babel 做一下转码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;p&gt;根据功能，将整个文件分割成为了五个模块。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-bootstrap.js   //方法和功能&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-constant.js    //一些常量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-event.js       //绑定的事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-index.js       //入口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-utils.js       //工具函数&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样原来一个很大文件就被分割成为了五个独立的模块，每个模块只负责自己的功能就好，维护起来会方便很多。&lt;/p&gt;
&lt;h2 id=&quot;新语法&quot;&gt;&lt;a href=&quot;#新语法&quot; class=&quot;headerlink&quot; title=&quot;新语法&quot;&gt;&lt;/a&gt;新语法&lt;/h2&gt;&lt;p&gt;除了用了 let,const 这个声明变量的关键字外，最主要还用 Object.assign 这个方法替换了下面这个函数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 扩展 Option 对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Default 默认设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param &amp;#123;Object&amp;#125; Customize 自定义设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @returns &amp;#123;Object&amp;#125; Default 扩展后的设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extendOption&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Default, Customize&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; Customize !== &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Customize = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Customize) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Default.hasOwnProperty(i)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Default[i] = Customize[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Default;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; options = extendOption(defaults, Customize);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;options = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, defaults, Customize);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;既然用到了Object.assign，就来说说它吧。参考MDN上的定义：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>手机上键盘弹出时的一些问题</title>
    <link href="http://kisnows.com/2016/01/12/%E8%A7%A3%E5%86%B3%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98%E8%A6%86%E7%9B%96%E5%BC%B9%E7%AA%97%E9%97%AE%E9%A2%98/"/>
    <id>http://kisnows.com/2016/01/12/解决手机键盘覆盖弹窗问题/</id>
    <published>2016-01-12T12:27:52.000Z</published>
    <updated>2016-04-02T03:37:51.416Z</updated>
    
    <content type="html">&lt;p&gt;做手机商城接到一个需求。&lt;br&gt;具体大概是这样子的，要求用户点击购买按钮后，直接显示输入密码的弹窗并弹出键盘。&lt;br&gt;拿到需求一想，这挺简单的。&lt;br&gt;就麻利的写了个模拟的密码输入框，然后在用户点击购买按钮的时候让他弹出来，并且让焦点 focus 在 input 框上。&lt;br&gt;Chrome 上一试，完全没问题，觉得自己简直太棒了有没有。可是拿出自己的手机一试，oh no ~,键盘直接把页面给推了上去，导致完全看不到弹窗弹的是个什么东西。&lt;br&gt;&lt;img src=&quot;/imgs/2016-01-12-1.png&quot; alt=&quot;解决前&quot;&gt;&lt;br&gt;但是在 Android 上是没有任何问题的。观察了下是因为 Android 和 ios 上键盘弹出的行为是不一样的，Android 上键盘弹出来，直接覆盖在原来的页面上，而 ios 上键盘弹出来的时候会直接把整个页面推上去。&lt;br&gt;怎么解决呢？其实也挺好解决，就是针对不同系统 hack 一下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;购买页面这个弹窗的定位是这么定位的：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 后面的遮罩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.dialog-wrap&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: 100%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 100%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background: rgba(0,0,0,.7);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 密码输入框&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.password-dialog&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    top: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    left: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bottom: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    right: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    margin: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在弹窗弹出的时候，判断当前设备是 Android 还是 ios ，如果是 ios 设备，调整一下密码输入框定位就 OK 了。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$$(&lt;span class=&quot;string&quot;&gt;&#39;.go-buy&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    showPassword();     &lt;span class=&quot;comment&quot;&gt;//调出弹窗&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!device.android)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  如果不是安卓，那就调整定位&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $$(&lt;span class=&quot;string&quot;&gt;&#39;.password-dialog&#39;&lt;/span&gt;).css(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;top&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;initial&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;bottom&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;20px&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终就达到了目标，&lt;br&gt;&lt;img src=&quot;/imgs/2016-01-12-2.png&quot; alt=&quot;解决后&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前也遇到过类似的问题，比如页面上有一个输入框，在 Android 上点击输入框调出键盘的时候，因为键盘不会把页面推上去，导致如果这个输入框在当前页面比较靠下的位置，就可能被弹出的键盘覆盖掉，看不到当前选中的输入框，影响用户体验。解决方法其实也很简单，就是当点击输入框弹出键盘的时候，调整页面 scrollTop 值，让页面的可视区域刚好滚动到输入框这一块，也就解决了这个问题。&lt;/p&gt;
&lt;p&gt;这些坑，在事后看起来都很简单，然而当刚遇到的时候就是不知道怎么解决。比如密码输入框那个，当时总是在想怎么才能让键盘不把页面推上去，如果从这个角度去想解决办法那恐怕很难想出办法来，因为手机操作系统在实现的时候人家就那么规定了，你总不能用 js 去改这个键盘弹出方式吧，除非你写个模拟键盘，但那就是舍近求远了。但是如果换个角度，从调整页面上元素定位来解决，那就很简单了。&lt;br&gt;所以碰到问题，一定要从多种角度去想解决办法，这样才能更容易的找到问题的解决办法。一定要放开眼界，放开眼界啊！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;做手机商城接到一个需求。&lt;br&gt;具体大概是这样子的，要求用户点击购买按钮后，直接显示输入密码的弹窗并弹出键盘。&lt;br&gt;拿到需求一想，这挺简单的。&lt;br&gt;就麻利的写了个模拟的密码输入框，然后在用户点击购买按钮的时候让他弹出来，并且让焦点 focus 在 input 框上。&lt;br&gt;Chrome 上一试，完全没问题，觉得自己简直太棒了有没有。可是拿出自己的手机一试，oh no ~,键盘直接把页面给推了上去，导致完全看不到弹窗弹的是个什么东西。&lt;br&gt;&lt;img src=&quot;/imgs/2016-01-12-1.png&quot; alt=&quot;解决前&quot;&gt;&lt;br&gt;但是在 Android 上是没有任何问题的。观察了下是因为 Android 和 ios 上键盘弹出的行为是不一样的，Android 上键盘弹出来，直接覆盖在原来的页面上，而 ios 上键盘弹出来的时候会直接把整个页面推上去。&lt;br&gt;怎么解决呢？其实也挺好解决，就是针对不同系统 hack 一下。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="手机开发" scheme="http://kisnows.com/tags/%E6%89%8B%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    
      <category term="ios" scheme="http://kisnows.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>2015年终总结</title>
    <link href="http://kisnows.com/2015/12/30/2015-year-end-summary/"/>
    <id>http://kisnows.com/2015/12/30/2015-year-end-summary/</id>
    <published>2015-12-30T15:49:23.000Z</published>
    <updated>2016-04-13T13:04:26.281Z</updated>
    
    <content type="html">&lt;h1 id=&quot;来到杭州&quot;&gt;&lt;a href=&quot;#来到杭州&quot; class=&quot;headerlink&quot; title=&quot;来到杭州&quot;&gt;&lt;/a&gt;来到杭州&lt;/h1&gt;&lt;p&gt;回想一下二月二十八号怀着忐忑的心来到杭州。&lt;/p&gt;
&lt;p&gt;那天天还下着大雨，我从机场出来一路大巴加地铁到滨江区。出了地铁站，站口一个三轮师傅一看我拉一个行李箱，明显外地人，隔老远就吆喝，走不走！想想我怎么也是有导航的人，怎么能让你们坑。然后就跟着导航找酒店，结果怎么找也找不到，就在目的地旁边转来转去，问路人也没人听过酒店名，我一度认为是不是订的酒店有问题。最后无奈，又跑回地铁口，掏了二十块上了三轮，结果五分钟就开到了，其实那酒店距离地铁口也就不到一公里，因为下雨视线不好所以我一直找不到。到了酒店，收拾了一下发现行李箱都被雨水打湿了，赶紧打开看了一下，还好，只有基本放在外面的书有点潮，衣服什么的还是干的。洗了个澡，就出去感受这个被誉为人间天堂的陌生城市了。不得不说，杭州城市真的很干净，而且绿化也很好，但是雨真的真的太多了&lt;/p&gt;
&lt;h1 id=&quot;找房子&quot;&gt;&lt;a href=&quot;#找房子&quot; class=&quot;headerlink&quot; title=&quot;找房子&quot;&gt;&lt;/a&gt;找房子&lt;/h1&gt;&lt;p&gt;到一个新的城市工作，首要的事情就是找房子。说道找房子，不得不说这是一个非常痛苦的过程。&lt;/p&gt;
&lt;p&gt;从好友三月初来到杭州开始找房子，找了差不多一星期的时间，最后还是在没办法，两个人第二天都要上班的情况随便找了一个两居室租了下来。这房间说好也还行，说不好那就是太吵了，尤其是天气很冷或者很热人们需要开空调的时候，那噪音，晚上不戴耳塞是没法睡觉的。睡眠质量不好大大影响我了日常工作和生活，可是由于种种原因，暂时又不能搬家，所以也就在各种噪音中度过了小一年时间。&lt;/p&gt;
&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;本来是拿到余杭区一家公司offer的，三月一号要去报到的。但是被我们现在的老大提前一天拉去面试，发的offer虽然薪水没给到位，甚至还不如另一家公司给的多情况，依然选择了现在的公司。为什么呢？也许我傻吧，至少现在看来当时我确实是傻。一个公司给你薪水的多少，也就是对你能力的认可有多少。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;整个工作内容，我还是可以轻松 hold 住的，从 PC 到 Mobile，大大小小也有成十个项目，虽然有时会有些棘手的问题，但是在老大的指点下还是轻松解决了。总体上来看，工作内容难度不大，非要说有难度，那也只有工作量上的难度，对这一点我已经无力吐槽了。公司也不知道是因为要上市还是什么原因，整体上都比较浮躁，以至于会出现说让三天搞完一个手机商城这种奇葩的事情。&lt;br&gt;不过工作归工作，不能因为工作难度不大，就忘了提升自己的技能。这一年时间里，大半的业余时间都用在给自己充电上了 。其实是因为周末只有自己一个人，完全不知道该干嘛，除了偶尔一个人去西湖边走走，也就只能写写代码，聊以慰藉了。&lt;/p&gt;
&lt;h1 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h1&gt;&lt;p&gt;年初凑了套厨具，像模像样的炒了几次菜，然后基本就再也没有进过厨房；&lt;/p&gt;
&lt;p&gt;六月份我投奔的好友因为网易加班过于严重离开了杭州，启程去了武汉，好友的离去伴随的是换了一个新的室友，爱养花养鱼，有时还会顿饭给我吃；&lt;/p&gt;
&lt;p&gt;一个人去游泳，泳池玩了一会出去上了个厕所，回来忘了带泳镜直接跳到深水区，然后睁眼一片浑浊，水性不好的我当时吓得连呛几口水，强行稳定情绪后努力游到了对岸。事后想想真是后怕，深水区那么多人，如果当时没能稳定紧张的情绪恰好安全员又没看到我，那我基本上 GG 了，以后一个人还是不要去深水区了；&lt;/p&gt;
&lt;p&gt;陪伴了自己四年的电脑突然散热风扇不转了，淘宝买了风扇装上，风扇是好了，结果屏幕不亮了，换了跟屏线依然没有什么用，只能剁手买了个23寸的显示器外接，不过屏大真心爽；&lt;/p&gt;
&lt;p&gt;下雨天早上上班时为了帮一个的哥推抛了锚的车而错过了公交，不过还好的哥免费把我送到了上班的地方；&lt;/p&gt;
&lt;p&gt;一个人跑去看电影，结果看的自己眼泪唰唰的，果然是随着年龄的增长，人也变得越来越感性了；&lt;/p&gt;
&lt;h1 id=&quot;展望2016&quot;&gt;&lt;a href=&quot;#展望2016&quot; class=&quot;headerlink&quot; title=&quot;展望2016&quot;&gt;&lt;/a&gt;展望2016&lt;/h1&gt;&lt;p&gt;2015年做为自己转行后的第一年，整体上对自己还是比较满意的，但是不能懈怠，要继续保持技术能力的增长，但同时也要提高自己的生活质量，毕竟工作是为了更好的生活嘛。&lt;/p&gt;
&lt;p&gt;在此给明年订个简单的规定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个月至少写一篇博客&lt;/li&gt;
&lt;li&gt;至少每两周看一次电影&lt;/li&gt;
&lt;li&gt;每两个月看一本书&lt;/li&gt;
&lt;li&gt;加强身体锻炼&lt;/li&gt;
&lt;li&gt;该追的美剧不能落下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然这些计划并不会执行，o(∩_∩)o 哈哈&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;来到杭州&quot;&gt;&lt;a href=&quot;#来到杭州&quot; class=&quot;headerlink&quot; title=&quot;来到杭州&quot;&gt;&lt;/a&gt;来到杭州&lt;/h1&gt;&lt;p&gt;回想一下二月二十八号怀着忐忑的心来到杭州。&lt;/p&gt;
&lt;p&gt;那天天还下着大雨，我从机场出来一路大巴加地铁到滨江区。出了地铁站，站口一个三轮师傅一看我拉一个行李箱，明显外地人，隔老远就吆喝，走不走！想想我怎么也是有导航的人，怎么能让你们坑。然后就跟着导航找酒店，结果怎么找也找不到，就在目的地旁边转来转去，问路人也没人听过酒店名，我一度认为是不是订的酒店有问题。最后无奈，又跑回地铁口，掏了二十块上了三轮，结果五分钟就开到了，其实那酒店距离地铁口也就不到一公里，因为下雨视线不好所以我一直找不到。到了酒店，收拾了一下发现行李箱都被雨水打湿了，赶紧打开看了一下，还好，只有基本放在外面的书有点潮，衣服什么的还是干的。洗了个澡，就出去感受这个被誉为人间天堂的陌生城市了。不得不说，杭州城市真的很干净，而且绿化也很好，但是雨真的真的太多了&lt;/p&gt;
&lt;h1 id=&quot;找房子&quot;&gt;&lt;a href=&quot;#找房子&quot; class=&quot;headerlink&quot; title=&quot;找房子&quot;&gt;&lt;/a&gt;找房子&lt;/h1&gt;&lt;p&gt;到一个新的城市工作，首要的事情就是找房子。说道找房子，不得不说这是一个非常痛苦的过程。&lt;/p&gt;
&lt;p&gt;从好友三月初来到杭州开始找房子，找了差不多一星期的时间，最后还是在没办法，两个人第二天都要上班的情况随便找了一个两居室租了下来。这房间说好也还行，说不好那就是太吵了，尤其是天气很冷或者很热人们需要开空调的时候，那噪音，晚上不戴耳塞是没法睡觉的。睡眠质量不好大大影响我了日常工作和生活，可是由于种种原因，暂时又不能搬家，所以也就在各种噪音中度过了小一年时间。&lt;/p&gt;
&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;本来是拿到余杭区一家公司offer的，三月一号要去报到的。但是被我们现在的老大提前一天拉去面试，发的offer虽然薪水没给到位，甚至还不如另一家公司给的多情况，依然选择了现在的公司。为什么呢？也许我傻吧，至少现在看来当时我确实是傻。一个公司给你薪水的多少，也就是对你能力的认可有多少。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://kisnows.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="年终总结" scheme="http://kisnows.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>react-v2ex</title>
    <link href="http://kisnows.com/2015/12/26/react-v2ex/"/>
    <id>http://kisnows.com/2015/12/26/react-v2ex/</id>
    <published>2015-12-25T16:11:25.000Z</published>
    <updated>2016-04-13T13:15:47.634Z</updated>
    
    <content type="html">&lt;p&gt;为了练手，用 react 写了个 v2ex 的首页：&lt;br&gt;&lt;a href=&quot;http://kisnows.com/react-v2ex/&quot;&gt;页面地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/kisnows/react-v2ex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个项目基础 &lt;code&gt;react&lt;/code&gt; 搭建，样式本来打算用 inlineStyle 来写的，但是发现写起来太累，于是还是用回到 &lt;code&gt;sass&lt;/code&gt;，最后用 &lt;code&gt;webpack&lt;/code&gt;来编译。本来想着看能不能直接调用 V 站的 API 来做一个纯前端的首页，所有的数据都用 ajax 来调，但是发现因为跨域的问题，前端无法拿到数据，也就放弃了，最终也只能是一个静态页面。&lt;/p&gt;
&lt;p&gt;说一下写代码中遇到的一些问题吧，首先整个项目的文件结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;│  .babelrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .editorconfig&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .eslintrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .gitignore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  package.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  readme.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  server.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  tree.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      hot.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      latest.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      bundle.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      CommunityStatus.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Footer.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Header.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Main.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      SearchInput.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      TopicsHot.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserLink.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserPanel.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─containers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      App.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─sass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _config.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _global.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _normalize.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _page.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _CommunityStatus.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Footer.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Header.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _TopicHot.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _UserPanel.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─static&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─images&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          qbar_light@2x.png&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└─utils&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getData.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;先说说用 react 写的优点，它火起来不是没有道理的，确实是有很多优点的，我这里只说实际码代码中的优点，不涉及 virtualDom 带来的性能提升之类的。&lt;/p&gt;
&lt;h3 id=&quot;结构清晰&quot;&gt;&lt;a href=&quot;#结构清晰&quot; class=&quot;headerlink&quot; title=&quot;结构清晰&quot;&gt;&lt;/a&gt;结构清晰&lt;/h3&gt;&lt;p&gt;因为 react 本身就是组件化的，所以整个页面按结构被分为几个组件，每个组件自己管理自己的展示和行为，最后通过容器组合起来，结构非常清晰。&lt;br&gt;组件的状态都是通过 state 或者 props 来控制，而我认为大多数组件只需要 props 就行了，只在顶层组件上控制 state，这样可以更加清晰的管理 state。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;易于维护&quot;&gt;&lt;a href=&quot;#易于维护&quot; class=&quot;headerlink&quot; title=&quot;易于维护&quot;&gt;&lt;/a&gt;易于维护&lt;/h3&gt;&lt;p&gt;因为结构清晰，所以可以预想到，这样是易于维护的。比如头部要改结构和样式，那就只改 Hearker.js 和对应 _Header.scss 就行了，或者要改逻辑，那只要修改 Hearker.js 中和 props 或者 state 相关的代码就行了，不用像以前那样在整个页面的逻辑里面去找这块的代码。&lt;br&gt;这根我目前维护的一些老项目来比，维护性上简直是天壤之别，再也不用愁找不到代码在哪改了，也不用吐槽那一串串的不知道干什么的 jquery 代码了。&lt;/p&gt;
&lt;h3 id=&quot;省去了模版引擎&quot;&gt;&lt;a href=&quot;#省去了模版引擎&quot; class=&quot;headerlink&quot; title=&quot;省去了模版引擎&quot;&gt;&lt;/a&gt;省去了模版引擎&lt;/h3&gt;&lt;p&gt;因为 react 可以说是自带了模版引擎，类似的 jade 或者 ejs 之类的模版引擎也就不需要了，类似这样拿到数据直接渲染就行了。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;Hot.map((topic, index) =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TopicsHotItem&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;...topic&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;index&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  )&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h2&gt;&lt;h3 id=&quot;组件划分大小的疑惑&quot;&gt;&lt;a href=&quot;#组件划分大小的疑惑&quot; class=&quot;headerlink&quot; title=&quot;组件划分大小的疑惑&quot;&gt;&lt;/a&gt;组件划分大小的疑惑&lt;/h3&gt;&lt;p&gt;一个页面到底要划分成几个部分？根据逻辑分还是根据页面布局分？组件分到那个层级？像V站的这个头部，是划分成一个组件还是三个？&lt;br&gt;&lt;img src=&quot;/imgs/react-v2ex-header.png&quot; alt=&quot;头部&quot;&gt;&lt;br&gt;当然这个可能不能算是缺点，可能是因为我经验不足以至于无法确定该如何化分。&lt;/p&gt;
&lt;h3 id=&quot;报错不友好&quot;&gt;&lt;a href=&quot;#报错不友好&quot; class=&quot;headerlink&quot; title=&quot;报错不友好&quot;&gt;&lt;/a&gt;报错不友好&lt;/h3&gt;&lt;p&gt;比如我 className 习惯性的写成了 class，然而console里面只是报了个 Did you mean className 的错，但是报不出来错在哪个文件，更不用指望报错在哪行了？只能自己去找，当项目大起来的时候，这个肯定很坑爹。&lt;br&gt;&lt;img src=&quot;/imgs/react-v2ex-error.png&quot; alt=&quot;报错&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;整体来说， react 写起来还是很爽的，而且有点也很明确，组件化·单向数据流·函数式编程，虽然有一些不成熟的问题，但是优点还是突出，如果可以的话，在一些小型项目里实际试水一下应该还是不错的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;为了练手，用 react 写了个 v2ex 的首页：&lt;br&gt;&lt;a href=&quot;http://kisnows.com/react-v2ex/&quot;&gt;页面地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/kisnows/react-v2ex&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个项目基础 &lt;code&gt;react&lt;/code&gt; 搭建，样式本来打算用 inlineStyle 来写的，但是发现写起来太累，于是还是用回到 &lt;code&gt;sass&lt;/code&gt;，最后用 &lt;code&gt;webpack&lt;/code&gt;来编译。本来想着看能不能直接调用 V 站的 API 来做一个纯前端的首页，所有的数据都用 ajax 来调，但是发现因为跨域的问题，前端无法拿到数据，也就放弃了，最终也只能是一个静态页面。&lt;/p&gt;
&lt;p&gt;说一下写代码中遇到的一些问题吧，首先整个项目的文件结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;│  .babelrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .editorconfig&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .eslintrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  .gitignore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  package.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  readme.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  server.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  tree.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      hot.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      latest.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      bundle.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      CommunityStatus.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Footer.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Header.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      Main.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      SearchInput.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      TopicsHot.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserLink.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      UserPanel.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─containers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      App.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─sass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _config.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _global.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _normalize.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  _page.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  │  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _CommunityStatus.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Footer.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Header.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _Main.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _TopicHot.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          _UserPanel.scss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─static&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│  └─images&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          qbar_light@2x.png&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└─utils&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getData.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;先说说用 react 写的优点，它火起来不是没有道理的，确实是有很多优点的，我这里只说实际码代码中的优点，不涉及 virtualDom 带来的性能提升之类的。&lt;/p&gt;
&lt;h3 id=&quot;结构清晰&quot;&gt;&lt;a href=&quot;#结构清晰&quot; class=&quot;headerlink&quot; title=&quot;结构清晰&quot;&gt;&lt;/a&gt;结构清晰&lt;/h3&gt;&lt;p&gt;因为 react 本身就是组件化的，所以整个页面按结构被分为几个组件，每个组件自己管理自己的展示和行为，最后通过容器组合起来，结构非常清晰。&lt;br&gt;组件的状态都是通过 state 或者 props 来控制，而我认为大多数组件只需要 props 就行了，只在顶层组件上控制 state，这样可以更加清晰的管理 state。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="React" scheme="http://kisnows.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>基于 Express+Gulp+BrowserSync 搭建高性能的前端开发环境</title>
    <link href="http://kisnows.com/2015/11/02/dev-environment-Express-Gulp-BrowserSync/"/>
    <id>http://kisnows.com/2015/11/02/dev-environment-Express-Gulp-BrowserSync/</id>
    <published>2015-11-02T12:45:23.000Z</published>
    <updated>2016-04-27T14:33:17.457Z</updated>
    
    <content type="html">&lt;p&gt;原文发布于&lt;a href=&quot;/2015/11/02/dev-environment-Express-Gulp-BrowserSync/&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么要搭这么一套框架&quot;&gt;&lt;a href=&quot;#为什么要搭这么一套框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭这么一套框架&quot;&gt;&lt;/a&gt;为什么要搭这么一套框架&lt;/h1&gt;&lt;p&gt;公司 Pc 端以前遗留的项目，都是基于jekyll+ruby-sass这一套比较老的技术搭建的。不过 jekyll 的模版继承加上 sass 强大预处理能力，同时配合 Grunt 做任务管理，一切还是很得心应手的。&lt;/p&gt;
&lt;p&gt;然而随着项目规模的急剧增大，这一套东西的速度是在是太慢了，一至于后来一旦这个项目有需要求要改我就头疼，倒不是说头疼需求怎么改，而是你随便改一个文件，从 jekyll 检测到改动到编译完 sass 到浏览器自动刷新，基本需要 40+ s，这完全不能接受。&lt;/p&gt;
&lt;p&gt;于是一直就打算新搭一套开发环境，刚好前段时间有个新项目，我就拿来操刀动手了，目前已经用它做了俩个项目下来，在原有基础上做了一些修改之后，已经完全可以替代原来那一套懂了。&lt;/p&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;得益于 node-sass 对 ruby-sass 在编译速度上的碾压以及被 jade 完爆的 jekyll。现在项目中从文件变动=&amp;gt;编译完成=&amp;gt;浏览器自动刷新，整个过程在 1s 左右，可以说速度提升了几十倍。&lt;br&gt;而且整个过程都是全自动的，无论你修改了 js,css 还是 html 文件，浏览器都会在重新编译完成后自动刷新。&lt;br&gt;&lt;img src=&quot;/imgs/dev-environment/compile-time.png&quot; alt=&quot;编译时间&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构&quot;&gt;&lt;/a&gt;文件结构&lt;/h2&gt;&lt;p&gt;这是项目开发时的文件结构：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/dev-environment/structure.png&quot; alt=&quot;文件结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中 public,router,views 都是 express 默认的文件结构，这里就不做介绍了。&lt;br&gt;submodule 是我们不同项目中公用的代码库，这样可以少写很多公共代码。&lt;/p&gt;
&lt;h1 id=&quot;技术细节&quot;&gt;&lt;a href=&quot;#技术细节&quot; class=&quot;headerlink&quot; title=&quot;技术细节&quot;&gt;&lt;/a&gt;技术细节&lt;/h1&gt;&lt;p&gt;整个项目的技术栈是 jade+node-sass+js，实现全自动开发。&lt;br&gt;首先在 views 下面，定义好 jade 模版文件，然后开始新加页面&lt;/p&gt;
&lt;h2 id=&quot;关系依赖&quot;&gt;&lt;a href=&quot;#关系依赖&quot; class=&quot;headerlink&quot; title=&quot;关系依赖&quot;&gt;&lt;/a&gt;关系依赖&lt;/h2&gt;&lt;p&gt;这个环境，主要基于 Express,Gulp 以及一系列的Gulp插件搭建，这个是开发环境的依赖关系：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;body-parser&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.13.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cookie-parser&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.3.5&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;debug&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~2.2.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~4.13.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;jade&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.11.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;morgan&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~1.6.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;serve-favicon&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~2.3.0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;browser-sync&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.9.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;del&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.0.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.9.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-autoprefixer&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.0.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-jade&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.1.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-nodemon&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.0.4&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.0.4&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-sourcemaps&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.5.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;jade&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.11.0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，express 主要用来渲染 jade 模版引擎以及提供路由功能，同时起一个本地的服务器。有人说，渲染jade 模版，我直接用 gulp 也可以啊。是的，gulp 是可以直接渲染 jade 模版，但是有一个问题，就是如果你本地只修改了一个 jade 文件时候，gulp 也需要把所有的 jade 文件全部渲染一遍，这明显会浪费很多时间。&lt;/p&gt;
&lt;p&gt;所以我引入了 express，只会按需渲染 jade，节省了很多时间。同时一个高效的开发环境必须有浏览器自动刷新，但是 express 没有这个功能。所以我引入了 browser-sync，用它来代理 express 启动的本地服务，然后来监测本地文件的变动，来做到浏览器自动刷新。&lt;/p&gt;
&lt;p&gt;有同学可能会问了，如果我改了 express 相应的 js 文件怎么办，或者 jade 文件编译出错了怎么办。因为这些时候 express 服务器都会 crash 掉，需要重启。所以我引入了 nodemon，来做 express 服务器的自动重启功能。&lt;/p&gt;
&lt;p&gt;在这个环境下面，我在开发中所能碰到的所有 jade，scss，js 文件的改动都会被检测到并作出相应的动作，而且速度还非常快。让我可以花更多时间在业务代码的开发上，而不是不断重启服务和刷新浏览器。&lt;/p&gt;
&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;这个东西被我放到 Github上了，&lt;a href=&quot;https://github.com/kisnows/Express-Gulp-BrowserSync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址在这。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同时附上 gulpfile 全文，以供参考：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; browserSync = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;browser-sync&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reload = browserSync.reload;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sass = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prefix = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-autoprefixer&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nodemon = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-nodemon&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sourcemaps = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-sourcemaps&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jade = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-jade&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stylus = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-stylus&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rename = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-rename&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; del = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;del&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//dev task start&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//DONE can not compile the sass or less file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;./sass/personal.scss&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(sourcemaps.init())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(sass(&amp;#123;errLogToConsole: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, sass.logError))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(prefix(&lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;gt; 1%&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ie 8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Android 2&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(sourcemaps.write())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public/css&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(reload(&amp;#123;stream: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;browser-sync&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;nodemon&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  browserSync.init(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    proxy: &lt;span class=&quot;string&quot;&gt;&#39;http://localhost:3000&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    files: [&lt;span class=&quot;string&quot;&gt;&#39;public/**/*.*&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;views/**/*.*&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;submodule/**/*.*&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    browser: &lt;span class=&quot;string&quot;&gt;&#39;google chrome&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    notify: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    port: &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;movesub&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;./submodule/images/**/*.*&#39;&lt;/span&gt;], &amp;#123;base: &lt;span class=&quot;string&quot;&gt;&#39;./submodule&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;stylus&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;submodule/stylus/public.styl&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(stylus())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(rename(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      extname: &lt;span class=&quot;string&quot;&gt;&#39;.scss&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;submodule/stylus/&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;nodemon&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  del([&lt;span class=&quot;string&quot;&gt;&#39;./public/*.html&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; called = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nodemon(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    script: &lt;span class=&quot;string&quot;&gt;&#39;bin/www&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;).on(&lt;span class=&quot;string&quot;&gt;&#39;start&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!called) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      cb();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      called = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//dev task end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  del([&lt;span class=&quot;string&quot;&gt;&#39;./dist/*&#39;&lt;/span&gt;], cb)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;copy&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/css/**/*&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/images/**/*&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/js/**/*&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;public/pageScripts/**/*&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ], &amp;#123;base: &lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//build task start&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//DONE add build task&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;jade&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([&lt;span class=&quot;string&quot;&gt;&#39;views/**/*.jade&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;!views/layout/**/*.jade&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;!views/includes/**/*.jade&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(jade(&amp;#123;pretty: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//build task end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;clean&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;copy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;jade&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;browser-sync&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;movesub&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  gulp.watch([&lt;span class=&quot;string&quot;&gt;&#39;sass/**/*.*&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.submodule/stylus/**/*.*&#39;&lt;/span&gt;], [&lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;原文发布于&lt;a href=&quot;/2015/11/02/dev-environment-Express-Gulp-BrowserSync/&quot;&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么要搭这么一套框架&quot;&gt;&lt;a href=&quot;#为什么要搭这么一套框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭这么一套框架&quot;&gt;&lt;/a&gt;为什么要搭这么一套框架&lt;/h1&gt;&lt;p&gt;公司 Pc 端以前遗留的项目，都是基于jekyll+ruby-sass这一套比较老的技术搭建的。不过 jekyll 的模版继承加上 sass 强大预处理能力，同时配合 Grunt 做任务管理，一切还是很得心应手的。&lt;/p&gt;
&lt;p&gt;然而随着项目规模的急剧增大，这一套东西的速度是在是太慢了，一至于后来一旦这个项目有需要求要改我就头疼，倒不是说头疼需求怎么改，而是你随便改一个文件，从 jekyll 检测到改动到编译完 sass 到浏览器自动刷新，基本需要 40+ s，这完全不能接受。&lt;/p&gt;
&lt;p&gt;于是一直就打算新搭一套开发环境，刚好前段时间有个新项目，我就拿来操刀动手了，目前已经用它做了俩个项目下来，在原有基础上做了一些修改之后，已经完全可以替代原来那一套懂了。&lt;/p&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;得益于 node-sass 对 ruby-sass 在编译速度上的碾压以及被 jade 完爆的 jekyll。现在项目中从文件变动=&amp;gt;编译完成=&amp;gt;浏览器自动刷新，整个过程在 1s 左右，可以说速度提升了几十倍。&lt;br&gt;而且整个过程都是全自动的，无论你修改了 js,css 还是 html 文件，浏览器都会在重新编译完成后自动刷新。&lt;br&gt;&lt;img src=&quot;/imgs/dev-environment/compile-time.png&quot; alt=&quot;编译时间&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构&quot;&gt;&lt;/a&gt;文件结构&lt;/h2&gt;&lt;p&gt;这是项目开发时的文件结构：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="Express" scheme="http://kisnows.com/tags/express/"/>
    
      <category term="开发环境" scheme="http://kisnows.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Canvas 基础</title>
    <link href="http://kisnows.com/2015/10/19/first-contact-of-canvas/"/>
    <id>http://kisnows.com/2015/10/19/first-contact-of-canvas/</id>
    <published>2015-10-19T14:41:38.000Z</published>
    <updated>2016-04-02T03:37:51.339Z</updated>
    
    <content type="html">&lt;p&gt;首先引用 &lt;code&gt;MDN&lt;/code&gt; 上对于 &lt;code&gt;canvas&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 是 HTML5 新增的元素，可使用JavaScript脚本来绘制图形。例如：画图，合成照片，创建动画甚至实时视频处理与渲染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说这是浏览器提供给我们的一个画布和丰富的接口，可以用来制作各种复杂的效果。&lt;br&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 元素创造了一个固定大小的画布，它公开了一个或多个渲染上下文。其可以用来绘制和处理被现实的页面。&lt;br&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/224/Canvas_default_grid.png&quot; alt=&quot;Canvas坐标&quot;&gt;&lt;br&gt;这是 canvas 2d 的坐标，可以看到左上角为原点，横轴为x轴，纵轴为y轴。我们所有的canvas2d的功能实现都是在这个坐标系中。&lt;/p&gt;
&lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;p&gt;本文只简单介绍一下矩形、线段和圆弧的画法。&lt;/p&gt;
&lt;h2 id=&quot;矩形&quot;&gt;&lt;a href=&quot;#矩形&quot; class=&quot;headerlink&quot; title=&quot;矩形&quot;&gt;&lt;/a&gt;矩形&lt;/h2&gt;&lt;p&gt;通过一个简单的例子来了解一下基本的API： &lt;/p&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML:&quot;&gt;&lt;/a&gt;HTML:&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;height:100%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   当前浏览器不支持Canvas，请更换浏览器后再试&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript:&quot;&gt;&lt;/a&gt;JavaScript:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var canvas = document.getElementById(&amp;apos;canvas&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ctx = canvas.getContext(&amp;apos;2d&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_WIDTH = window.screen.availWidth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_HEIGHT = window.screen.availHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;#000&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(10, 10, 55, 50);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;rgba(0,0,200,0.5)&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(30, 30, 55, 50);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;页面上会如下显示：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/v5Lhnf8k/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;首先获取到 canvas 元素，并通过 getContext(‘2d’) 获取到它的渲染上下文。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;clearRect-x-y-width-height&quot;&gt;&lt;a href=&quot;#clearRect-x-y-width-height&quot; class=&quot;headerlink&quot; title=&quot;clearRect(x, y, width, height)&quot;&gt;&lt;/a&gt;clearRect(x, y, width, height)&lt;/h3&gt;&lt;p&gt;清空指定区域，如果需要做动画的话，每次重新渲染前都需要调用这个函数来清除前一帧的内容。&lt;/p&gt;
&lt;h3 id=&quot;beginPath&quot;&gt;&lt;a href=&quot;#beginPath&quot; class=&quot;headerlink&quot; title=&quot;beginPath()&quot;&gt;&lt;/a&gt;beginPath()&lt;/h3&gt;&lt;p&gt;新建一条路径&lt;/p&gt;
&lt;h3 id=&quot;fillStyle&quot;&gt;&lt;a href=&quot;#fillStyle&quot; class=&quot;headerlink&quot; title=&quot;fillStyle&quot;&gt;&lt;/a&gt;fillStyle&lt;/h3&gt;&lt;p&gt;用来设置要填充的颜色&lt;/p&gt;
&lt;h3 id=&quot;ctx-fillRect-10-10-55-50&quot;&gt;&lt;a href=&quot;#ctx-fillRect-10-10-55-50&quot; class=&quot;headerlink&quot; title=&quot;ctx.fillRect(10, 10, 55, 50);&quot;&gt;&lt;/a&gt;ctx.fillRect(10, 10, 55, 50);&lt;/h3&gt;&lt;p&gt;以x轴等于10，y轴等于10为起点，绘制一个宽55高50的矩形。&lt;/p&gt;
&lt;h3 id=&quot;strokeRect-x-y-width-height&quot;&gt;&lt;a href=&quot;#strokeRect-x-y-width-height&quot; class=&quot;headerlink&quot; title=&quot;strokeRect(x,y,width,height)&quot;&gt;&lt;/a&gt;strokeRect(x,y,width,height)&lt;/h3&gt;&lt;p&gt;跟fillRect不同的地方在于，strokeRect会绘制一个矩形的边框，如下：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/87jtz89q/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;线段&quot;&gt;&lt;a href=&quot;#线段&quot; class=&quot;headerlink&quot; title=&quot;线段&quot;&gt;&lt;/a&gt;线段&lt;/h2&gt;&lt;p&gt;绘制一个三角形&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.moveTo(&lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.lineTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.lineTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.closePath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.stroke();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/6n0emmf3/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;moveTo-x-y&quot;&gt;&lt;a href=&quot;#moveTo-x-y&quot; class=&quot;headerlink&quot; title=&quot;moveTo(x,y)&quot;&gt;&lt;/a&gt;moveTo(x,y)&lt;/h3&gt;&lt;p&gt;定义一个起点，从这个点开始绘制&lt;/p&gt;
&lt;h3 id=&quot;lineTo-x-y&quot;&gt;&lt;a href=&quot;#lineTo-x-y&quot; class=&quot;headerlink&quot; title=&quot;lineTo(x,y)&quot;&gt;&lt;/a&gt;lineTo(x,y)&lt;/h3&gt;&lt;p&gt;绘制一条从当前位置到指定x以及y位置的直线&lt;/p&gt;
&lt;h3 id=&quot;closePath&quot;&gt;&lt;a href=&quot;#closePath&quot; class=&quot;headerlink&quot; title=&quot;closePath()&quot;&gt;&lt;/a&gt;closePath()&lt;/h3&gt;&lt;p&gt;闭合当前路径，也可以用lineTo到起点来代替&lt;/p&gt;
&lt;h3 id=&quot;storke&quot;&gt;&lt;a href=&quot;#storke&quot; class=&quot;headerlink&quot; title=&quot;storke()&quot;&gt;&lt;/a&gt;storke()&lt;/h3&gt;&lt;p&gt;根据已有路径的来绘制线段，也就是说如果不执行stroke(),那么画布上什么都没有。&lt;/p&gt;
&lt;h2 id=&quot;圆弧&quot;&gt;&lt;a href=&quot;#圆弧&quot; class=&quot;headerlink&quot; title=&quot;圆弧&quot;&gt;&lt;/a&gt;圆弧&lt;/h2&gt;&lt;h3 id=&quot;arc-x-y-radius-startAngle-endAngle-anticlockwise&quot;&gt;&lt;a href=&quot;#arc-x-y-radius-startAngle-endAngle-anticlockwise&quot; class=&quot;headerlink&quot; title=&quot;arc(x, y, radius, startAngle, endAngle, anticlockwise)&quot;&gt;&lt;/a&gt;arc(x, y, radius, startAngle, endAngle, anticlockwise)&lt;/h3&gt;&lt;p&gt;该方法有五个参数： x,y为绘制圆弧所在圆上的圆心坐标。radius为半径。startAngle以及endAngle参数用弧度定义了开始以及结束的弧度。这些都是以x轴为基准。参数anticlockwise 为一个布尔值。为true时，是逆时针方向，否则顺时针方向。&lt;br&gt;看个直观的例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.moveTo(&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.moveTo(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.moveTo(&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.arc(&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.stroke();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truectx.clearRect(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetrue&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; j++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruectx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; + j * &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; + i * &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; radisu = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startAngle = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; endAngle = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI + (&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * j) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; anticlockwise = i % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruectx.arc(x, y, radisu, startAngle, endAngle, anticlockwise);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruetruectx.fill();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetruetruectx.stroke();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetruetrue&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truetrue&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/z6ywoj8g/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;br&gt;通过这个例子可以看清楚的看到 fill 和 stroke 这个两个函数的区别，前者渲染边框，后者填充整个指定区域。同时可以区分，anticlockwise 分别 true 和 false 时渲染的机制，前者为逆时针，后者为顺时针。&lt;br&gt;&lt;br&gt;# 总结&lt;br&gt;仅仅通过这三个基础的用法，就可以制作出很多漂亮的动画了。我这里做了一个简单运动的小球，同时做了边界判定。&lt;br&gt;&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/kisnows/jkLgatsm/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN-Canvas&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先引用 &lt;code&gt;MDN&lt;/code&gt; 上对于 &lt;code&gt;canvas&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 是 HTML5 新增的元素，可使用JavaScript脚本来绘制图形。例如：画图，合成照片，创建动画甚至实时视频处理与渲染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说这是浏览器提供给我们的一个画布和丰富的接口，可以用来制作各种复杂的效果。&lt;br&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 元素创造了一个固定大小的画布，它公开了一个或多个渲染上下文。其可以用来绘制和处理被现实的页面。&lt;br&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/224/Canvas_default_grid.png&quot; alt=&quot;Canvas坐标&quot;&gt;&lt;br&gt;这是 canvas 2d 的坐标，可以看到左上角为原点，横轴为x轴，纵轴为y轴。我们所有的canvas2d的功能实现都是在这个坐标系中。&lt;/p&gt;
&lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;p&gt;本文只简单介绍一下矩形、线段和圆弧的画法。&lt;/p&gt;
&lt;h2 id=&quot;矩形&quot;&gt;&lt;a href=&quot;#矩形&quot; class=&quot;headerlink&quot; title=&quot;矩形&quot;&gt;&lt;/a&gt;矩形&lt;/h2&gt;&lt;p&gt;通过一个简单的例子来了解一下基本的API： &lt;/p&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML:&quot;&gt;&lt;/a&gt;HTML:&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;height:100%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   当前浏览器不支持Canvas，请更换浏览器后再试&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript:&quot;&gt;&lt;/a&gt;JavaScript:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var canvas = document.getElementById(&amp;apos;canvas&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ctx = canvas.getContext(&amp;apos;2d&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_WIDTH = window.screen.availWidth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var WINDOW_HEIGHT = window.screen.availHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.beginPath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;#000&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(10, 10, 55, 50);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillStyle = &amp;apos;rgba(0,0,200,0.5)&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ctx.fillRect(30, 30, 55, 50);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;页面上会如下显示：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/kisnows/v5Lhnf8k/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;首先获取到 canvas 元素，并通过 getContext(‘2d’) 获取到它的渲染上下文。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>轻量级fullPage整屏滚动框架V1.3发布</title>
    <link href="http://kisnows.com/2015/10/13/fullpage-js/"/>
    <id>http://kisnows.com/2015/10/13/fullpage-js/</id>
    <published>2015-10-13T12:23:40.000Z</published>
    <updated>2016-04-13T13:06:22.762Z</updated>
    
    <content type="html">&lt;h1 id=&quot;项目初衷&quot;&gt;&lt;a href=&quot;#项目初衷&quot; class=&quot;headerlink&quot; title=&quot;项目初衷&quot;&gt;&lt;/a&gt;项目初衷&lt;/h1&gt;&lt;p&gt;前段时间接到一个新的项目，是一个整屏滚动的单页应用。&lt;/p&gt;
&lt;p&gt;本来打算完全自己写的，但是由于项目时间吃紧，就用了&lt;a href=&quot;https://github.com/alvarotrigo/fullPage.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullpage&lt;/a&gt;这个框架。这个框架确实很强大，几乎你想要的API它都有，所以用起来也很方便。&lt;/p&gt;
&lt;p&gt;但是它也有几个缺点，第一它必须依赖 &lt;code&gt;jQuery&lt;/code&gt;,而且文件体积也比较庞大，对于移动端来说不是很友好。于是自己就抽出业余时间，写了这个项目。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kisnows/fullpage-light.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kisnows.com/fullpage-light.js/&quot;&gt;一个简单的DEMO&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;changeList&quot;&gt;&lt;a href=&quot;#changeList&quot; class=&quot;headerlink&quot; title=&quot;changeList&quot;&gt;&lt;/a&gt;changeList&lt;/h1&gt;&lt;p&gt;V1.3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修复对firefox的支持&lt;/li&gt;
&lt;li&gt;添加页面导航控制&lt;/li&gt;
&lt;li&gt;解决一些bug&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V1.1.0 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加自动播放 &lt;/li&gt;
&lt;li&gt;添加循环播放&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V1.0.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持移动端触摸控制&lt;/li&gt;
&lt;li&gt;添加slide水平滑动&lt;/li&gt;
&lt;li&gt;添加PC端键盘控制和鼠标滚轮控制&lt;/li&gt;
&lt;li&gt;提供实用的API方便开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;一个轻巧的&lt;code&gt;fullpage&lt;/code&gt;框架，不依赖其他任何库，主要针对移动端设备（同时也支持桌面端），压缩后不到4kb。&lt;br&gt;轻松创建炫酷的单页滑动网站。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;兼容性&quot;&gt;&lt;a href=&quot;#兼容性&quot; class=&quot;headerlink&quot; title=&quot;兼容性&quot;&gt;&lt;/a&gt;兼容性&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Android 4.1+&lt;/th&gt;
&lt;th&gt;Safari 7.1+&lt;/th&gt;
&lt;th&gt;IE Edge&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;引入 JavaScript 文件 &lt;code&gt;fullpage.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引入 css 文件 &lt;code&gt;fullpage.css&lt;/code&gt;（如果你使用&lt;code&gt;less&lt;/code&gt;，则可以在less主文件中引入&lt;code&gt;fullpage.less&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;按照下面格式书写&lt;code&gt;html&lt;/code&gt;代码（其中 id 为 &lt;code&gt;sectionContent&lt;/code&gt; 的为包裹层，你可以自定义修改其id）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;sectionContent&amp;quot; class=&amp;quot;fp-section-content&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;fp-section&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;div class=&amp;quot;fp-slide-wrap&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;div class=&amp;quot;fp-slide&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;div class=&amp;quot;fp-slide&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;div class=&amp;quot;fp-slide&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;div class=&amp;quot;fp-slide&amp;quot;&amp;gt;4&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;div class=&amp;quot;fp-slide&amp;quot;&amp;gt;5&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;fp-section&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;fp-section&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h1&gt;&lt;p&gt;简单使用，只要在页面加载完成后执行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fullpage.init(&amp;apos;#sectionContent&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果需要定制化，则需要如下方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fullpage.init(&amp;apos;#sectionContent&amp;apos;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       threshold: 10,              //触发滚动事件的阈值，越小越灵敏&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       pageSpeed: 600,             //滚屏速度，单位为毫秒 ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       afterLoad: null,            //页面载入事件，具体查看下面的 afterLoad 函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       beforeLeave: null           //页面离开事件，具体查看下面的 beforeLeave 函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##beforeLeave(leaveIndex,nowIndex)&lt;br&gt;离开当前页面时触发的事件，函数中 &lt;code&gt;this&lt;/code&gt; 指向当前页面的 &lt;code&gt;section&lt;/code&gt;,&lt;code&gt;leaveIndex&lt;/code&gt;为要离开页面的 &lt;code&gt;index&lt;/code&gt; ，&lt;code&gt;nowIndex&lt;/code&gt; 为要载入页面的 &lt;code&gt;Index&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;##afterLoad(afterIndex)&lt;br&gt;载入下一张页面后触发的事件，函数中 &lt;code&gt;this&lt;/code&gt; 指向将要载入页面的 &lt;code&gt;section&lt;/code&gt;, &lt;code&gt;afterIndex&lt;/code&gt; 为要载入页面的 &lt;code&gt;index&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fullpage.init(&lt;span class=&quot;string&quot;&gt;&#39;#sectionContent&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  beforeLeave: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;leaveIndex, nowIndex&lt;/span&gt;) &lt;/span&gt;&amp;#123;        &lt;span class=&quot;comment&quot;&gt;//如果现在在第1个页面，向下滚动后&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nowIndex === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;                               &lt;span class=&quot;comment&quot;&gt;//leaveIndex = 1,nowIndex = 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;You will leave page 2&#39;&lt;/span&gt;)              &lt;span class=&quot;comment&quot;&gt;//这条语句会执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, leaveIndex, nowIndex)             &lt;span class=&quot;comment&quot;&gt;//这里的 this 指向将要离开的页面元素，即第一个页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  afterLoad: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;afterIndex&lt;/span&gt;) &lt;/span&gt;&amp;#123;                    &lt;span class=&quot;comment&quot;&gt;//afterIndex = 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (afterIndex === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;                             &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;You will go to page 2&#39;&lt;/span&gt;)              &lt;span class=&quot;comment&quot;&gt;//这条语句会执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, afterIndex)                       &lt;span class=&quot;comment&quot;&gt;//此处 this 指向当前载入的页面，即第二个页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h1&gt;&lt;p&gt;##init(el,options)&lt;br&gt;页面初始化，&lt;code&gt;el&lt;/code&gt;为最外包裹层选择器，&lt;code&gt;options&lt;/code&gt;是要定制的参数。具体同&lt;a href=&quot;#初始化&quot;&gt;初始化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##moveTo(index,slideIndex)&lt;br&gt;滚动到指定页面,&lt;code&gt;index&lt;/code&gt; 为必选参数，&lt;code&gt;slideIndex&lt;/code&gt;为可选参数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fullpage.moveTo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)      &lt;span class=&quot;comment&quot;&gt;//滚动到第一个页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fullpage.moveTo(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;//滚动到第三个页面的第二个slider&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##moveToNext(callback)&lt;br&gt;垂直滚动到下一个页面,&lt;code&gt;callback&lt;/code&gt;为回掉函数，可选。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fullpage.moveToNext();            &lt;span class=&quot;comment&quot;&gt;//滚动到下一个页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fullpage.moveToNext(callback)     &lt;span class=&quot;comment&quot;&gt;//滚动到下一个页面后，执行 callback&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fullpage.moveToNext(callback,params...)   &lt;span class=&quot;comment&quot;&gt;//滚动到下一个页面后，执行 callback,params为callback的参数，根据情况传入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a,b)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fullpage.moveToNext(foo,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)              &lt;span class=&quot;comment&quot;&gt;//滚动到下一个页面，并输出 1，2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;moveToPre-callback&quot;&gt;&lt;a href=&quot;#moveToPre-callback&quot; class=&quot;headerlink&quot; title=&quot;moveToPre(callback)&quot;&gt;&lt;/a&gt;moveToPre(callback)&lt;/h2&gt;&lt;p&gt;垂直滚动到上一个页面，用法同 &lt;code&gt;moveToNext(callback)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;slideToNext&quot;&gt;&lt;a href=&quot;#slideToNext&quot; class=&quot;headerlink&quot; title=&quot;slideToNext()&quot;&gt;&lt;/a&gt;slideToNext()&lt;/h2&gt;&lt;p&gt;水平滚动到下一个页面（页面向左滚动）&lt;/p&gt;
&lt;h2 id=&quot;slideToPre&quot;&gt;&lt;a href=&quot;#slideToPre&quot; class=&quot;headerlink&quot; title=&quot;slideToPre()&quot;&gt;&lt;/a&gt;slideToPre()&lt;/h2&gt;&lt;p&gt;水平滚动到上一个页面（页面向右滚动）&lt;/p&gt;
&lt;h1 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;del&gt;添加滚动到指定页面方法&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;页面滚动时，页面载入或离开时添加自定义事件&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;横屏滚动支持&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;添加鼠标滚轮控制&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;添加键盘控制&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;项目初衷&quot;&gt;&lt;a href=&quot;#项目初衷&quot; class=&quot;headerlink&quot; title=&quot;项目初衷&quot;&gt;&lt;/a&gt;项目初衷&lt;/h1&gt;&lt;p&gt;前段时间接到一个新的项目，是一个整屏滚动的单页应用。&lt;/p&gt;
&lt;p&gt;本来打算完全自己写的，但是由于项目时间吃紧，就用了&lt;a href=&quot;https://github.com/alvarotrigo/fullPage.js&quot;&gt;fullpage&lt;/a&gt;这个框架。这个框架确实很强大，几乎你想要的API它都有，所以用起来也很方便。&lt;/p&gt;
&lt;p&gt;但是它也有几个缺点，第一它必须依赖 &lt;code&gt;jQuery&lt;/code&gt;,而且文件体积也比较庞大，对于移动端来说不是很友好。于是自己就抽出业余时间，写了这个项目。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kisnows/fullpage-light.js&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kisnows.com/fullpage-light.js/&quot;&gt;一个简单的DEMO&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;changeList&quot;&gt;&lt;a href=&quot;#changeList&quot; class=&quot;headerlink&quot; title=&quot;changeList&quot;&gt;&lt;/a&gt;changeList&lt;/h1&gt;&lt;p&gt;V1.3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修复对firefox的支持&lt;/li&gt;
&lt;li&gt;添加页面导航控制&lt;/li&gt;
&lt;li&gt;解决一些bug&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V1.1.0 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加自动播放 &lt;/li&gt;
&lt;li&gt;添加循环播放&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V1.0.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持移动端触摸控制&lt;/li&gt;
&lt;li&gt;添加slide水平滑动&lt;/li&gt;
&lt;li&gt;添加PC端键盘控制和鼠标滚轮控制&lt;/li&gt;
&lt;li&gt;提供实用的API方便开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;一个轻巧的&lt;code&gt;fullpage&lt;/code&gt;框架，不依赖其他任何库，主要针对移动端设备（同时也支持桌面端），压缩后不到4kb。&lt;br&gt;轻松创建炫酷的单页滑动网站。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="project" scheme="http://kisnows.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>初试 react-router</title>
    <link href="http://kisnows.com/2015/10/08/react-router/"/>
    <id>http://kisnows.com/2015/10/08/react-router/</id>
    <published>2015-10-08T13:58:24.000Z</published>
    <updated>2016-04-02T03:37:51.398Z</updated>
    
    <content type="html">&lt;p&gt;react-router 提供简单有强大 API 来方便我们在&lt;code&gt;React&lt;/code&gt;搭建的单页面中实现路由功能。&lt;br&gt;首先看一个简单的例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;render,findDOMNode&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Router, Route, Link &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Page1 = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Page1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab accusantium animi dicta&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dignissimos earum eos esse impedit ipsum iste laboriosam numquam odio perspiciatis porro, quas sequi tempore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vero vitae voluptates?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Page2 = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Page2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fuga porro voluptas voluptatum.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Corporis debitis deleniti, doloremque et eum ex id iste magni nobis nostrum quae, reiciendis rem repellendus&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        similique tempora.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; App = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/page1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/page2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render((&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Route path=&quot;/&quot; component=&amp;#123;App&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;page1&quot; component=&amp;#123;Page1&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;page2&quot; component=&amp;#123;Page2&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/Route&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;), document.body);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只需要在 &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 标签中的 to 属性中定义路径，那么在渲染出的页面中点击 Page1 或 Page2 标签，就会显示相应的 Components，而且 url 也会跟着路径进行变化。&lt;br&gt;我们来简单分析一个这段代码，这里我们定义了三个路由，一个指向根目录即 ‘/‘,一个指向 ‘page/‘,一个指向 ‘page/2’.&lt;br&gt;路由定义必须包裹在 &lt;code&gt;&amp;lt;Router&amp;gt;&amp;lt;/Router&amp;gt;&lt;/code&gt; 中。&lt;br&gt;&lt;code&gt;&amp;lt;Route&amp;gt;&amp;lt;/Route&amp;gt;&lt;/code&gt;为每一个路由要定义的路径，并处理它的行为。其中 path 为路径， component 为要渲染的组件。并且还可以提供相应的 handle，用来处理控制路由的行为。&lt;br&gt;接下来我们来模拟一个拦截登陆的行为。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;render,findDOMNode&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Router, Route, Link, History &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; TransitionGroup &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-addons-transition-group&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./index.css&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; goLogin = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  isLogin: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  login()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.isLogin ? &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onChange(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onChange(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.isLogin = !&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.isLogin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  onChange()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; App = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getInitialState()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      login: goLogin.isLogin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  updateAuth(logged)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      login: logged&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentWillMount()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    goLogin.onChange = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateAuth&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;nav&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#123;this.state.login ? (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/logout&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Log out&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          ) : (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/login&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Log in&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/page1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;activeClassName&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/page2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;activeClassName&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;this.props.children&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Login = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mixins: [History],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  handleClick(event)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    event.preventDefault();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    goLogin.login();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;location&amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (location.state &amp;amp;&amp;amp; location.state.nextPathname) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.history.replaceState(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, location.state.nextPathname)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.history.replaceState(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;/about&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.history)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handleClick&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;Login&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Logout = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentDidMount()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    goLogin.login()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;You are now logged out&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; About = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;登录成功&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Page1 = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;page&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Page1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab accusantium animi&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dicta&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dignissimos earum eos esse impedit ipsum iste laboriosam numquam odio perspiciatis porro, quas sequi tempore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vero vitae voluptates?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Page2 = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getInitialState()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      className: &lt;span class=&quot;string&quot;&gt;&#39;pageactive&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  handler()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.className === &lt;span class=&quot;string&quot;&gt;&#39;pageactive&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        className: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        className: &lt;span class=&quot;string&quot;&gt;&#39;pageactive&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;`$&amp;#123;&lt;span class=&quot;attr&quot;&gt;this.state.className&lt;/span&gt;&amp;#125; &lt;span class=&quot;attr&quot;&gt;page&lt;/span&gt;`&amp;#125; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handler&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Page2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        consectetur adipisicing elit. Fuga porro voluptas&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        voluptatum.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Corporis debitis deleniti, doloremque et eum ex id iste magni nobis nostrum quae, reiciendis rem repellendus&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        similique tempora.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义 &lt;code&gt;needLogin&lt;/code&gt; 函数，用来判断用户否登陆并根据情况跳转到相应的页面。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;needLogin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;nextState, replaceState&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!goLogin.isLogin) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    replaceState(&amp;#123;nextPathname: nextState.location.pathname&amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，执行 &lt;code&gt;render&lt;/code&gt; 命令。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;render((&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Route path=&quot;/&quot; component=&amp;#123;App&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;login&quot; component=&amp;#123;Login&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;logout&quot; component=&amp;#123;Logout&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;about&quot; component=&amp;#123;About&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;page1&quot; component=&amp;#123;Page1&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;page2&quot; component=&amp;#123;Page2&amp;#125; onEnter=&amp;#123;needLogin&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/Route&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;), document.body);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kisnows.com/F2E-practice/react-router/src/index.html&quot;&gt;点击这里查看DEMO&lt;/a&gt;&lt;br&gt;这段代码实现了这么一个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先页面默认为未登录状态。&lt;/li&gt;
&lt;li&gt;此时点击 Page1,会显示 Page1 的内容。&lt;/li&gt;
&lt;li&gt;点击 Page2 的时候，Page内容的显示被拦截，出现登陆页面。&lt;/li&gt;
&lt;li&gt;当你点击 login 后，就会显示 Page2 的内容，并且状态切换为 Logout.&lt;/li&gt;
&lt;li&gt;当我们点击 Logout 的时候，就会退出登录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这段代码中，当我们点击 page2 的时候，首先会触发 &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 标签中的 to 属性来找到对应的path为 page2 的路由，然后会触发 needLogin 事件。&lt;br&gt;在 needLogin 事件中，我们判断 goLogin.isLogin 事件，如果未登录，则将路径替换为 ‘/login’.&lt;br&gt;并在 &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; 中找到 path 为 ‘/login’ 的一项，然后渲染 Login 组件。&lt;br&gt;也就是说我们可以在 &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; 中监听事件，以此来根据需要动态的改变路由地址。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;react-router 提供简单有强大 API 来方便我们在&lt;code&gt;React&lt;/code&gt;搭建的单页面中实现路由功能。&lt;br&gt;首先看一个简单的例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;render,findDOMNode&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Router, Route, Link &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Page1 = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Page1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab accusantium animi dicta&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dignissimos earum eos esse impedit ipsum iste laboriosam numquam odio perspiciatis porro, quas sequi tempore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vero vitae voluptates?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Page2 = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Page2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fuga porro voluptas voluptatum.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Corporis debitis deleniti, doloremque et eum ex id iste magni nobis nostrum quae, reiciendis rem repellendus&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        similique tempora.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; App = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/page1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;to&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/page2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Link&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render((&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Route path=&quot;/&quot; component=&amp;#123;App&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;page1&quot; component=&amp;#123;Page1&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Route path=&quot;page2&quot; component=&amp;#123;Page2&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/Route&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;), document.body);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只需要在 &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 标签中的 to 属性中定义路径，那么在渲染出的页面中点击 Page1 或 Page2 标签，就会显示相应的 Components，而且 url 也会跟着路径进行变化。&lt;br&gt;我们来简单分析一个这段代码，这里我们定义了三个路由，一个指向根目录即 ‘/‘,一个指向 ‘page/‘,一个指向 ‘page/2’.&lt;br&gt;路由定义必须包裹在 &lt;code&gt;&amp;lt;Router&amp;gt;&amp;lt;/Router&amp;gt;&lt;/code&gt; 中。&lt;br&gt;&lt;code&gt;&amp;lt;Route&amp;gt;&amp;lt;/Route&amp;gt;&lt;/code&gt;为每一个路由要定义的路径，并处理它的行为。其中 path 为路径， component 为要渲染的组件。并且还可以提供相应的 handle，用来处理控制路由的行为。&lt;br&gt;接下来我们来模拟一个拦截登陆的行为。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
      <category term="React" scheme="http://kisnows.com/tags/react/"/>
    
      <category term="react-route" scheme="http://kisnows.com/tags/react-route/"/>
    
  </entry>
  
  <entry>
    <title>learnyounode-functional-javascript</title>
    <link href="http://kisnows.com/2015/09/23/learnyounode-functional-javascript/"/>
    <id>http://kisnows.com/2015/09/23/learnyounode-functional-javascript/</id>
    <published>2015-09-23T11:53:33.000Z</published>
    <updated>2016-04-02T03:37:51.379Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/imgs/learnyounode-functional-javascript.png&quot; alt=&quot;fun&quot;&gt;&lt;br&gt;坑爹的CMD不知怎么回事，在做到倒数第三道题后突然罢工了，不能选择题目，公司和自己的电脑都是这样。&lt;br&gt;于是最后三道题还是放弃了，也没精力去找那三道题到底是什么了，就这样吧。&lt;/p&gt;
&lt;p&gt;做题的过程中有个需要注意的地方，也是在js中一个很常用的方法。&lt;br&gt;那就是被setTimeout延迟的函数会等前面函数彻底执行完以后，才会执行,也就是说可以阻塞js的进程。如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;operation, num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// modify this so it can be interrupted&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      operation();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; repeat(operation, --num);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = repeat&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Operation是一个操作很费时间的函数，如果不用setTimeout延迟后面的递归调用的话，就会造成repeat函数已经执行完了，但是含有很多个operation没有执行完的情况。&lt;/p&gt;
&lt;p&gt;其它的到没有什么了，所有代码都放在&lt;a href=&quot;https://github.com/kisnows/nodeschool/tree/master/functional-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/imgs/learnyounode-functional-javascript.png&quot; alt=&quot;fun&quot;&gt;&lt;br&gt;坑爹的CMD不知怎么回事，在做到倒数第三道题后突然罢工了，不能选择题目，公司和自己的电脑都是这样。&lt;br&gt;于是最后三道题还是放弃了，也
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://kisnows.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript6学习简记（三）- 函数扩展</title>
    <link href="http://kisnows.com/2015/09/08/Learning-ECMAScript6-Three/"/>
    <id>http://kisnows.com/2015/09/08/Learning-ECMAScript6-Three/</id>
    <published>2015-09-08T13:24:03.000Z</published>
    <updated>2016-04-13T13:15:42.024Z</updated>
    
    <content type="html">&lt;h1 id=&quot;1-函数参数默认值&quot;&gt;&lt;a href=&quot;#1-函数参数默认值&quot; class=&quot;headerlink&quot; title=&quot;1.函数参数默认值&quot;&gt;&lt;/a&gt;1.函数参数默认值&lt;/h1&gt;&lt;p&gt;以前我们经常会些下面的代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doS&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    e = e|&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.e;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//doSomeThing with e&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这样的方法来给函数设置默认值，这样有一个缺点就是，如果传进来的参数对应的布尔值为&lt;code&gt;false&lt;/code&gt;，比如空字符串或者0，那就尴尬了。&lt;/p&gt;
&lt;p&gt;所以如果我们还想上面的代码得到正确的结果，就需要对e在做一个判断，判断它是否被赋值了。&lt;/p&gt;
&lt;p&gt;这样会很麻烦，所以ES6有了新的方法，如下&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doS&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e=window.e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//doSomeThing with e&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样不尽代码简短了很多，而且可读性大大提高，看代码的人可以一样看到那些参数是有默认值的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;同时，默认值的设置也非常人性化&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;url,&amp;#123;body=&#39;&#39;,method=&#39;GET&#39;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(method);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码中，传入第二个参数是一个对象，我们可以给对象的属性设置默认值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;甚至还可以设置双重默认值。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fetch(url, &amp;#123; method = &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt; &amp;#125; = &amp;#123;&amp;#125;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(method);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面代码中，调用函数fetch时，如果不含第二个参数，则默认值为一个空对象；如果包含第二个参数，则它的method属性默认值为GET。&lt;/p&gt;
&lt;p&gt;参数的默认值设置同样支持解构赋值，&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ha&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&amp;#123;x,y=5&amp;#125;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x,y);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ha()            &lt;span class=&quot;comment&quot;&gt;//TypeError: Cannot read property &#39;x&#39; of undefined&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ha(&amp;#123;&amp;#125;)          &lt;span class=&quot;comment&quot;&gt;//undefined 5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ha(&amp;#123;x:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;)       &lt;span class=&quot;comment&quot;&gt;//1 5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ha(&amp;#123;x:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,y:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;)   &lt;span class=&quot;comment&quot;&gt;//1 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义默认值的参数，必须在参数的尾部，因为有了默认之后参数可以被省略，而只有位于尾部，函数才能判断到底省略了那个参数。&lt;/p&gt;
&lt;p&gt;如果给设置默认值的参数传入&lt;code&gt;undefined&lt;/code&gt;和&lt;code&gt;null&lt;/code&gt;,前者该函数会触发默认值，而后者不会。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;b=1,c=2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b,c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1 null&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，如果设置了默认值，那么函数的&lt;code&gt;length&lt;/code&gt;属性会失真&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;).length&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b,c&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;).length&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b,c=1&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;).length&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b=1,c=1&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;).length&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，没设置默认值的时候，函数的&lt;code&gt;length&lt;/code&gt;等于它的参数个数，而设置了默认值之后，它的&lt;code&gt;length&lt;/code&gt;值等于没有设置默认值的参数的个数。&lt;/p&gt;
&lt;h1 id=&quot;2-rest参数&quot;&gt;&lt;a href=&quot;#2-rest参数&quot; class=&quot;headerlink&quot; title=&quot;2.rest参数&quot;&gt;&lt;/a&gt;2.rest参数&lt;/h1&gt;&lt;p&gt;rest参数用于获取函数的多余变量，这样可以避免使用arguments对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...values&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  values.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sum += value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，该函数可以返回传入参数的和。同时，注意到rest参数其实是一个数组，所以数组的方法它都可以使用，所以上面代码中的&lt;code&gt;forEach&lt;/code&gt;是可以使用的。&lt;/p&gt;
&lt;p&gt;需要注意的是，rest参数同参数的默认值一样，必须在参数的最后。而函数的&lt;code&gt;length&lt;/code&gt;属性是不包括rest参数的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;).length             &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...a&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;).length          &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, ...b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;).length       &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;3-扩展运算符&quot;&gt;&lt;a href=&quot;#3-扩展运算符&quot; class=&quot;headerlink&quot; title=&quot;3.扩展运算符&quot;&gt;&lt;/a&gt;3.扩展运算符&lt;/h1&gt;&lt;p&gt;扩展运算符，符号三个点（…），它可以看作是rest参数的你运算，可以讲一个数组转为用逗号分割的参数序列。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(...array)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;,...array,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该运算符主要用于函数的调用。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, ...items&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  array.push(...items);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;add(...numbers) &lt;span class=&quot;comment&quot;&gt;// 42&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;上面代码中，array.push(…items)和add(…numbers)这两行，都是函数的调用，它们的都使用了扩展运算符。该运算符将一个数组，变为参数序列。&lt;/p&gt;
&lt;p&gt;由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES5的写法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;x, y, z&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES6的写法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;x, y, z&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f(...args);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个实际的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;,]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(...a)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ES5要实现同样的功能则需要&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,a);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;扩展运算符可以简化很多种ES5的写法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].concat(more)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, ...more]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;list.push.apply(list, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;list.push(...[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;list = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = list[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], rest = list.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,rest = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES6  这里是用到了解构赋值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [a, ...rest] = list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,rest = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.bind.apply(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;, [&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(...[&lt;span class=&quot;number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的是，如果将扩展运算符用于数组赋值，只能放在参数的最后，否则会报错。（这是肯定的嘛，否则程序怎么知道扩展运算符的长度是多少）。&lt;/p&gt;
&lt;p&gt;扩展运算符可以将字符串转为数组(Array.from()也可以)。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; [...&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt; ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;4-箭头函数&quot;&gt;&lt;a href=&quot;#4-箭头函数&quot; class=&quot;headerlink&quot; title=&quot;4.箭头函数&quot;&gt;&lt;/a&gt;4.箭头函数&lt;/h1&gt;&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;使用‘箭头’来快速定义函数&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fn = f =&amp;gt; f;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;相当于&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当不需要参数的时候，或参数大于一个的时候，用括号代表参数部分：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = () =&amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum =(sum1,sum2) =&amp;gt; num1 + num2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sum1,sum2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum1+sum2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总之箭头后面就是函数要&lt;code&gt;return&lt;/code&gt;的内容。&lt;br&gt;当箭头函数的代码块部分多余一条语句的时候，需要用大括号括起来，并且使用&lt;code&gt;return&lt;/code&gt;返回。而由于大括号被解释为代码块，所以如果箭头函数需要返回对象的时候，必须在对象外面加上括号，否则会被解释为代码块。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = (num1,num2) =&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1+num2&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum1 = sumI =&amp;gt; (&amp;#123;su1:&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;,su2:&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样，箭头函数可以配合变量的解构赋值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; person = (&amp;#123;you,i&amp;#125;) =&amp;gt; you + &lt;span class=&quot;string&quot;&gt;&#39;love&#39;&lt;/span&gt; + i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; person(&amp;#123;you:&lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;,i:&lt;span class=&quot;string&quot;&gt;&#39;i&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;ylovei&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj.you +&lt;span class=&quot;string&quot;&gt;&#39;love&#39;&lt;/span&gt;+obj.i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;使用注意点&lt;br&gt; 箭头函数有几个使用注意点。&lt;/p&gt;
&lt;p&gt;（1）函数体内的this对象，绑定定义时所在的对象，而不是使用时所在的对象。&lt;/p&gt;
&lt;p&gt;（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。&lt;/p&gt;
&lt;p&gt;（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。&lt;/p&gt;
&lt;p&gt;（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。&lt;/p&gt;
&lt;p&gt;上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。下面的代码是一个例子，将this对象绑定定义时所在的对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;版权&quot;&gt;&lt;a href=&quot;#版权&quot; class=&quot;headerlink&quot; title=&quot;版权&quot;&gt;&lt;/a&gt;版权&lt;/h1&gt;&lt;p&gt;文章中所有代码皆来自或演变自：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰-ECMAScript 6 入门&lt;/a&gt;,&lt;br&gt;本文同样遵循&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;署名-非商用许可证&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-函数参数默认值&quot;&gt;&lt;a href=&quot;#1-函数参数默认值&quot; class=&quot;headerlink&quot; title=&quot;1.函数参数默认值&quot;&gt;&lt;/a&gt;1.函数参数默认值&lt;/h1&gt;&lt;p&gt;以前我们经常会些下面的代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doS&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    e = e|&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.e;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//doSomeThing with e&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这样的方法来给函数设置默认值，这样有一个缺点就是，如果传进来的参数对应的布尔值为&lt;code&gt;false&lt;/code&gt;，比如空字符串或者0，那就尴尬了。&lt;/p&gt;
&lt;p&gt;所以如果我们还想上面的代码得到正确的结果，就需要对e在做一个判断，判断它是否被赋值了。&lt;/p&gt;
&lt;p&gt;这样会很麻烦，所以ES6有了新的方法，如下&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doS&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e=window.e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//doSomeThing with e&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样不尽代码简短了很多，而且可读性大大提高，看代码的人可以一样看到那些参数是有默认值的。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="es6" scheme="http://kisnows.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript6学习简记（二）- 数组扩展</title>
    <link href="http://kisnows.com/2015/09/02/learning-ECMAScript6-Two/"/>
    <id>http://kisnows.com/2015/09/02/learning-ECMAScript6-Two/</id>
    <published>2015-09-02T05:39:20.000Z</published>
    <updated>2016-04-13T13:15:41.394Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Array-from&quot;&gt;&lt;a href=&quot;#Array-from&quot; class=&quot;headerlink&quot; title=&quot;Array.from()&quot;&gt;&lt;/a&gt;Array.from()&lt;/h1&gt;&lt;p&gt;将类数组或可迭代对象转换为真正的数组。&lt;/p&gt;
&lt;h2 id=&quot;可转换的类别&quot;&gt;&lt;a href=&quot;#可转换的类别&quot; class=&quot;headerlink&quot; title=&quot;可转换的类别&quot;&gt;&lt;/a&gt;可转换的类别&lt;/h2&gt;&lt;h3 id=&quot;Dom集合&quot;&gt;&lt;a href=&quot;#Dom集合&quot; class=&quot;headerlink&quot; title=&quot;Dom集合&quot;&gt;&lt;/a&gt;Dom集合&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ps = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectAll(&lt;span class=&quot;string&quot;&gt;&#39;p&#39;&lt;/span&gt;);          &lt;span class=&quot;comment&quot;&gt;//通过Array.from 转换后可以使用forEach方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(ps).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;p,index&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;	&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p,index)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arguments对象&quot;&gt;&lt;a href=&quot;#arguments对象&quot; class=&quot;headerlink&quot; title=&quot;arguments对象&quot;&gt;&lt;/a&gt;arguments对象&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;	&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);                   &lt;span class=&quot;comment&quot;&gt;//可以替代以前下面这种方式来转换&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; argvs = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(argvs, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);           &lt;span class=&quot;comment&quot;&gt;//[ 1, 2, 3, 4 ] [ 1, 2, 3, 4 ]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;拥有length属性的对象&quot;&gt;&lt;a href=&quot;#拥有length属性的对象&quot; class=&quot;headerlink&quot; title=&quot;拥有length属性的对象&quot;&gt;&lt;/a&gt;拥有&lt;code&gt;length&lt;/code&gt;属性的对象&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truelength: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(obj));           &lt;span class=&quot;comment&quot;&gt;//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(obj1));          &lt;span class=&quot;comment&quot;&gt;//[] 没有length属性，无法转换&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，对象的属性值必须是数字，否则转换的数组内容都是&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj2=&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;truelength:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(obj2));			&lt;span class=&quot;comment&quot;&gt;//[ undefined, undefined, undefined ]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;同时Array-from-接受第二个参数，作用类似于map方法&quot;&gt;&lt;a href=&quot;#同时Array-from-接受第二个参数，作用类似于map方法&quot; class=&quot;headerlink&quot; title=&quot;同时Array.from()接受第二个参数，作用类似于map方法&quot;&gt;&lt;/a&gt;同时Array.from()接受第二个参数，作用类似于map方法&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(obj, x=&amp;gt;x + &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;));  		&lt;span class=&quot;comment&quot;&gt;//[ &#39;a1&#39;, &#39;b1&#39;, &#39;c1&#39; ]  类似于map方法&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#Array.of()&lt;br&gt;可将一组值转换为数组&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Array.of(3, 12, 2, 3, 24, 2);                //[ 3, 12, 2, 3, 24, 2 ]    将一组值转换为数组&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Array.of(3, &amp;apos;12&amp;apos;, [2], 3, 24, 2);            //[ 3, &amp;apos;12&amp;apos;, [ 2 ], 3, 24, 2 ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个方法的目的是为了弥补数组构造函数的Array()的不足，因为当参数个数不同时，它会产生不同的效果&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// [ , , , , , , ,  ]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// [3, 11]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;find-和findIndex&quot;&gt;&lt;a href=&quot;#find-和findIndex&quot; class=&quot;headerlink&quot; title=&quot;find()和findIndex()&quot;&gt;&lt;/a&gt;find()和findIndex()&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; found = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;].find(n=&amp;gt;n &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);          &lt;span class=&quot;comment&quot;&gt;//find 找出第一个返回值为true的成员&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; founded = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;].find(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;result:&#39;&lt;/span&gt;, found, founded);   &lt;span class=&quot;comment&quot;&gt;//result: -1 4&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;findIndex返回第一个符合条件的值的&lt;code&gt;index&lt;/code&gt;,如果没找到则返回 -1.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foundIndex = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;324&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;].findIndex(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value,index,arr&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;	&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value &amp;gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foundIndex);                    &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个方法都可以发现&lt;code&gt;NaN&lt;/code&gt;，而&lt;code&gt;IndexOf&lt;/code&gt;是不能发现的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log([&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;].indexOf(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;));      &lt;span class=&quot;comment&quot;&gt;//-1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;].find(value=&amp;gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;,value)));                     &lt;span class=&quot;comment&quot;&gt;//NaN&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;].findIndex(value=&amp;gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.is(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;,value)));            &lt;span class=&quot;comment&quot;&gt;//4&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Array-fill&quot;&gt;&lt;a href=&quot;#Array-fill&quot; class=&quot;headerlink&quot; title=&quot;Array.fill()&quot;&gt;&lt;/a&gt;Array.fill()&lt;/h1&gt;&lt;p&gt;使用给定值，填充一个数组&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;].fill(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;);                &lt;span class=&quot;comment&quot;&gt;//[ &#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39; ]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;).fill(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);               &lt;span class=&quot;comment&quot;&gt;//[ 3, 3, 3, 3, 3, 3 ]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;fill()还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;].fill(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)				&lt;span class=&quot;comment&quot;&gt;//[1,8,3,4]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;].fill(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)				&lt;span class=&quot;comment&quot;&gt;//[ 1, 8, 8, 4 ]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;entries-，keys-和values&quot;&gt;&lt;a href=&quot;#entries-，keys-和values&quot; class=&quot;headerlink&quot; title=&quot;entries()，keys()和values()&quot;&gt;&lt;/a&gt;entries()，keys()和values()&lt;/h1&gt;&lt;p&gt;这三个方法都是用来遍历数组，可以使用&lt;code&gt;for...of&lt;/code&gt;来进行遍历，&lt;code&gt;keys()&lt;/code&gt;用来遍历键名，&lt;code&gt;values()&lt;/code&gt;用来遍历键值，&lt;code&gt;entries()&lt;/code&gt;对键值对遍历。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;].keys()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; elem &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;].values()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(elem);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;a&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &#39;b&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [index, elem] &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;].entries()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(index, elem);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0 &quot;a&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1 &quot;b&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;个人感觉意义不大，和以前的&lt;code&gt;forEach&lt;/code&gt;是一样的功能，有个不同的地方是如果不适用&lt;code&gt;for...of&lt;/code&gt;遍历的话，可以使用&lt;code&gt;next&lt;/code&gt;来手动遍历。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; word = [&lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; entries = word.entries();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(entries.next().value);		[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(entries.next().value);		[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;其他方法&quot;&gt;&lt;a href=&quot;#其他方法&quot; class=&quot;headerlink&quot; title=&quot;其他方法&quot;&gt;&lt;/a&gt;其他方法&lt;/h1&gt;&lt;p&gt;这些都属于ES7要实现的内容&lt;/p&gt;
&lt;h2 id=&quot;include&quot;&gt;&lt;a href=&quot;#include&quot; class=&quot;headerlink&quot; title=&quot;include&quot;&gt;&lt;/a&gt;include&lt;/h2&gt;&lt;p&gt;判断一个数组是否包含给定的值，返回的是一个布尔值。&lt;/p&gt;
&lt;h2 id=&quot;数组推导&quot;&gt;&lt;a href=&quot;#数组推导&quot; class=&quot;headerlink&quot; title=&quot;数组推导&quot;&gt;&lt;/a&gt;数组推导&lt;/h2&gt;&lt;p&gt;感觉这里跟&lt;code&gt;python&lt;/code&gt;越来越像了。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a2 = [&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; a1) i * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a2 &lt;span class=&quot;comment&quot;&gt;// [2, 4, 6, 8]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;for…of后面还可以附加if语句，用来设定循环的限制条件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; years = [ &lt;span class=&quot;number&quot;&gt;1954&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1974&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1990&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2006&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2010&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt; ];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (year &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; years) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (year &amp;gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;) year];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ 2006, 2010, 2014 ]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (year &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; years) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (year &amp;gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(year &amp;lt; &lt;span class=&quot;number&quot;&gt;2010&lt;/span&gt;) year];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ 2006]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (year &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; years) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (year &amp;gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt; &amp;amp;&amp;amp; year &amp;lt; &lt;span class=&quot;number&quot;&gt;2010&lt;/span&gt;) year];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ 2006]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Array-observe-，Array-unobserve&quot;&gt;&lt;a href=&quot;#Array-observe-，Array-unobserve&quot; class=&quot;headerlink&quot; title=&quot;Array.observe()，Array.unobserve()&quot;&gt;&lt;/a&gt;Array.observe()，Array.unobserve()&lt;/h2&gt;&lt;p&gt;用于监听和数组的变化，制定回调函数。&lt;br&gt;比较期待这个方法，作用会很大。&lt;/p&gt;
&lt;p&gt;#版权&lt;br&gt;文章中所有代码皆来自或演变自：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰-ECMAScript 6 入门&lt;/a&gt;,&lt;br&gt;本文同样遵循&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;署名-非商用许可证&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Array-from&quot;&gt;&lt;a href=&quot;#Array-from&quot; class=&quot;headerlink&quot; title=&quot;Array.from()&quot;&gt;&lt;/a&gt;Array.from()&lt;/h1&gt;&lt;p&gt;将类数组或可迭代对象转换为真正的数组。&lt;/p&gt;
&lt;h2 id=&quot;可转换的类别&quot;&gt;&lt;a href=&quot;#可转换的类别&quot; class=&quot;headerlink&quot; title=&quot;可转换的类别&quot;&gt;&lt;/a&gt;可转换的类别&lt;/h2&gt;&lt;h3 id=&quot;Dom集合&quot;&gt;&lt;a href=&quot;#Dom集合&quot; class=&quot;headerlink&quot; title=&quot;Dom集合&quot;&gt;&lt;/a&gt;Dom集合&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ps = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectAll(&lt;span class=&quot;string&quot;&gt;&#39;p&#39;&lt;/span&gt;);          &lt;span class=&quot;comment&quot;&gt;//通过Array.from 转换后可以使用forEach方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(ps).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;p,index&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;	&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p,index)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arguments对象&quot;&gt;&lt;a href=&quot;#arguments对象&quot; class=&quot;headerlink&quot; title=&quot;arguments对象&quot;&gt;&lt;/a&gt;arguments对象&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;	&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);                   &lt;span class=&quot;comment&quot;&gt;//可以替代以前下面这种方式来转换&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; argvs = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(argvs, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);           &lt;span class=&quot;comment&quot;&gt;//[ 1, 2, 3, 4 ] [ 1, 2, 3, 4 ]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kisnows.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习笔记" scheme="http://kisnows.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="es6" scheme="http://kisnows.com/tags/es6/"/>
    
  </entry>
  
</feed>
